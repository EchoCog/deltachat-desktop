{
  "version": 3,
  "sources": ["../src/session-store.ts", "../src/middlewares.ts", "../../shared/state.ts", "../../shared/logger.ts", "../src/config.ts", "../src/get-build-info.ts", "../src/rc-config.ts", "../src/backendApi.ts", "../src/deltachat-rpc.ts", "../src/help.ts", "../src/log-handler.ts", "../../shared/themes.ts", "../src/themes.ts", "../src/index.ts"],
  "sourcesContent": ["import { SessionData, Store } from 'express-session'\nimport { LocalStorage } from 'node-localstorage'\n\nexport class FileStore extends Store {\n  constructor(public localstorage: LocalStorage) {\n    super()\n  }\n  get(\n    sid: string,\n    callback: (err: any, session?: SessionData | null) => void\n  ): void {\n    try {\n      const rawSession = this.localstorage.getItem(`session_${sid}`)\n      callback(null, rawSession ? JSON.parse(rawSession) : null)\n    } catch (error) {\n      callback(error)\n    }\n  }\n  set(sid: string, session: SessionData, callback?: (err?: any) => void): void {\n    try {\n      this.localstorage.setItem(`session_${sid}`, JSON.stringify(session))\n      callback?.(null)\n    } catch (error) {\n      callback?.(error)\n    }\n  }\n  destroy(sid: string, callback?: (err?: any) => void): void {\n    try {\n      this.localstorage.removeItem(`session_${sid}`)\n      callback?.(null)\n    } catch (error) {\n      callback?.(error)\n    }\n  }\n}\n", "import express from 'express'\n\nexport function CORSMiddleWare(\n  _req: express.Request,\n  res: express.Response,\n  next: express.NextFunction\n) {\n  res.header('Access-Control-Allow-Origin', 'localhost')\n  res.header(\n    'Access-Control-Allow-Headers',\n    'Origin, X-Requested-With, Content-Type, Accept'\n  )\n  next()\n}\n\nexport function authMiddleWare(\n  req: express.Request,\n  res: express.Response,\n  next: express.NextFunction\n) {\n  if (!req.session.isAuthenticated) {\n    res.status(401)\n    return res.send('Not Authenticated')\n  } else {\n    next()\n  }\n}\n", "import { DesktopSettingsType } from './shared-types.js'\n\nexport function getDefaultState(): DesktopSettingsType {\n  /**\n   * Persisted state. Must be JSON.\n   */\n  return {\n    bounds: {},\n    HTMLEmailWindowBounds: undefined,\n    enterKeySends: false,\n    notifications: true,\n    showNotificationContent: true,\n    locale: null, // if this is null, the system chooses the system language that electron reports\n    credentials: undefined,\n    lastAccount: undefined,\n    enableAVCalls: false,\n    enableBroadcastLists: false,\n    enableChatAuditLog: false,\n    enableOnDemandLocationStreaming: false,\n    chatViewBgImg: undefined,\n    lastChats: {},\n    zoomFactor: 1,\n    activeTheme: 'system',\n    minimizeToTray: true,\n    syncAllAccounts: true,\n    lastSaveDialogLocation: undefined,\n    experimentalEnableMarkdownInMessages: false,\n    enableWebxdcDevTools: false,\n    HTMLEmailAskForRemoteLoadingConfirmation: true,\n    HTMLEmailAlwaysLoadRemoteContent: false,\n    enableRelatedChats: false,\n    galleryImageKeepAspectRatio: false,\n    useSystemUIFont: false,\n    contentProtectionEnabled: false,\n    isMentionsEnabled: true,\n    autostart: true,\n  }\n}\n", "import errorStackParser from 'error-stack-parser'\nimport StackFrame from 'stackframe'\nimport { RC_Config } from './shared-types.js'\n\nconst startTime = Date.now()\n\nexport const colorize = (light: number, code: number) => (str: string) =>\n  '\\x1B[' + light + ';' + code + 'm' + str + '\\x1b[0m'\nexport const blue = colorize(1, 34)\nexport const red = colorize(1, 31)\nexport const yellow = colorize(1, 33)\nexport const grey = colorize(0, 37)\nexport const green = colorize(1, 37)\nexport const cyan = colorize(1, 36)\n\nconst emojiFontCss =\n  'font-family: Roboto, \"Apple Color Emoji\", NotoEmoji, \"Helvetica Neue\", Arial, Helvetica, NotoMono, sans-serif !important;'\n\nexport const enum LogLevelString {\n  DEBUG = 'DEBUG',\n  WARNING = 'WARNING',\n  INFO = 'INFO',\n  ERROR = 'ERROR',\n  CRITICAL = 'CRITICAL',\n}\n\nconst LoggerVariants = [\n  {\n    log: console.debug,\n    level: LogLevelString.DEBUG,\n    emoji: '\uD83D\uDD78\uFE0F',\n    symbol: '[D]',\n  },\n  {\n    log: console.info,\n    level: LogLevelString.INFO,\n    emoji: '\u2139\uFE0F',\n    symbol: blue('[i]'),\n  },\n  {\n    log: console.warn,\n    level: LogLevelString.WARNING,\n    emoji: '\u26A0\uFE0F',\n    symbol: yellow('[w]'),\n  },\n  {\n    log: console.error,\n    level: LogLevelString.ERROR,\n    emoji: '\uD83D\uDEA8',\n    symbol: red('[E]'),\n  },\n  {\n    log: console.error,\n    level: LogLevelString.CRITICAL,\n    emoji: '\uD83D\uDEA8\uD83D\uDEA8',\n    symbol: red('[C]'),\n  },\n]\n\nexport function printProcessLogLevelInfo() {\n  /* ignore-console-log */\n  console.info(\n    `%cLogging Levels:\\n${LoggerVariants.map(v => `${v.emoji} ${v.level}`).join(\n      '\\n'\n    )}`,\n    emojiFontCss\n  )\n  /* ignore-console-log */\n  console.info(\n    `# Tips and Tricks for using the search filter in the browser console:\n\n\u2022 Use space to separate search terms\n\u2022 Exclude search terms using -\n\u2022 If the search term contains spaces you should escape it with \"\"\n\nExamples:\n\n\uD83D\uDD78\uFE0F          only show debug messages\n-\uD83D\uDD78\uFE0F         don't show debug messages\n\u2139\uFE0F          only show info messages\n-\u2139\uFE0F         don't show info messages\n\uD83D\uDC7B          only show events from background accounts (not selected accounts)\n-\uD83D\uDC7B         don't show events from background accounts (not selected accounts)\n\uD83D\uDCE1          only show events\n-\uD83D\uDCE1         don't show any events\n[JSONRPC]   only show jsonrpc messages\n-[JSONRPC]  don't show jsonrpc messages\n\nStart deltachat with --devmode (or --log-debug and --log-to-console) argument to show full log output.\nIf the log seems quiet, make sure the 'All levels' drop down has 'Verbose' checked.\n  `\n  )\n}\n\nexport type LogHandlerFunction = (\n  channel: string,\n  level: LogLevelString,\n  stacktrace: ReturnType<typeof getStackTrace>,\n  ...args: any[]\n) => void\n\nlet handler: LogHandlerFunction\nlet rc: RC_Config = {} as any\n\nexport function setLogHandler(\n  LogHandler: LogHandlerFunction,\n  rcObject: RC_Config\n) {\n  handler = LogHandler\n  rc = rcObject\n}\n\nfunction log(\n  { channel, isMainProcess }: Logger,\n  level: number,\n  stacktrace: ReturnType<typeof getStackTrace>,\n  args: any[]\n) {\n  const variant = LoggerVariants[level]\n  if (!handler) {\n    /* ignore-console-log */\n    console.log('Failed to log message - Handler not initialized yet')\n    /* ignore-console-log */\n    console.log(`Log Message: ${channel} ${level} ${args.join(' ')}`)\n    throw Error('Failed to log message - Handler not initialized yet')\n  }\n  handler(channel, variant.level, stacktrace, ...args)\n  if (rc['log-to-console']) {\n    if (isMainProcess) {\n      const beginning = `${Math.round((Date.now() - startTime) / 100) / 10}s ${\n        LoggerVariants[level].symbol\n      }${grey(channel)}:`\n      if (!stacktrace) {\n        variant.log(beginning, ...args)\n      } else {\n        variant.log(\n          beginning,\n          ...args,\n          red(\n            Array.isArray(stacktrace)\n              ? stacktrace.map(s => `\\n${s.toString()}`).join()\n              : stacktrace\n          )\n        )\n      }\n    } else {\n      const prefix = `%c${variant.emoji}%c${channel}`\n      const prefixStyle = [emojiFontCss, 'color:blueviolet;']\n\n      if (stacktrace) {\n        variant.log(prefix, ...prefixStyle, stacktrace, ...args)\n      } else {\n        variant.log(prefix, ...prefixStyle, ...args)\n      }\n    }\n  }\n}\n\nfunction getStackTrace(): StackFrame[] | string {\n  const rawStack: StackFrame[] = errorStackParser.parse(\n    new Error('Get Stacktrace')\n  )\n  const stack = rawStack.slice(2, rawStack.length)\n  return rc['machine-readable-stacktrace']\n    ? stack\n    : stack.map(s => `\\n${s.toString()}`).join()\n}\n\nexport class Logger {\n  //@ts-ignore\n  isMainProcess = typeof window === 'undefined'\n  constructor(public readonly channel: string) {\n    if (channel === 'core/event') {\n      // disable js stacktrace for core events\n      // as it is useless information (always pointing to the event emitter)\n      this.getStackTrace = () => ''\n    }\n  }\n\n  private getStackTrace(): StackFrame[] | string {\n    const rawStack: StackFrame[] = errorStackParser.parse(\n      new Error('Get Stacktrace')\n    )\n    const stack = rawStack.slice(2, rawStack.length)\n    return rc['machine-readable-stacktrace']\n      ? stack\n      : stack.map(s => `\\n${s.toString()}`).join()\n  }\n\n  debug(...args: any[]) {\n    if (!rc['log-debug']) return\n    log(this, 0, '', args)\n  }\n\n  info(...args: any[]) {\n    log(this, 1, '', args)\n  }\n\n  warn(...args: any[]) {\n    log(this, 2, this.getStackTrace(), args)\n  }\n\n  error(...args: any[]) {\n    log(this, 3, this.getStackTrace(), args)\n  }\n\n  /** use this when you know that the stacktrace is not relevant */\n  errorWithoutStackTrace(...args: any[]) {\n    log(this, 3, [], args)\n  }\n\n  critical(...args: any[]) {\n    log(this, 4, this.getStackTrace(), args)\n  }\n}\n\nexport function getLogger(channel: string) {\n  return new Logger(channel)\n}\n\n// Fix for error not being able to be converted into json\n// From https://stackoverflow.com/a/18391400\nif (!('toJSON' in Error.prototype))\n  Object.defineProperty(Error.prototype, 'toJSON', {\n    value: function () {\n      const alt = {}\n      Object.getOwnPropertyNames(this).forEach(function (key) {\n        //@ts-ignore\n        alt[key] = this[key]\n      }, this)\n      return alt\n    },\n    configurable: true,\n    writable: true,\n  })\n", "import { LocalStorage } from 'node-localstorage'\nimport { existsSync, mkdirSync } from 'node:fs'\nimport { fileURLToPath } from 'node:url'\nimport { dirname, join } from 'path'\nimport { config } from 'dotenv'\n\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n\nconfig({ path: join(__dirname, '../') + '.env' })\n\n// Directories & Files\nexport const DIST_DIR = join(__dirname)\nexport const DATA_DIR = join(__dirname, '../data')\nexport const LOGS_DIR = join(DATA_DIR, 'logs')\nexport const PRIVATE_CERTIFICATE_KEY = join(\n  DATA_DIR,\n  'certificate/cert.key.pem'\n)\nexport const PRIVATE_CERTIFICATE_CERT = join(DATA_DIR, 'certificate/cert.pem')\nexport let DC_ACCOUNTS_DIR = join(DATA_DIR, 'accounts')\n\nexport const LOCALES_DIR = join(__dirname, '../../../_locales')\n\n// ENV Vars\nexport const ENV_WEB_PASSWORD = process.env['WEB_PASSWORD']\nexport const ENV_WEB_PORT = process.env['WEB_PORT'] || 3000 // currently only port 3000 is supported\n// set this to one if you use this behind a proxy\nexport const ENV_WEB_TRUST_FIRST_PROXY = Boolean(\n  process.env['WEB_TRUST_FIRST_PROXY']\n)\n\nif (process.env['DC_ACCOUNTS_DIR']) {\n  DC_ACCOUNTS_DIR = join(__dirname, process.env['DC_ACCOUNTS_DIR'])\n}\n\nexport const NODE_ENV = (process.env['NODE_ENV'] ?? 'production').toLowerCase()\n\nif (!existsSync(DATA_DIR)) {\n  /* ignore-console-log */\n  console.log(\n    '\\n[ERROR]: Data dir does not exist, make sure you follow the steps in the Readme file\\n'\n  )\n  process.exit(1)\n}\n\nmkdirSync(LOGS_DIR, { recursive: true })\n\nif (\n  !existsSync(PRIVATE_CERTIFICATE_KEY) &&\n  !process.env['PRIVATE_CERTIFICATE_KEY']\n) {\n  /* ignore-console-log */\n  console.log(\n    `\\n[ERROR]: Certificate at \"${PRIVATE_CERTIFICATE_KEY}\" not exist, make sure you follow the steps in the Readme file\\n`\n  )\n  process.exit(1)\n}\n\nif (!ENV_WEB_PASSWORD && NODE_ENV !== 'test') {\n  /* ignore-console-log */\n  console.log(\n    `\\n[ERROR]: Environment Variable WEB_PASSWORD is not set. You need to set it.\\n`\n  )\n  process.exit(1)\n}\n\nexport const localStorage = new LocalStorage(\n  join(DATA_DIR, 'browser-runtime-data')\n)\n", "import type { BuildInfo as BuildInfoType } from '@deltachat-desktop/shared/shared-types'\n\n// `BUILD_INFO_JSON_STRING` is replaced by esbuild during bundling\n//@ts-ignore\nexport const BuildInfo: BuildInfoType = JSON.parse(BUILD_INFO_JSON_STRING)\n", "import { RC_Config } from '@deltachat-desktop/shared/shared-types'\n\nexport const RCConfig: RC_Config = {\n  'log-debug': true, // should become real\n  'log-to-console': true, // should become real\n  'machine-readable-stacktrace': false, // should become real\n  devmode: true, // should become real\n  theme: undefined, // maybe real\n  'theme-watch': false, // maybe real\n  'translation-watch': false, // maybe real\n  'allow-unsafe-core-replacement': false, //maybe real when we implement it\n\n  // those do not apply to browser\n  minimized: false,\n  version: false,\n  v: false,\n  help: false,\n  h: false,\n}\n", "import express, { json as BodyParserJson, Router } from 'express'\nimport { mkdtemp, writeFile, unlink, rm, mkdir, copyFile } from 'fs/promises'\nimport { basename, extname, join } from 'path'\nimport { tmpdir } from 'os'\nimport {\n  DesktopSettingsType,\n  RC_Config,\n  RuntimeInfo,\n} from '@deltachat-desktop/shared/shared-types'\nimport { getDefaultState } from '@deltachat-desktop/shared/state'\nimport { getLogger } from '@deltachat-desktop/shared/logger'\n\nimport { authMiddleWare } from './middlewares'\nimport { DATA_DIR, DIST_DIR, localStorage } from './config'\nimport { BuildInfo } from './get-build-info'\nimport { RCConfig } from './rc-config'\n\nconst log = getLogger('main/BackendApiRoute')\n\nexport const BackendApiRoute = Router()\n\nBackendApiRoute.use(authMiddleWare)\n\nBackendApiRoute.get('/rc_config', (_req, res) => {\n  res.status(200).json(RCConfig as RC_Config)\n})\n\nBackendApiRoute.get('/runtime_info', (_req, res) => {\n  const runtimeInfo: RuntimeInfo = {\n    buildInfo: BuildInfo,\n    isAppx: false,\n    isMac: false, // this has an alternative frameless design that we don't want in browser\n    target: 'browser',\n    versions: [],\n    isContentProtectionSupported: false,\n  }\n  res.status(200).json(runtimeInfo)\n})\n\nconst Config: DesktopSettingsType = {\n  ...getDefaultState(),\n  minimizeToTray: false, // does not exist in browser\n  ...JSON.parse(localStorage.getItem('config') || '{}'),\n}\n\nconst allowedKeys = Object.keys(getDefaultState())\n\nBackendApiRoute.get('/config', (_req, res) => {\n  res.json(Config)\n})\n\nBackendApiRoute.post('/config/:key', BodyParserJson(), (req, res) => {\n  const key = req.params.key\n  const value = req.body.new_value\n\n  if (allowedKeys.includes(key)) {\n    ;(Config as any)[key] = value\n    localStorage.setItem('config', JSON.stringify(Config))\n    res.status(201).send()\n  } else {\n    res.status(404).send({ message: `config key ${key} is not known` })\n  }\n})\n\nBackendApiRoute.post(\n  '/uploadTempFile/:filename',\n  express.raw({\n    type: () => {\n      return true /* Accept all filetypes */\n    },\n    limit: '500mb',\n  }),\n  async (req, res) => {\n    try {\n      const tmpFile: Buffer = req.body\n      const filename = basename(req.params.filename)\n\n      const tmppath = await mkdtemp(join(tmpdir(), 'tmp-'))\n\n      const filepath = join(tmppath, filename)\n      await writeFile(filepath, tmpFile, 'binary')\n\n      res.status(200).send({ path: filepath })\n    } catch (error) {\n      log.debug('uploadTempFile: error', {\n        error,\n        filename: req.params.filename,\n      })\n      res.status(500).json({ message: 'Failed to create Tempfile' })\n    }\n  }\n)\n\nBackendApiRoute.post(\n  '/uploadTempFileB64/:filename',\n  express.raw({\n    type: () => {\n      return true /* Accept all filetypes */\n    },\n    limit: '500mb',\n  }),\n  async (req, res) => {\n    try {\n      const tmpFilebin: Buffer = Buffer.from(req.body.toString(), 'base64')\n\n      const filename = basename(req.params.filename)\n      const tmppath = await mkdtemp(join(tmpdir(), 'tmp-'))\n\n      const filepath = join(tmppath, filename)\n      await writeFile(filepath, tmpFilebin, 'binary')\n\n      res.status(200).send({ path: filepath })\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to create Tempfile' })\n    }\n  }\n)\n\nBackendApiRoute.post(\n  '/removeTempFile',\n  express.raw({\n    type: () => {\n      return true /* Accept all filetypes */\n    },\n  }),\n  async (req, res) => {\n    try {\n      const filepath = req.body.toString('utf8')\n      if (filepath.includes('tmp') && !filepath.includes('..')) {\n        await unlink(filepath)\n      }\n      res.status(200).json({ status: 'ok' })\n    } catch (e) {\n      // file doesn't exist, no permissions, etc..\n      // full list of possible errors is here\n      // http://man7.org/linux/man-pages/man2/unlink.2.html#ERRORS\n      log.error(e)\n      res.status(500).json({ status: 'error' })\n    }\n  }\n)\n\nBackendApiRoute.post(\n  '/saveBackgroundImage',\n  express.json(),\n  async (req, res) => {\n    const {\n      file,\n      isDefaultPicture,\n    }: { file: string; isDefaultPicture: boolean } = req.body\n    const originalFilePath = !isDefaultPicture\n      ? file\n      : join(DIST_DIR, 'images/backgrounds/', file)\n\n    const bgDir = join(DATA_DIR, 'background')\n    await rm(bgDir, { recursive: true, force: true })\n    await mkdir(bgDir, { recursive: true })\n    const fileName = `background_${Date.now()}` + extname(originalFilePath)\n    const newPath = join(DATA_DIR, 'background', fileName)\n    try {\n      await copyFile(originalFilePath, newPath)\n    } catch (error) {\n      log.error('BG-IMG Copy Failed', error)\n      throw error\n    }\n    res.json({ result: `img: ${fileName.replace(/\\\\/g, '/')}` })\n  }\n)\n", "import { ChildProcessWithoutNullStreams, spawn } from 'child_process'\nimport { DC_ACCOUNTS_DIR } from './config'\nimport { getRPCServerPath } from '@deltachat/stdio-rpc-server'\nimport { BaseDeltaChat, yerpc } from '@deltachat/jsonrpc-client'\nimport { WebSocket, WebSocketServer } from 'ws'\nimport { RCConfig } from './rc-config'\nimport { getLogger } from '@deltachat-desktop/shared/logger'\nimport { join } from 'path'\n\nconst log = getLogger('main/dc_wss')\nconst logCoreEvent = getLogger('core')\n\nclass StdioServer {\n  serverProcess: ChildProcessWithoutNullStreams | null\n  constructor(public on_data: (reponse: string) => void) {\n    this.serverProcess = null\n  }\n\n  async start() {\n    const serverPath = await getRPCServerPath()\n    log.info('using deltachat-rpc-server at', { serverPath })\n    this.serverProcess = spawn(serverPath, {\n      env: {\n        DC_ACCOUNTS_PATH: DC_ACCOUNTS_DIR,\n        RUST_LOG: process.env.RUST_LOG,\n      },\n    })\n\n    let buffer = ''\n    this.serverProcess.stdout.on('data', data => {\n      // console.log(`stdout: ${data}`)\n      buffer += data.toString()\n      while (buffer.includes('\\n')) {\n        const n = buffer.indexOf('\\n')\n        const message = buffer.substring(0, n)\n        this.on_data(message)\n        buffer = buffer.substring(n + 1)\n      }\n    })\n\n    // some kind of \"buffer\" that the text in the error dialog does not get too long\n    let errorLog = ''\n    const ERROR_LOG_LENGTH = 800\n    this.serverProcess.stderr.on('data', data => {\n      log.error(`stderr: ${data}`.trimEnd())\n      errorLog = (errorLog + data).slice(-ERROR_LOG_LENGTH)\n    })\n\n    this.serverProcess.on('close', (code, signal) => {\n      if (code !== null) {\n        log.debug(`child process close all stdio with code ${code}`)\n      } else {\n        log.debug(`child process close all stdio with signal ${signal}`)\n      }\n    })\n\n    this.serverProcess.on('exit', (code, signal) => {\n      if (code !== null) {\n        log.debug(`child process exited with code ${code}`)\n        if (code !== 0) {\n          // IDEA attempt restart it automatically with backoff-Algorithm?\n          log.critical('Fatal: The Delta Chat Core exited unexpectedly', code)\n          process.exit(1)\n        }\n      } else {\n        log.debug(`child process exited with signal ${signal}`)\n      }\n    })\n  }\n\n  send(message: string) {\n    this.serverProcess?.stdin.write(message + '\\n')\n  }\n}\n\nclass MainTransport extends yerpc.BaseTransport {\n  constructor(private sender: (message: yerpc.Message) => void) {\n    super()\n  }\n\n  onMessage(message: yerpc.Message): void {\n    this._onmessage(message)\n  }\n\n  _send(message: yerpc.Message): void {\n    this.sender(message)\n  }\n}\n\nexport class JRPCDeltaChat extends BaseDeltaChat<MainTransport> {}\n\nexport async function startDeltaChat(): Promise<\n  [dc: JRPCDeltaChat, wssDC: WebSocketServer, shutdownDC: () => void]\n> {\n  let active_connection: WebSocket | undefined\n\n  const DCInstance = new StdioServer(response => {\n    try {\n      if (response.indexOf('\"id\":\"main-') !== -1) {\n        const message = JSON.parse(response)\n        if (message.id.startsWith('main-')) {\n          message.id = Number(message.id.replace('main-', ''))\n          mainProcessTransport.onMessage(message)\n          return\n        }\n      }\n    } catch (error) {\n      log.error('jsonrpc-decode', error)\n    }\n    active_connection?.send(response)\n    if (response.indexOf('event') !== -1)\n      try {\n        const { result } = JSON.parse(response)\n        const { contextId, event } = result\n        if (\n          contextId !== undefined &&\n          typeof event === 'object' &&\n          event.kind\n        ) {\n          if (event.kind === 'WebxdcRealtimeData') {\n            return\n          }\n          if (event.kind === 'Warning') {\n            logCoreEvent.warn(contextId, event.msg)\n          } else if (event.kind === 'Info') {\n            logCoreEvent.info(contextId, event.msg)\n          } else if (event.kind.startsWith('Error')) {\n            logCoreEvent.error(contextId, event.msg)\n          } else if (RCConfig['log-debug']) {\n            // in debug mode log all core events\n            const event_clone = Object.assign({}, event) as Partial<\n              typeof event\n            >\n            delete event_clone.kind\n            logCoreEvent.debug(contextId, event.kind, event)\n          }\n        }\n      } catch (error) {\n        // ignore json parse errors\n        return\n      }\n  })\n\n  await DCInstance.start()\n\n  const mainProcessTransport = new MainTransport(message => {\n    message.id = `main-${message.id}`\n    DCInstance.send(JSON.stringify(message))\n  })\n\n  const mainProcessDC = new JRPCDeltaChat(mainProcessTransport, false)\n\n  const StolenConnectionPacket = JSON.stringify({\n    jsonrpc: '2.0',\n    method: 'error_other_client_stole_dc_connection',\n  })\n\n  const wssDC = new WebSocketServer({ noServer: true, perMessageDeflate: true })\n  wssDC.on('connection', function connection(ws) {\n    ws.on('error', console.error)\n\n    if (active_connection) {\n      active_connection?.send(StolenConnectionPacket)\n    }\n    active_connection = ws\n\n    ws.on('message', raw_data => {\n      if (active_connection === ws) {\n        const stringData = raw_data.toString('utf-8')\n        if (stringData.indexOf('export') !== -1) {\n          // modify backup export location\n          const request = JSON.parse(stringData)\n          if (\n            (request.method === 'export_backup' ||\n              request.method === 'export_self_keys') &&\n            request.params[1] === '<BROWSER>'\n          ) {\n            request.params[1] = join(DC_ACCOUNTS_DIR, 'backups')\n            return DCInstance.send(JSON.stringify(request))\n          }\n        }\n        DCInstance.send(stringData)\n      } else {\n        log.debug(\n          'ignored dc jsonrpc request because client is not the active one anymore'\n        )\n        ws.send(StolenConnectionPacket)\n      }\n    })\n    // custom dc connection like on electron\n\n    log.debug('connected dc socket')\n  })\n\n  return [\n    mainProcessDC,\n    wssDC,\n    () => {\n      DCInstance.serverProcess?.kill(2)\n    },\n  ]\n}\n", "import express, { Router } from 'express'\nimport { DIST_DIR } from './config'\nimport { join } from 'path'\nimport resolvePath from 'resolve-path'\nimport { stat } from 'fs/promises'\n\nexport const helpRoute = Router()\n\nconst helpDir = join(DIST_DIR, '/help')\n\nhelpRoute.get('/help', express.static(helpDir))\n\nhelpRoute.get('/help_exists/:lang', async (req, res) => {\n  const filePath = resolvePath(helpDir, `${req.params.lang}/help.html`)\n\n  try {\n    // test if file exists\n    await stat(filePath)\n    return res.status(200).json({ msg: 'File Found' })\n  } catch (error) {\n    return res.status(404).json({ msg: '404 Not Found' })\n  }\n})\n", "import { createWriteStream } from 'fs'\nimport { join } from 'path'\nimport { LOGS_DIR } from './config'\nimport { stdout, stderr } from 'process'\n\nstdout.on('error', () => {})\nstderr.on('error', () => {})\n// ^ Without this, the app will run into infinite exceptions\n// when it can't write to stdout or stderr\n\nfunction logName() {\n  const d = new Date()\n  function pad(number: number) {\n    return number < 10 ? '0' + number : number\n  }\n  const fileName = [\n    `${d.getFullYear()}-`,\n    `${pad(d.getMonth() + 1)}-`,\n    `${pad(d.getDate())}-`,\n    `${pad(d.getHours())}-`,\n    `${pad(d.getMinutes())}-`,\n    `${pad(d.getSeconds())}`,\n    '.log',\n  ].join('')\n  return join(LOGS_DIR, fileName)\n}\n\nexport function createLogHandler() {\n  const fileName = logName()\n  const stream = createWriteStream(fileName, { flags: 'w' })\n  /* ignore-console-log */\n  console.log(`Logfile: ${fileName}`)\n  return {\n    /**\n     * Internal log handler. Do not call directly!\n     * @param channel The part/module where the message was logged from, e.g. 'main/deltachat'\n     * @param level DEBUG, INFO, WARNING, ERROR or CRITICAL\n     * @param stacktrace Stack trace if WARNING, ERROR or CRITICAL\n     * @param ...args Variadic parameters. Stringified before logged to file\n     */\n    log: ((\n      channel: string,\n      level: string,\n      stacktrace: any[],\n      ...args: any[]\n    ) => {\n      const timestamp = new Date().toISOString()\n      let line = [timestamp, fillString(channel, 22), level]\n      line = line.concat(\n        [stacktrace, ...args].map(value => JSON.stringify(value))\n      )\n      if (stream.writable) {\n        stream.write(`${line.join('\\t')}\\n`)\n      } else {\n        /* ignore-console-log */\n        console.warn('tried to log something after logger shut down', {\n          channel,\n          level,\n          args,\n          stacktrace,\n        })\n      }\n    }) as LogHandlerFunction,\n    end: () => stream.end(),\n    logFilePath: () => fileName,\n  }\n}\nexport type LogHandler = ReturnType<typeof createLogHandler>\n\nimport { readdir, lstat, unlink } from 'fs/promises'\nimport { getLogger, LogHandlerFunction } from '../../shared/logger.js'\n\nexport async function cleanupLogFolder() {\n  const log = getLogger('logger/log-cleanup')\n  const logDir = LOGS_DIR\n\n  const logDirContent = await readdir(logDir)\n  const filesWithDates = await Promise.all(\n    logDirContent.map(async logFileName => ({\n      filename: logFileName,\n      mtime: (await lstat(join(logDir, logFileName))).mtime.getTime(),\n    }))\n  )\n\n  const sortedFiles = filesWithDates.sort((a, b) => a.mtime - b.mtime)\n\n  if (sortedFiles.length > 10) {\n    // remove latest 10 logs from list\n    sortedFiles.splice(sortedFiles.length - 11)\n\n    const fileCount = await Promise.all(\n      sortedFiles.map(({ filename }) => unlink(join(logDir, filename)))\n    )\n\n    log.info(`Successfuly deleted ${fileCount.length} old logfiles`)\n  } else {\n    log.debug('Nothing to do (not more than 10 logfiles to delete)')\n  }\n}\n\nfunction fillString(string: string, n: number) {\n  if (string.length < n) {\n    return string + ' '.repeat(n - string.length)\n  }\n  return string\n}\n", "export function parseThemeMetaData(rawTheme: string): {\n  name: string\n  description: string\n} {\n  const meta_data_block =\n    /.theme-meta ?{([^]*)}/gm.exec(rawTheme)?.[1].trim() || ''\n\n  const regex = /--(\\w*): ?['\"]([^]*?)['\"];?/gi\n\n  const meta: { [key: string]: string } = {}\n\n  let last_result: any = true\n\n  while (last_result) {\n    last_result = regex.exec(meta_data_block)\n    if (last_result) {\n      meta[last_result[1]] = last_result[2]\n    }\n  }\n\n  // check if name and description are defined\n  if (!meta.name || !meta.description) {\n    throw new Error(\n      'The meta variables meta.name and meta.description must be defined'\n    )\n  }\n\n  return <any>meta\n}\n\nexport const HIDDEN_THEME_PREFIX = 'dev_'\n", "import { basename, join } from 'path'\nimport { DIST_DIR } from './config'\nimport { readdir, readFile } from 'fs/promises'\n\nimport { Theme } from '@deltachat-desktop/shared/shared-types'\nimport { getLogger } from '@deltachat-desktop/shared/logger'\nimport {\n  HIDDEN_THEME_PREFIX,\n  parseThemeMetaData,\n} from '@deltachat-desktop/shared/themes'\n\nconst log = getLogger('main/themes')\n\nconst dc_theme_dir = join(DIST_DIR, 'themes')\n\nexport async function readThemeDir(\n  path: string = dc_theme_dir,\n  prefix: string = 'dc'\n): Promise<Theme[]> {\n  const files = await readdir(path)\n  return Promise.all(\n    files\n      .filter(f => f.endsWith('.css') && f.charAt(0) !== '_')\n      .map(async f => {\n        const address = prefix + ':' + basename(f, '.css')\n        const file_content = await readFile(join(path, f), 'utf-8')\n        try {\n          const theme_meta = parseThemeMetaData(file_content)\n          return {\n            name: theme_meta.name,\n            description: theme_meta.description,\n            address,\n            is_prototype: f.startsWith(HIDDEN_THEME_PREFIX),\n          }\n        } catch (error) {\n          log.error('Error while parsing theme ${address}: ', error)\n          return {\n            name: address + ' [Invalid Meta]',\n            description: '[missing description]',\n            address: prefix + ':' + basename(f, '.css'),\n            is_prototype: f.startsWith(HIDDEN_THEME_PREFIX),\n          }\n        }\n      })\n  )\n}\n", "import { basename, dirname, join } from 'path'\nimport express from 'express'\nimport https from 'https'\nimport { readFile, stat, unlink } from 'fs/promises'\nimport session from 'express-session'\nimport { FileStore } from './session-store'\nimport { authMiddleWare, CORSMiddleWare } from './middlewares'\nimport resolvePath from 'resolve-path'\nimport { WebSocketServer } from 'ws'\nimport { BackendApiRoute } from './backendApi'\nimport { MessageToBackend } from './runtime-ws-protocol'\n\n// This import has side effects, it will quit the app if env vars or files are missing\nimport {\n  ENV_WEB_TRUST_FIRST_PROXY,\n  DIST_DIR,\n  ENV_WEB_PASSWORD,\n  NODE_ENV,\n  ENV_WEB_PORT,\n  PRIVATE_CERTIFICATE_CERT,\n  PRIVATE_CERTIFICATE_KEY,\n  localStorage,\n  LOCALES_DIR,\n  DATA_DIR,\n  DC_ACCOUNTS_DIR,\n} from './config'\nimport { startDeltaChat } from './deltachat-rpc'\nimport { helpRoute } from './help'\nimport { cleanupLogFolder, createLogHandler } from './log-handler'\nimport { getLogger, setLogHandler } from '@deltachat-desktop/shared/logger'\nimport { RCConfig } from './rc-config'\nimport { readThemeDir } from './themes'\n\nconst logHandler = createLogHandler()\nsetLogHandler(logHandler.log, RCConfig)\ncleanupLogFolder()\nconst log = getLogger('main')\n\nconst app = express()\n\nif (ENV_WEB_TRUST_FIRST_PROXY) {\n  app.set('trust proxy', 1)\n}\n\nconst getCookieSecret = () => {\n  const savedSecret = localStorage.getItem('cookieSecret')\n  if (savedSecret) {\n    return savedSecret\n  } else {\n    const newSecret = crypto.randomUUID()\n    localStorage.setItem('cookieSecret', newSecret)\n    return newSecret\n  }\n}\n\nconst sessionParser = session({\n  store: new FileStore(localStorage),\n  secret: getCookieSecret(),\n  resave: false,\n  saveUninitialized: true,\n  cookie: {\n    sameSite: 'strict',\n    priority: 'high',\n    secure: true, // This makes it only work in https\n    httpOnly: true,\n  },\n})\n\napp.use(sessionParser)\n\napp.use(CORSMiddleWare)\n\napp.get('/', (req, res) => {\n  let startPage = 'main.html'\n  if (NODE_ENV === 'test') {\n    req.session.isAuthenticated = true\n    startPage = 'test.html'\n  }\n  if (req.session.isAuthenticated) {\n    res.sendFile(join(DIST_DIR, startPage))\n  } else {\n    res.status(401)\n    return res.sendFile(join(DIST_DIR, 'login.html')) // TODO some nice site\n  }\n})\n\napp.use(express.static(DIST_DIR))\napp.use('/locales', express.static(LOCALES_DIR))\n\napp.get('/favicon.ico', (_req, res) =>\n  res.sendFile(join(DIST_DIR, 'images/deltachat.ico'))\n)\n\napp.post(\n  '/authenticate',\n  express.urlencoded({ extended: true }),\n  (req, res) => {\n    if (req.body?.password === ENV_WEB_PASSWORD) {\n      // check password\n      req.session.isAuthenticated = true\n      // redirect to root (/)\n      res.redirect('/')\n    } else {\n      res.status(401)\n      return res.send(`<html>\n    <head></head>\n    <body>\n        Password wrong, <a href=\"/\">go back to login</a>\n    </body>\n    </html>`)\n    }\n  }\n)\n\napp.get('/logout', (req, res) => {\n  req.session.destroy(() => {})\n  res.redirect('/')\n})\n\nconst [dc, wssDC, shutdownDC] = await startDeltaChat()\nlog.info(await dc.rpc.getSystemInfo())\n\napp.get('/blobs/:accountId/:filename', authMiddleWare, async (req, res) => {\n  const { filename } = req.params\n  let { accountId } = req.params\n\n  if (isNaN(Number(accountId))) {\n    // workaround until core gives out relative urls\n    for (const id of await dc.rpc.getAllAccountIds()) {\n      const blobdir = (await dc.rpc.getBlobDir(id)) || ''\n      if (basename(dirname(blobdir)) === accountId) {\n        accountId = String(id)\n        break\n      }\n    }\n\n    if (isNaN(Number(accountId))) {\n      return res.status(400).send('Bad Request: account id is not a number')\n    }\n  }\n\n  const blobDir = await dc.rpc.getBlobDir(Number(accountId))\n  if (!blobDir) {\n    throw new Error('no blobdir')\n  }\n  const filePath = resolvePath(blobDir, filename)\n\n  try {\n    // test if file exists\n    await stat(filePath)\n  } catch (error) {\n    return res.status(404).send('404 Not Found')\n  }\n\n  if (req.query.download_with_filename) {\n    res.setHeader(\n      'Content-Disposition',\n      `attachment; filename=\"${req.query.download_with_filename}\"`\n    )\n  }\n  res.sendFile(filePath)\n})\n\napp.get('/download-backup/:filename', authMiddleWare, async (req, res) => {\n  const filePath = resolvePath(\n    join(DC_ACCOUNTS_DIR, 'backups'),\n    req.params.filename\n  )\n  res.download(filePath)\n  res.on('finish', () => {\n    setTimeout(() => {\n      unlink(filePath).then(() => {\n        log.info('deleted backup file 10s after download')\n      })\n    }, 10000)\n  })\n})\n\n// TODO\napp.get('/stickers/:account/:?pack/:filename', authMiddleWare, (req, res) => {\n  //TODO (also not sure how to make the pack optional)\n  res.send('req.params' + JSON.stringify(req.params))\n})\n\napp.use('/background', express.static(join(DATA_DIR, 'background')))\n\napp.use('/backend-api', BackendApiRoute)\napp.use(helpRoute)\n\napp.get('/themes.json', async (req, res) => {\n  res.json(await readThemeDir())\n})\n\nlet certificate = ''\nif (process.env.PRIVATE_CERTIFICATE_CERT) {\n  certificate = process.env.PRIVATE_CERTIFICATE_CERT\n} else {\n  certificate = await readFile(PRIVATE_CERTIFICATE_CERT, 'utf8')\n}\n\nlet certificateKey = ''\nif (process.env.PRIVATE_CERTIFICATE_KEY) {\n  certificateKey = process.env.PRIVATE_CERTIFICATE_KEY\n} else {\n  certificateKey = await readFile(PRIVATE_CERTIFICATE_KEY, 'utf8')\n}\n\nconst sslserver = https.createServer(\n  {\n    key: certificateKey,\n    cert: certificate,\n  },\n  app\n)\n\nconst wssBackend = new WebSocketServer({\n  noServer: true,\n  perMessageDeflate: true,\n})\nwssBackend.on('connection', function connection(ws) {\n  ws.on('error', log.error)\n\n  ws.on('message', raw_data => {\n    try {\n      // Try to decode the binary data as a UTF-8 string\n      const utf8String = raw_data.toString('utf8')\n      const msg: MessageToBackend.AllTypes = JSON.parse(utf8String)\n      if (msg.type == 'log') {\n        const [channel, level, stackTrace, ...data] = msg.data\n        // /* ignore-console-log */\n        // console.debug(\"frontend\", channel, level, data[0], '[..]')\n        logHandler.log(channel, level as any, stackTrace, ...data)\n      } else {\n        log.debug('[recv on backend ws]', msg)\n      }\n    } catch (e) {\n      log.error('failed to read message as json string', e)\n    }\n  })\n\n  log.debug('connected backend socket')\n})\n\nsslserver.on('upgrade', (request, socket, head) => {\n  socket.on('error', console.error)\n\n  sessionParser(request as any, {} as any, () => {\n    if (!(request as express.Request).session.isAuthenticated) {\n      log.debug('unauthorized websocket session')\n      socket.write('HTTP/1.1 401 Unauthorized\\r\\n\\r\\n')\n      socket.destroy()\n      return\n    }\n    const { pathname } = new URL(request.url || '', 'wss://base.url')\n    if (pathname === '/ws/dc') {\n      wssDC.handleUpgrade(request, socket, head, function (ws) {\n        wssDC.emit('connection', ws, request)\n      })\n    } else if (pathname === '/ws/backend') {\n      wssBackend.handleUpgrade(request, socket, head, function (ws) {\n        wssBackend.emit('connection', ws, request)\n      })\n    }\n  })\n})\n\nsslserver.listen(ENV_WEB_PORT, () => {\n  log.info(`HTTPS app listening on port ${ENV_WEB_PORT}`)\n})\n\nprocess.on('exit', () => {\n  sslserver.closeAllConnections()\n  sslserver.close()\n  shutdownDC()\n  logHandler.end\n})\n"],
  "mappings": "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",
  "names": ["session", "LogLevelString", "LocalStorage", "express", "join", "log", "join", "log", "wssDC", "connection", "express", "Router", "join", "join", "unlink", "log", "basename", "join", "readdir", "log", "basename", "dirname", "join", "express", "readFile", "stat", "unlink", "resolvePath", "WebSocketServer", "log"]
}
