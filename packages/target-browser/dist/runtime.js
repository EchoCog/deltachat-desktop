var k=Object.create;var l=Object.defineProperty;var F=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var W=Object.getPrototypeOf,V=Object.prototype.hasOwnProperty;var i=(e,t)=>l(e,"name",{value:t,configurable:!0});var w=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),K=(e,t)=>{for(var r in t)l(e,r,{get:t[r],enumerable:!0})},j=(e,t,r,_)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of x(t))!V.call(e,s)&&s!==r&&l(e,s,{get:()=>t[s],enumerable:!(_=F(t,s))||_.enumerable});return e};var U=(e,t,r)=>(r=e!=null?k(W(e)):{},j(t||!e||!e.__esModule?l(r,"default",{value:e,enumerable:!0}):r,e));var H=w((_t,B)=>{var u=null;typeof WebSocket<"u"?u=WebSocket:typeof MozWebSocket<"u"?u=MozWebSocket:typeof global<"u"?u=global.WebSocket||global.MozWebSocket:typeof window<"u"?u=window.WebSocket||window.MozWebSocket:typeof self<"u"&&(u=self.WebSocket||self.MozWebSocket);B.exports=u});var G=w((Tt,O)=>{function I(){}i(I,"E");I.prototype={on:i(function(e,t,r){var _=this.e||(this.e={});return(_[e]||(_[e]=[])).push({fn:t,ctx:r}),this},"on"),once:i(function(e,t,r){var _=this;function s(){_.off(e,s),t.apply(r,arguments)}return i(s,"listener"),s._=t,this.on(e,s,r)},"once"),emit:i(function(e){var t=[].slice.call(arguments,1),r=((this.e||(this.e={}))[e]||[]).slice(),_=0,s=r.length;for(_;_<s;_++)try{r[_].fn.apply(r[_].ctx,t)}catch(n){console.error("event listener for event '"+String(e)+"' threw an error:",n,r[_].fn)}return this},"emit"),off:i(function(e,t){var r=this.e||(this.e={}),_=r[e],s=[];if(_&&t)for(var n=0,o=_.length;n<o;n++)_[n].fn!==t&&_[n].fn._!==t&&s.push(_[n]);return s.length?r[e]=s:delete r[e],this},"off")};O.exports=I;O.exports.TinyEmitter=I});var h=class{static{i(this,"RawClient")}constructor(t){this._transport=t}sleep(t){return this._transport.request("sleep",[t])}checkEmailValidity(t){return this._transport.request("check_email_validity",[t])}getSystemInfo(){return this._transport.request("get_system_info",[])}getNextEvent(){return this._transport.request("get_next_event",[])}addAccount(){return this._transport.request("add_account",[])}migrateAccount(t){return this._transport.request("migrate_account",[t])}removeAccount(t){return this._transport.request("remove_account",[t])}getAllAccountIds(){return this._transport.request("get_all_account_ids",[])}selectAccount(t){return this._transport.request("select_account",[t])}getSelectedAccountId(){return this._transport.request("get_selected_account_id",[])}getAllAccounts(){return this._transport.request("get_all_accounts",[])}startIoForAllAccounts(){return this._transport.request("start_io_for_all_accounts",[])}stopIoForAllAccounts(){return this._transport.request("stop_io_for_all_accounts",[])}accountsBackgroundFetch(t){return this._transport.request("accounts_background_fetch",[t])}startIo(t){return this._transport.request("start_io",[t])}stopIo(t){return this._transport.request("stop_io",[t])}getAccountInfo(t){return this._transport.request("get_account_info",[t])}getAccountFileSize(t){return this._transport.request("get_account_file_size",[t])}getProviderInfo(t,r){return this._transport.request("get_provider_info",[t,r])}isConfigured(t){return this._transport.request("is_configured",[t])}getInfo(t){return this._transport.request("get_info",[t])}getBlobDir(t){return this._transport.request("get_blob_dir",[t])}copyToBlobDir(t,r){return this._transport.request("copy_to_blob_dir",[t,r])}draftSelfReport(t){return this._transport.request("draft_self_report",[t])}setConfig(t,r,_){return this._transport.request("set_config",[t,r,_])}batchSetConfig(t,r){return this._transport.request("batch_set_config",[t,r])}setConfigFromQr(t,r){return this._transport.request("set_config_from_qr",[t,r])}checkQr(t,r){return this._transport.request("check_qr",[t,r])}getConfig(t,r){return this._transport.request("get_config",[t,r])}batchGetConfig(t,r){return this._transport.request("batch_get_config",[t,r])}setStockStrings(t){return this._transport.request("set_stock_strings",[t])}configure(t){return this._transport.request("configure",[t])}addOrUpdateTransport(t,r){return this._transport.request("add_or_update_transport",[t,r])}addTransport(t,r){return this._transport.request("add_transport",[t,r])}addTransportFromQr(t,r){return this._transport.request("add_transport_from_qr",[t,r])}listTransports(t){return this._transport.request("list_transports",[t])}deleteTransport(t,r){return this._transport.request("delete_transport",[t,r])}stopOngoingProcess(t){return this._transport.request("stop_ongoing_process",[t])}exportSelfKeys(t,r,_){return this._transport.request("export_self_keys",[t,r,_])}importSelfKeys(t,r,_){return this._transport.request("import_self_keys",[t,r,_])}getFreshMsgs(t){return this._transport.request("get_fresh_msgs",[t])}getFreshMsgCnt(t,r){return this._transport.request("get_fresh_msg_cnt",[t,r])}getNextMsgs(t){return this._transport.request("get_next_msgs",[t])}waitNextMsgs(t){return this._transport.request("wait_next_msgs",[t])}estimateAutoDeletionCount(t,r,_){return this._transport.request("estimate_auto_deletion_count",[t,r,_])}initiateAutocryptKeyTransfer(t){return this._transport.request("initiate_autocrypt_key_transfer",[t])}continueAutocryptKeyTransfer(t,r,_){return this._transport.request("continue_autocrypt_key_transfer",[t,r,_])}getChatlistEntries(t,r,_,s){return this._transport.request("get_chatlist_entries",[t,r,_,s])}getSimilarChatIds(t,r){return this._transport.request("get_similar_chat_ids",[t,r])}getChatlistItemsByEntries(t,r){return this._transport.request("get_chatlist_items_by_entries",[t,r])}getFullChatById(t,r){return this._transport.request("get_full_chat_by_id",[t,r])}getBasicChatInfo(t,r){return this._transport.request("get_basic_chat_info",[t,r])}acceptChat(t,r){return this._transport.request("accept_chat",[t,r])}blockChat(t,r){return this._transport.request("block_chat",[t,r])}deleteChat(t,r){return this._transport.request("delete_chat",[t,r])}getChatEncryptionInfo(t,r){return this._transport.request("get_chat_encryption_info",[t,r])}getChatSecurejoinQrCode(t,r){return this._transport.request("get_chat_securejoin_qr_code",[t,r])}getChatSecurejoinQrCodeSvg(t,r){return this._transport.request("get_chat_securejoin_qr_code_svg",[t,r])}secureJoin(t,r){return this._transport.request("secure_join",[t,r])}leaveGroup(t,r){return this._transport.request("leave_group",[t,r])}removeContactFromChat(t,r,_){return this._transport.request("remove_contact_from_chat",[t,r,_])}addContactToChat(t,r,_){return this._transport.request("add_contact_to_chat",[t,r,_])}getChatContacts(t,r){return this._transport.request("get_chat_contacts",[t,r])}getPastChatContacts(t,r){return this._transport.request("get_past_chat_contacts",[t,r])}createGroupChat(t,r,_){return this._transport.request("create_group_chat",[t,r,_])}createBroadcastList(t){return this._transport.request("create_broadcast_list",[t])}setChatName(t,r,_){return this._transport.request("set_chat_name",[t,r,_])}setChatProfileImage(t,r,_){return this._transport.request("set_chat_profile_image",[t,r,_])}setChatVisibility(t,r,_){return this._transport.request("set_chat_visibility",[t,r,_])}setChatEphemeralTimer(t,r,_){return this._transport.request("set_chat_ephemeral_timer",[t,r,_])}getChatEphemeralTimer(t,r){return this._transport.request("get_chat_ephemeral_timer",[t,r])}addDeviceMessage(t,r,_){return this._transport.request("add_device_message",[t,r,_])}marknoticedChat(t,r){return this._transport.request("marknoticed_chat",[t,r])}getFirstUnreadMessageOfChat(t,r){return this._transport.request("get_first_unread_message_of_chat",[t,r])}setChatMuteDuration(t,r,_){return this._transport.request("set_chat_mute_duration",[t,r,_])}isChatMuted(t,r){return this._transport.request("is_chat_muted",[t,r])}markseenMsgs(t,r){return this._transport.request("markseen_msgs",[t,r])}getMessageIds(t,r,_,s){return this._transport.request("get_message_ids",[t,r,_,s])}getMessageListItems(t,r,_,s){return this._transport.request("get_message_list_items",[t,r,_,s])}getMessage(t,r){return this._transport.request("get_message",[t,r])}getMessageHtml(t,r){return this._transport.request("get_message_html",[t,r])}getMessages(t,r){return this._transport.request("get_messages",[t,r])}getMessageNotificationInfo(t,r){return this._transport.request("get_message_notification_info",[t,r])}deleteMessages(t,r){return this._transport.request("delete_messages",[t,r])}deleteMessagesForAll(t,r){return this._transport.request("delete_messages_for_all",[t,r])}getMessageInfo(t,r){return this._transport.request("get_message_info",[t,r])}getMessageInfoObject(t,r){return this._transport.request("get_message_info_object",[t,r])}getMessageReadReceipts(t,r){return this._transport.request("get_message_read_receipts",[t,r])}downloadFullMessage(t,r){return this._transport.request("download_full_message",[t,r])}searchMessages(t,r,_){return this._transport.request("search_messages",[t,r,_])}messageIdsToSearchResults(t,r){return this._transport.request("message_ids_to_search_results",[t,r])}saveMsgs(t,r){return this._transport.request("save_msgs",[t,r])}getContact(t,r){return this._transport.request("get_contact",[t,r])}createContact(t,r,_){return this._transport.request("create_contact",[t,r,_])}createChatByContactId(t,r){return this._transport.request("create_chat_by_contact_id",[t,r])}blockContact(t,r){return this._transport.request("block_contact",[t,r])}unblockContact(t,r){return this._transport.request("unblock_contact",[t,r])}getBlockedContacts(t){return this._transport.request("get_blocked_contacts",[t])}getContactIds(t,r,_){return this._transport.request("get_contact_ids",[t,r,_])}getContacts(t,r,_){return this._transport.request("get_contacts",[t,r,_])}getContactsByIds(t,r){return this._transport.request("get_contacts_by_ids",[t,r])}deleteContact(t,r){return this._transport.request("delete_contact",[t,r])}resetContactEncryption(t,r){return this._transport.request("reset_contact_encryption",[t,r])}changeContactName(t,r,_){return this._transport.request("change_contact_name",[t,r,_])}getContactEncryptionInfo(t,r){return this._transport.request("get_contact_encryption_info",[t,r])}lookupContactIdByAddr(t,r){return this._transport.request("lookup_contact_id_by_addr",[t,r])}parseVcard(t){return this._transport.request("parse_vcard",[t])}importVcard(t,r){return this._transport.request("import_vcard",[t,r])}importVcardContents(t,r){return this._transport.request("import_vcard_contents",[t,r])}makeVcard(t,r){return this._transport.request("make_vcard",[t,r])}setDraftVcard(t,r,_){return this._transport.request("set_draft_vcard",[t,r,_])}getChatIdByContactId(t,r){return this._transport.request("get_chat_id_by_contact_id",[t,r])}getChatMedia(t,r,_,s,n){return this._transport.request("get_chat_media",[t,r,_,s,n])}exportBackup(t,r,_){return this._transport.request("export_backup",[t,r,_])}importBackup(t,r,_){return this._transport.request("import_backup",[t,r,_])}provideBackup(t){return this._transport.request("provide_backup",[t])}getBackupQr(t){return this._transport.request("get_backup_qr",[t])}getBackupQrSvg(t){return this._transport.request("get_backup_qr_svg",[t])}getBackup(t,r){return this._transport.request("get_backup",[t,r])}maybeNetwork(){return this._transport.request("maybe_network",[])}getConnectivity(t){return this._transport.request("get_connectivity",[t])}getConnectivityHtml(t){return this._transport.request("get_connectivity_html",[t])}getLocations(t,r,_,s,n){return this._transport.request("get_locations",[t,r,_,s,n])}sendWebxdcStatusUpdate(t,r,_,s){return this._transport.request("send_webxdc_status_update",[t,r,_,s])}sendWebxdcRealtimeData(t,r,_){return this._transport.request("send_webxdc_realtime_data",[t,r,_])}sendWebxdcRealtimeAdvertisement(t,r){return this._transport.request("send_webxdc_realtime_advertisement",[t,r])}leaveWebxdcRealtime(t,r){return this._transport.request("leave_webxdc_realtime",[t,r])}getWebxdcStatusUpdates(t,r,_){return this._transport.request("get_webxdc_status_updates",[t,r,_])}getWebxdcInfo(t,r){return this._transport.request("get_webxdc_info",[t,r])}getWebxdcHref(t,r){return this._transport.request("get_webxdc_href",[t,r])}getWebxdcBlob(t,r,_){return this._transport.request("get_webxdc_blob",[t,r,_])}setWebxdcIntegration(t,r){return this._transport.request("set_webxdc_integration",[t,r])}initWebxdcIntegration(t,r){return this._transport.request("init_webxdc_integration",[t,r])}getHttpResponse(t,r){return this._transport.request("get_http_response",[t,r])}forwardMessages(t,r,_){return this._transport.request("forward_messages",[t,r,_])}resendMessages(t,r){return this._transport.request("resend_messages",[t,r])}sendSticker(t,r,_){return this._transport.request("send_sticker",[t,r,_])}sendReaction(t,r,_){return this._transport.request("send_reaction",[t,r,_])}getMessageReactions(t,r){return this._transport.request("get_message_reactions",[t,r])}sendMsg(t,r,_){return this._transport.request("send_msg",[t,r,_])}sendEditRequest(t,r,_){return this._transport.request("send_edit_request",[t,r,_])}canSend(t,r){return this._transport.request("can_send",[t,r])}saveMsgFile(t,r,_){return this._transport.request("save_msg_file",[t,r,_])}removeDraft(t,r){return this._transport.request("remove_draft",[t,r])}getDraft(t,r){return this._transport.request("get_draft",[t,r])}sendVideochatInvitation(t,r){return this._transport.request("send_videochat_invitation",[t,r])}miscGetStickerFolder(t){return this._transport.request("misc_get_sticker_folder",[t])}miscSaveSticker(t,r,_){return this._transport.request("misc_save_sticker",[t,r,_])}miscGetStickers(t){return this._transport.request("misc_get_stickers",[t])}miscSendTextMessage(t,r,_){return this._transport.request("misc_send_text_message",[t,r,_])}miscSendMsg(t,r,_,s,n,o,a){return this._transport.request("misc_send_msg",[t,r,_,s,n,o,a])}miscSetDraft(t,r,_,s,n,o,a){return this._transport.request("misc_set_draft",[t,r,_,s,n,o,a])}miscSendDraft(t,r){return this._transport.request("misc_send_draft",[t,r])}};var p={};K(p,{BaseTransport:()=>R,WebsocketTransport:()=>g});var D=class{static{i(this,"Emitter")}constructor(){this.e=new Map}on(t,r,_){return this._on(t,r,_)}_on(t,r,_){let s={callback:r,ctx:_};return this.e.has(t)||this.e.set(t,[]),this.e.get(t).push(s),this}once(t,r,_){let s=i((...n)=>{this.off(t,r),r.apply(_,n)},"listener");this._on(t,s,_)}emit(t,...r){if(this.e.has(t))return this.e.get(t).forEach(_=>{_.callback.apply(_.ctx,r)}),this}off(t,r){if(!this.e.has(t))return;let s=this.e.get(t).filter(n=>n.callback!==r);return s.length?this.e.set(t,s):this.e.delete(t),this}};var R=class extends D{static{i(this,"BaseTransport")}constructor(){super(...arguments),this._requests=new Map,this._requestId=0}_send(t){throw new Error("_send method not implemented")}close(){}_onmessage(t){if(t.method){let s=t;this.emit("request",s)}if(!t.id)return;let r=t;if(!r.id)return;let _=this._requests.get(r.id);_&&(this._requests.delete(r.id),r.error?_.reject(r.error):_.resolve(r.result))}notification(t,r){let _={jsonrpc:"2.0",method:t,id:0,params:r};this._send(_)}request(t,r){let _=++this._requestId,s={jsonrpc:"2.0",method:t,id:_,params:r};return this._send(s),new Promise((n,o)=>{this._requests.set(_,{resolve:n,reject:o})})}};var Y=U(H(),1);var g=class extends R{static{i(this,"WebsocketTransport")}get reconnectAttempts(){return this._socket.reconnectAttempts}get connected(){return this._socket.connected}constructor(t,r){super(),this.url=t;let _=i(s=>{let n=JSON.parse(s.data);this._onmessage(n)},"onmessage");this._socket=new m(t,_,r),this._socket.on("connect",()=>this.emit("connect")),this._socket.on("disconnect",()=>this.emit("disconnect")),this._socket.on("error",s=>this.emit("error",s))}_send(t){let r=JSON.stringify(t);this._socket.send(r)}close(){this._socket.close()}},m=class extends D{static{i(this,"ReconnectingWebsocket")}constructor(t,r,_){super(),this.url=t,this.preopenQueue=[],this._connected=!1,this._reconnectAttempts=0,this.closed=!1,this.options=Object.assign({reconnectDecay:1.5,reconnectInterval:1e3,maxReconnectInterval:1e4},_),this.onmessage=r,this._reconnect()}get reconnectAttempts(){return this._reconnectAttempts}_reconnect(){if(this.closed)return;let t;this.ready=new Promise(r=>t=r),this.socket=new Y.default(this.url),this.socket.onmessage=this.onmessage.bind(this),this.socket.onopen=r=>{for(this._reconnectAttempts=0,this._connected=!0;this.preopenQueue.length;)this.socket.send(this.preopenQueue.shift());this.emit("connect"),t()},this.socket.onerror=r=>{this.emit("error",r)},this.socket.onclose=r=>{this._connected=!1,this.emit("disconnect");let _=Math.min(this.options.reconnectInterval*Math.pow(this.options.reconnectDecay,this._reconnectAttempts),this.options.maxReconnectInterval);setTimeout(()=>{this._reconnectAttempts+=1,this._reconnect()},_)}}get connected(){return this._connected}send(t){this.connected?this.socket.send(t):this.preopenQueue.push(t)}close(){this.closed=!0,this.socket.close()}};var C=U(G(),1);var A=class extends C.TinyEmitter{static{i(this,"BaseDeltaChat")}constructor(t,r){super(),this.transport=t,this.contextEmitters={},this.rpc=new h(this.transport),r&&(this.eventTask=this.eventLoop())}async eventLoop(){for(;;){let t=await this.rpc.getNextEvent();this.emit(t.event.kind,t.contextId,t.event),this.emit("ALL",t.contextId,t.event),this.contextEmitters[t.contextId]&&(this.contextEmitters[t.contextId].emit(t.event.kind,t.event),this.contextEmitters[t.contextId].emit("ALL",t.event))}}async listAccounts(){return await this.rpc.getAllAccounts()}getContextEvents(t){return this.contextEmitters[t]?this.contextEmitters[t]:(this.contextEmitters[t]=new C.TinyEmitter,this.contextEmitters[t])}};var f;(function(e){e[e.DC_CERTCK_ACCEPT_INVALID=2]="DC_CERTCK_ACCEPT_INVALID",e[e.DC_CERTCK_ACCEPT_INVALID_CERTIFICATES=3]="DC_CERTCK_ACCEPT_INVALID_CERTIFICATES",e[e.DC_CERTCK_AUTO=0]="DC_CERTCK_AUTO",e[e.DC_CERTCK_STRICT=1]="DC_CERTCK_STRICT",e[e.DC_CHAT_ID_ALLDONE_HINT=7]="DC_CHAT_ID_ALLDONE_HINT",e[e.DC_CHAT_ID_ARCHIVED_LINK=6]="DC_CHAT_ID_ARCHIVED_LINK",e[e.DC_CHAT_ID_LAST_SPECIAL=9]="DC_CHAT_ID_LAST_SPECIAL",e[e.DC_CHAT_ID_TRASH=3]="DC_CHAT_ID_TRASH",e[e.DC_CHAT_TYPE_BROADCAST=160]="DC_CHAT_TYPE_BROADCAST",e[e.DC_CHAT_TYPE_GROUP=120]="DC_CHAT_TYPE_GROUP",e[e.DC_CHAT_TYPE_MAILINGLIST=140]="DC_CHAT_TYPE_MAILINGLIST",e[e.DC_CHAT_TYPE_SINGLE=100]="DC_CHAT_TYPE_SINGLE",e[e.DC_CHAT_TYPE_UNDEFINED=0]="DC_CHAT_TYPE_UNDEFINED",e[e.DC_CONNECTIVITY_CONNECTED=4e3]="DC_CONNECTIVITY_CONNECTED",e[e.DC_CONNECTIVITY_CONNECTING=2e3]="DC_CONNECTIVITY_CONNECTING",e[e.DC_CONNECTIVITY_NOT_CONNECTED=1e3]="DC_CONNECTIVITY_NOT_CONNECTED",e[e.DC_CONNECTIVITY_WORKING=3e3]="DC_CONNECTIVITY_WORKING",e[e.DC_CONTACT_ID_DEVICE=5]="DC_CONTACT_ID_DEVICE",e[e.DC_CONTACT_ID_INFO=2]="DC_CONTACT_ID_INFO",e[e.DC_CONTACT_ID_LAST_SPECIAL=9]="DC_CONTACT_ID_LAST_SPECIAL",e[e.DC_CONTACT_ID_SELF=1]="DC_CONTACT_ID_SELF",e[e.DC_GCL_ADD_ALLDONE_HINT=4]="DC_GCL_ADD_ALLDONE_HINT",e[e.DC_GCL_ADD_SELF=2]="DC_GCL_ADD_SELF",e[e.DC_GCL_ARCHIVED_ONLY=1]="DC_GCL_ARCHIVED_ONLY",e[e.DC_GCL_FOR_FORWARDING=8]="DC_GCL_FOR_FORWARDING",e[e.DC_GCL_NO_SPECIALS=2]="DC_GCL_NO_SPECIALS",e[e.DC_GCL_VERIFIED_ONLY=1]="DC_GCL_VERIFIED_ONLY",e[e.DC_GCM_ADDDAYMARKER=1]="DC_GCM_ADDDAYMARKER",e[e.DC_GCM_INFO_ONLY=2]="DC_GCM_INFO_ONLY",e[e.DC_LP_AUTH_NORMAL=4]="DC_LP_AUTH_NORMAL",e[e.DC_LP_AUTH_OAUTH2=2]="DC_LP_AUTH_OAUTH2",e[e.DC_MEDIA_QUALITY_BALANCED=0]="DC_MEDIA_QUALITY_BALANCED",e[e.DC_MEDIA_QUALITY_WORSE=1]="DC_MEDIA_QUALITY_WORSE",e[e.DC_MSG_ID_DAYMARKER=9]="DC_MSG_ID_DAYMARKER",e[e.DC_MSG_ID_LAST_SPECIAL=9]="DC_MSG_ID_LAST_SPECIAL",e[e.DC_MSG_ID_MARKER1=1]="DC_MSG_ID_MARKER1",e[e.DC_PROVIDER_STATUS_BROKEN=3]="DC_PROVIDER_STATUS_BROKEN",e[e.DC_PROVIDER_STATUS_OK=1]="DC_PROVIDER_STATUS_OK",e[e.DC_PROVIDER_STATUS_PREPARATION=2]="DC_PROVIDER_STATUS_PREPARATION",e[e.DC_PUSH_CONNECTED=2]="DC_PUSH_CONNECTED",e[e.DC_PUSH_HEARTBEAT=1]="DC_PUSH_HEARTBEAT",e[e.DC_PUSH_NOT_CONNECTED=0]="DC_PUSH_NOT_CONNECTED",e[e.DC_SHOW_EMAILS_ACCEPTED_CONTACTS=1]="DC_SHOW_EMAILS_ACCEPTED_CONTACTS",e[e.DC_SHOW_EMAILS_ALL=2]="DC_SHOW_EMAILS_ALL",e[e.DC_SHOW_EMAILS_OFF=0]="DC_SHOW_EMAILS_OFF",e[e.DC_SOCKET_AUTO=0]="DC_SOCKET_AUTO",e[e.DC_SOCKET_PLAIN=3]="DC_SOCKET_PLAIN",e[e.DC_SOCKET_SSL=1]="DC_SOCKET_SSL",e[e.DC_SOCKET_STARTTLS=2]="DC_SOCKET_STARTTLS",e[e.DC_STATE_IN_FRESH=10]="DC_STATE_IN_FRESH",e[e.DC_STATE_IN_NOTICED=13]="DC_STATE_IN_NOTICED",e[e.DC_STATE_IN_SEEN=16]="DC_STATE_IN_SEEN",e[e.DC_STATE_OUT_DELIVERED=26]="DC_STATE_OUT_DELIVERED",e[e.DC_STATE_OUT_DRAFT=19]="DC_STATE_OUT_DRAFT",e[e.DC_STATE_OUT_FAILED=24]="DC_STATE_OUT_FAILED",e[e.DC_STATE_OUT_MDN_RCVD=28]="DC_STATE_OUT_MDN_RCVD",e[e.DC_STATE_OUT_PENDING=20]="DC_STATE_OUT_PENDING",e[e.DC_STATE_OUT_PREPARING=18]="DC_STATE_OUT_PREPARING",e[e.DC_STATE_UNDEFINED=0]="DC_STATE_UNDEFINED",e[e.DC_STR_AC_SETUP_MSG_BODY=43]="DC_STR_AC_SETUP_MSG_BODY",e[e.DC_STR_AC_SETUP_MSG_SUBJECT=42]="DC_STR_AC_SETUP_MSG_SUBJECT",e[e.DC_STR_ADD_MEMBER_BY_OTHER=129]="DC_STR_ADD_MEMBER_BY_OTHER",e[e.DC_STR_ADD_MEMBER_BY_YOU=128]="DC_STR_ADD_MEMBER_BY_YOU",e[e.DC_STR_AEAP_ADDR_CHANGED=122]="DC_STR_AEAP_ADDR_CHANGED",e[e.DC_STR_AEAP_EXPLANATION_AND_LINK=123]="DC_STR_AEAP_EXPLANATION_AND_LINK",e[e.DC_STR_ARCHIVEDCHATS=40]="DC_STR_ARCHIVEDCHATS",e[e.DC_STR_AUDIO=11]="DC_STR_AUDIO",e[e.DC_STR_BACKUP_TRANSFER_MSG_BODY=163]="DC_STR_BACKUP_TRANSFER_MSG_BODY",e[e.DC_STR_BACKUP_TRANSFER_QR=162]="DC_STR_BACKUP_TRANSFER_QR",e[e.DC_STR_BAD_TIME_MSG_BODY=85]="DC_STR_BAD_TIME_MSG_BODY",e[e.DC_STR_BROADCAST_LIST=115]="DC_STR_BROADCAST_LIST",e[e.DC_STR_CANNOT_LOGIN=60]="DC_STR_CANNOT_LOGIN",e[e.DC_STR_CANTDECRYPT_MSG_BODY=29]="DC_STR_CANTDECRYPT_MSG_BODY",e[e.DC_STR_CHAT_PROTECTION_DISABLED=171]="DC_STR_CHAT_PROTECTION_DISABLED",e[e.DC_STR_CHAT_PROTECTION_ENABLED=170]="DC_STR_CHAT_PROTECTION_ENABLED",e[e.DC_STR_CONFIGURATION_FAILED=84]="DC_STR_CONFIGURATION_FAILED",e[e.DC_STR_CONNECTED=107]="DC_STR_CONNECTED",e[e.DC_STR_CONNTECTING=108]="DC_STR_CONNTECTING",e[e.DC_STR_CONTACT=200]="DC_STR_CONTACT",e[e.DC_STR_CONTACT_NOT_VERIFIED=36]="DC_STR_CONTACT_NOT_VERIFIED",e[e.DC_STR_CONTACT_SETUP_CHANGED=37]="DC_STR_CONTACT_SETUP_CHANGED",e[e.DC_STR_CONTACT_VERIFIED=35]="DC_STR_CONTACT_VERIFIED",e[e.DC_STR_DEVICE_MESSAGES=68]="DC_STR_DEVICE_MESSAGES",e[e.DC_STR_DEVICE_MESSAGES_HINT=70]="DC_STR_DEVICE_MESSAGES_HINT",e[e.DC_STR_DOWNLOAD_AVAILABILITY=100]="DC_STR_DOWNLOAD_AVAILABILITY",e[e.DC_STR_DRAFT=3]="DC_STR_DRAFT",e[e.DC_STR_E2E_AVAILABLE=25]="DC_STR_E2E_AVAILABLE",e[e.DC_STR_E2E_PREFERRED=34]="DC_STR_E2E_PREFERRED",e[e.DC_STR_ENCRYPTEDMSG=24]="DC_STR_ENCRYPTEDMSG",e[e.DC_STR_ENCR_NONE=28]="DC_STR_ENCR_NONE",e[e.DC_STR_ENCR_TRANSP=27]="DC_STR_ENCR_TRANSP",e[e.DC_STR_EPHEMERAL_DAY=79]="DC_STR_EPHEMERAL_DAY",e[e.DC_STR_EPHEMERAL_DAYS=95]="DC_STR_EPHEMERAL_DAYS",e[e.DC_STR_EPHEMERAL_DISABLED=75]="DC_STR_EPHEMERAL_DISABLED",e[e.DC_STR_EPHEMERAL_FOUR_WEEKS=81]="DC_STR_EPHEMERAL_FOUR_WEEKS",e[e.DC_STR_EPHEMERAL_HOUR=78]="DC_STR_EPHEMERAL_HOUR",e[e.DC_STR_EPHEMERAL_HOURS=94]="DC_STR_EPHEMERAL_HOURS",e[e.DC_STR_EPHEMERAL_MINUTE=77]="DC_STR_EPHEMERAL_MINUTE",e[e.DC_STR_EPHEMERAL_MINUTES=93]="DC_STR_EPHEMERAL_MINUTES",e[e.DC_STR_EPHEMERAL_SECONDS=76]="DC_STR_EPHEMERAL_SECONDS",e[e.DC_STR_EPHEMERAL_TIMER_1_DAY_BY_OTHER=147]="DC_STR_EPHEMERAL_TIMER_1_DAY_BY_OTHER",e[e.DC_STR_EPHEMERAL_TIMER_1_DAY_BY_YOU=146]="DC_STR_EPHEMERAL_TIMER_1_DAY_BY_YOU",e[e.DC_STR_EPHEMERAL_TIMER_1_HOUR_BY_OTHER=145]="DC_STR_EPHEMERAL_TIMER_1_HOUR_BY_OTHER",e[e.DC_STR_EPHEMERAL_TIMER_1_HOUR_BY_YOU=144]="DC_STR_EPHEMERAL_TIMER_1_HOUR_BY_YOU",e[e.DC_STR_EPHEMERAL_TIMER_1_MINUTE_BY_OTHER=143]="DC_STR_EPHEMERAL_TIMER_1_MINUTE_BY_OTHER",e[e.DC_STR_EPHEMERAL_TIMER_1_MINUTE_BY_YOU=142]="DC_STR_EPHEMERAL_TIMER_1_MINUTE_BY_YOU",e[e.DC_STR_EPHEMERAL_TIMER_1_WEEK_BY_OTHER=149]="DC_STR_EPHEMERAL_TIMER_1_WEEK_BY_OTHER",e[e.DC_STR_EPHEMERAL_TIMER_1_WEEK_BY_YOU=148]="DC_STR_EPHEMERAL_TIMER_1_WEEK_BY_YOU",e[e.DC_STR_EPHEMERAL_TIMER_DAYS_BY_OTHER=155]="DC_STR_EPHEMERAL_TIMER_DAYS_BY_OTHER",e[e.DC_STR_EPHEMERAL_TIMER_DAYS_BY_YOU=154]="DC_STR_EPHEMERAL_TIMER_DAYS_BY_YOU",e[e.DC_STR_EPHEMERAL_TIMER_DISABLED_BY_OTHER=139]="DC_STR_EPHEMERAL_TIMER_DISABLED_BY_OTHER",e[e.DC_STR_EPHEMERAL_TIMER_DISABLED_BY_YOU=138]="DC_STR_EPHEMERAL_TIMER_DISABLED_BY_YOU",e[e.DC_STR_EPHEMERAL_TIMER_HOURS_BY_OTHER=153]="DC_STR_EPHEMERAL_TIMER_HOURS_BY_OTHER",e[e.DC_STR_EPHEMERAL_TIMER_HOURS_BY_YOU=152]="DC_STR_EPHEMERAL_TIMER_HOURS_BY_YOU",e[e.DC_STR_EPHEMERAL_TIMER_MINUTES_BY_OTHER=151]="DC_STR_EPHEMERAL_TIMER_MINUTES_BY_OTHER",e[e.DC_STR_EPHEMERAL_TIMER_MINUTES_BY_YOU=150]="DC_STR_EPHEMERAL_TIMER_MINUTES_BY_YOU",e[e.DC_STR_EPHEMERAL_TIMER_SECONDS_BY_OTHER=141]="DC_STR_EPHEMERAL_TIMER_SECONDS_BY_OTHER",e[e.DC_STR_EPHEMERAL_TIMER_SECONDS_BY_YOU=140]="DC_STR_EPHEMERAL_TIMER_SECONDS_BY_YOU",e[e.DC_STR_EPHEMERAL_TIMER_WEEKS_BY_OTHER=157]="DC_STR_EPHEMERAL_TIMER_WEEKS_BY_OTHER",e[e.DC_STR_EPHEMERAL_TIMER_WEEKS_BY_YOU=156]="DC_STR_EPHEMERAL_TIMER_WEEKS_BY_YOU",e[e.DC_STR_EPHEMERAL_WEEK=80]="DC_STR_EPHEMERAL_WEEK",e[e.DC_STR_EPHEMERAL_WEEKS=96]="DC_STR_EPHEMERAL_WEEKS",e[e.DC_STR_ERROR=112]="DC_STR_ERROR",e[e.DC_STR_ERROR_NO_NETWORK=87]="DC_STR_ERROR_NO_NETWORK",e[e.DC_STR_FAILED_SENDING_TO=74]="DC_STR_FAILED_SENDING_TO",e[e.DC_STR_FILE=12]="DC_STR_FILE",e[e.DC_STR_FINGERPRINTS=30]="DC_STR_FINGERPRINTS",e[e.DC_STR_FORWARDED=97]="DC_STR_FORWARDED",e[e.DC_STR_GIF=23]="DC_STR_GIF",e[e.DC_STR_GROUP_IMAGE_CHANGED_BY_OTHER=127]="DC_STR_GROUP_IMAGE_CHANGED_BY_OTHER",e[e.DC_STR_GROUP_IMAGE_CHANGED_BY_YOU=126]="DC_STR_GROUP_IMAGE_CHANGED_BY_YOU",e[e.DC_STR_GROUP_IMAGE_DELETED_BY_OTHER=135]="DC_STR_GROUP_IMAGE_DELETED_BY_OTHER",e[e.DC_STR_GROUP_IMAGE_DELETED_BY_YOU=134]="DC_STR_GROUP_IMAGE_DELETED_BY_YOU",e[e.DC_STR_GROUP_LEFT_BY_OTHER=133]="DC_STR_GROUP_LEFT_BY_OTHER",e[e.DC_STR_GROUP_LEFT_BY_YOU=132]="DC_STR_GROUP_LEFT_BY_YOU",e[e.DC_STR_GROUP_NAME_CHANGED_BY_OTHER=125]="DC_STR_GROUP_NAME_CHANGED_BY_OTHER",e[e.DC_STR_GROUP_NAME_CHANGED_BY_YOU=124]="DC_STR_GROUP_NAME_CHANGED_BY_YOU",e[e.DC_STR_IMAGE=9]="DC_STR_IMAGE",e[e.DC_STR_INCOMING_MESSAGES=103]="DC_STR_INCOMING_MESSAGES",e[e.DC_STR_INVALID_UNENCRYPTED_MAIL=174]="DC_STR_INVALID_UNENCRYPTED_MAIL",e[e.DC_STR_LAST_MSG_SENT_SUCCESSFULLY=111]="DC_STR_LAST_MSG_SENT_SUCCESSFULLY",e[e.DC_STR_LOCATION=66]="DC_STR_LOCATION",e[e.DC_STR_LOCATION_ENABLED_BY_OTHER=137]="DC_STR_LOCATION_ENABLED_BY_OTHER",e[e.DC_STR_LOCATION_ENABLED_BY_YOU=136]="DC_STR_LOCATION_ENABLED_BY_YOU",e[e.DC_STR_MESSAGES=114]="DC_STR_MESSAGES",e[e.DC_STR_MESSAGE_ADD_MEMBER=173]="DC_STR_MESSAGE_ADD_MEMBER",e[e.DC_STR_MSGACTIONBYME=63]="DC_STR_MSGACTIONBYME",e[e.DC_STR_MSGACTIONBYUSER=62]="DC_STR_MSGACTIONBYUSER",e[e.DC_STR_MSGADDMEMBER=17]="DC_STR_MSGADDMEMBER",e[e.DC_STR_MSGDELMEMBER=18]="DC_STR_MSGDELMEMBER",e[e.DC_STR_MSGGROUPLEFT=19]="DC_STR_MSGGROUPLEFT",e[e.DC_STR_MSGGRPIMGCHANGED=16]="DC_STR_MSGGRPIMGCHANGED",e[e.DC_STR_MSGGRPIMGDELETED=33]="DC_STR_MSGGRPIMGDELETED",e[e.DC_STR_MSGGRPNAME=15]="DC_STR_MSGGRPNAME",e[e.DC_STR_MSGLOCATIONDISABLED=65]="DC_STR_MSGLOCATIONDISABLED",e[e.DC_STR_MSGLOCATIONENABLED=64]="DC_STR_MSGLOCATIONENABLED",e[e.DC_STR_NEW_GROUP_SEND_FIRST_MESSAGE=172]="DC_STR_NEW_GROUP_SEND_FIRST_MESSAGE",e[e.DC_STR_NOMESSAGES=1]="DC_STR_NOMESSAGES",e[e.DC_STR_NOT_CONNECTED=121]="DC_STR_NOT_CONNECTED",e[e.DC_STR_NOT_SUPPORTED_BY_PROVIDER=113]="DC_STR_NOT_SUPPORTED_BY_PROVIDER",e[e.DC_STR_ONE_MOMENT=106]="DC_STR_ONE_MOMENT",e[e.DC_STR_OUTGOING_MESSAGES=104]="DC_STR_OUTGOING_MESSAGES",e[e.DC_STR_PARTIAL_DOWNLOAD_MSG_BODY=99]="DC_STR_PARTIAL_DOWNLOAD_MSG_BODY",e[e.DC_STR_PART_OF_TOTAL_USED=116]="DC_STR_PART_OF_TOTAL_USED",e[e.DC_STR_QUOTA_EXCEEDING_MSG_BODY=98]="DC_STR_QUOTA_EXCEEDING_MSG_BODY",e[e.DC_STR_REACTED_BY=177]="DC_STR_REACTED_BY",e[e.DC_STR_READRCPT=31]="DC_STR_READRCPT",e[e.DC_STR_READRCPT_MAILBODY=32]="DC_STR_READRCPT_MAILBODY",e[e.DC_STR_REMOVE_MEMBER_BY_OTHER=131]="DC_STR_REMOVE_MEMBER_BY_OTHER",e[e.DC_STR_REMOVE_MEMBER_BY_YOU=130]="DC_STR_REMOVE_MEMBER_BY_YOU",e[e.DC_STR_REPLY_NOUN=90]="DC_STR_REPLY_NOUN",e[e.DC_STR_SAVED_MESSAGES=69]="DC_STR_SAVED_MESSAGES",e[e.DC_STR_SECUREJOIN_TAKES_LONGER=192]="DC_STR_SECUREJOIN_TAKES_LONGER",e[e.DC_STR_SECUREJOIN_WAIT=190]="DC_STR_SECUREJOIN_WAIT",e[e.DC_STR_SECUREJOIN_WAIT_TIMEOUT=191]="DC_STR_SECUREJOIN_WAIT_TIMEOUT",e[e.DC_STR_SECURE_JOIN_GROUP_QR_DESC=120]="DC_STR_SECURE_JOIN_GROUP_QR_DESC",e[e.DC_STR_SECURE_JOIN_REPLIES=118]="DC_STR_SECURE_JOIN_REPLIES",e[e.DC_STR_SECURE_JOIN_STARTED=117]="DC_STR_SECURE_JOIN_STARTED",e[e.DC_STR_SELF=2]="DC_STR_SELF",e[e.DC_STR_SELF_DELETED_MSG_BODY=91]="DC_STR_SELF_DELETED_MSG_BODY",e[e.DC_STR_SENDING=110]="DC_STR_SENDING",e[e.DC_STR_SERVER_TURNED_OFF=92]="DC_STR_SERVER_TURNED_OFF",e[e.DC_STR_SETUP_CONTACT_QR_DESC=119]="DC_STR_SETUP_CONTACT_QR_DESC",e[e.DC_STR_STICKER=67]="DC_STR_STICKER",e[e.DC_STR_STORAGE_ON_DOMAIN=105]="DC_STR_STORAGE_ON_DOMAIN",e[e.DC_STR_SUBJECT_FOR_NEW_CONTACT=73]="DC_STR_SUBJECT_FOR_NEW_CONTACT",e[e.DC_STR_SYNC_MSG_BODY=102]="DC_STR_SYNC_MSG_BODY",e[e.DC_STR_SYNC_MSG_SUBJECT=101]="DC_STR_SYNC_MSG_SUBJECT",e[e.DC_STR_UNKNOWN_SENDER_FOR_CHAT=72]="DC_STR_UNKNOWN_SENDER_FOR_CHAT",e[e.DC_STR_UPDATE_REMINDER_MSG_BODY=86]="DC_STR_UPDATE_REMINDER_MSG_BODY",e[e.DC_STR_UPDATING=109]="DC_STR_UPDATING",e[e.DC_STR_VIDEO=10]="DC_STR_VIDEO",e[e.DC_STR_VIDEOCHAT_INVITATION=82]="DC_STR_VIDEOCHAT_INVITATION",e[e.DC_STR_VIDEOCHAT_INVITE_MSG_BODY=83]="DC_STR_VIDEOCHAT_INVITE_MSG_BODY",e[e.DC_STR_VOICEMESSAGE=7]="DC_STR_VOICEMESSAGE",e[e.DC_STR_WELCOME_MESSAGE=71]="DC_STR_WELCOME_MESSAGE",e[e.DC_STR_YOU_REACTED=176]="DC_STR_YOU_REACTED",e[e.DC_TEXT1_DRAFT=1]="DC_TEXT1_DRAFT",e[e.DC_TEXT1_SELF=3]="DC_TEXT1_SELF",e[e.DC_TEXT1_USERNAME=2]="DC_TEXT1_USERNAME",e[e.DC_VIDEOCHATTYPE_BASICWEBRTC=1]="DC_VIDEOCHATTYPE_BASICWEBRTC",e[e.DC_VIDEOCHATTYPE_JITSI=2]="DC_VIDEOCHATTYPE_JITSI",e[e.DC_VIDEOCHATTYPE_UNKNOWN=0]="DC_VIDEOCHATTYPE_UNKNOWN"})(f||(f={}));function v(e){let t=/.theme-meta ?{([^]*)}/gm.exec(e)?.[1].trim()||"",r=/--(\w*): ?['"]([^]*?)['"];?/gi,_={},s=!0;for(;s;)s=r.exec(t),s&&(_[s[1]]=s[2]);if(!_.name||!_.description)throw new Error("The meta variables meta.name and meta.description must be defined");return _}i(v,"parseThemeMetaData");var q="dev_";var{WebsocketTransport:J}=p,N=!1,M=class extends J{constructor(r){super("wss://localhost:3000/ws/dc");this.callCounterFunction=r}static{i(this,"BrowserTransport")}_onmessage(r){if(r.method==="error_other_client_stole_dc_connection")throw alert(`error other client stole dc connection.
only use deltachat web in one browser at a time.
reload to steal connection back.`),new Error("connection inactive: error other client stole dc connection, please reload page");N&&console.debug("%c\u25BC %c[JSONRPC]","color: red","color:grey",r),super._onmessage(r)}_send(r){super._send(r),N&&(console.debug("%c\u25B2 %c[JSONRPC]","color: green","color:grey",r),r.method&&(this.callCounterFunction(r.method),this.callCounterFunction("total")))}},L=class extends A{static{i(this,"BrowserDeltachat")}close(){}constructor(t){super(new M(t),!0)}},P=class{constructor(){this.rc_config=null;this.activeNotifications={};this.notificationCB=i(()=>{this.log.critical("notification click handler not initialized yet")},"notificationCB");this.runtime_info=null;this.socket=new WebSocket("wss://localhost:3000/ws/backend"),this.socket.addEventListener("open",()=>{console.log("WebSocket connection opened")}),this.socket.addEventListener("message",t=>{console.log("Received message from server:",t.data)}),this.socket.addEventListener("close",()=>{console.log("WebSocket connection closed")}),this.socket.addEventListener("error",t=>{console.error("WebSocket error:",t)})}static{i(this,"BrowserRuntime")}sendToBackendOverWS(t){if(this.socket.readyState!=this.socket.OPEN)console.warn("sendToBackendOverWS can not send message to backend because websocket is not open");else try{this.socket.send(JSON.stringify(t))}catch{console.warn("sendToBackendOverWS failed to send message to backend over websocket")}}openMapsWebxdc(t,r){throw new Error("Method not implemented.")}emitUIFullyReady(){this.sendToBackendOverWS({type:"UIReadyFrontendReady"})}onDragFileOut(t){}isDroppedFileFromOutside(t){return!0}emitUIReady(){this.sendToBackendOverWS({type:"UIReady"})}createDeltaChatConnection(t){return new L(t)}openMessageHTML(t,r,_,s,n,o,a){throw new Error("Method not implemented.")}notifyWebxdcStatusUpdate(t,r){this.log.critical("Method not implemented.")}notifyWebxdcRealtimeData(t,r,_){this.log.critical("Method not implemented.")}notifyWebxdcMessageChanged(t,r){this.log.critical("Method not implemented.")}notifyWebxdcInstanceDeleted(t,r){this.log.critical("Method not implemented.")}async saveBackgroundImage(t,r){let _=await fetch("/backend-api/saveBackgroundImage",{body:JSON.stringify({file:t,isDefaultPicture:r}),method:"POST",headers:{"Content-Type":"application/json"}});if(!_.ok)throw this.log.error("saveBackgroundImage failed",_),new Error("saveBackgroundImage failed: "+_.statusText);return(await _.json()).result}async getLocaleData(t){let r=await(await fetch("/locales/en.json")).json(),_=await(await fetch("/locales/_untranslated_en.json")).json();if(!t)return{locale:"en",messages:{...r,..._}};let s;try{s=await(await fetch(`/locales/${t}.json`)).json()}catch(n){try{if(t.indexOf("-")!==-1){let o=t=t.split("-")[0];s=await(await fetch(`/locales/${o}.json`)).json()}else throw new Error("language load failed, even alternative of base language failed.")}catch(o){this.log.error(`Could not load messages for ${t}, falling back to english`,n,o),t="en",s=r}}return{locale:"en",messages:{...s,..._}}}setLocale(t){throw new Error("Method not implemented.")}async setDesktopSetting(t,r){if(t=="notifications"&&r&&await this.askBrowserForNotificationPermission(),!(await fetch(`/backend-api/config/${t}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({new_value:r})})).ok)throw new Error("setDesktopSettings request failed")}async getAvailableThemes(){return(await fetch("/themes.json")).json()}async getActiveTheme(){let t=(await this.getDesktopSettings()).activeTheme,[r,_]=t.split(":");if(r==="system"&&(r="dc",_=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"),r!=="dc")throw new Error("only dc themes are implmented in the browser edition");let s=`/themes/${_}.css`,n=await fetch(s);if(!n.ok)throw new Error("error loading theme: "+n.statusText);let o=await n.text(),a=v(o);return{theme:{address:t,description:a.description,name:a.name,is_prototype:_.startsWith(q)},data:o}}async clearWebxdcDOMStorage(t){this.log.warn("clearWebxdcDOMStorage method does not exist in browser.")}getWebxdcDiskUsage(t){throw new Error("getWebxdcDiskUsage method does not exist in browser.")}async writeTempFileFromBase64(t,r){return(await(await fetch(`/backend-api/uploadTempFileB64/${t}`,{method:"POST",body:r})).json()).path}async writeTempFile(t,r){return(await(await fetch(`/backend-api/uploadTempFile/${t}`,{method:"POST",body:r})).json()).path}async copyFileToInternalTmpDir(t,r){throw new Error("Method not implemented")}async removeTempFile(t){await fetch("/backend-api/removeTempFile",{method:"POST",body:t})}setNotificationCallback(t){this.notificationCB=t}async showNotification(t){if(Notification.permission!="granted"){this.log.warn("failed to showNotification: we don't have permission to send notifications");return}let{accountId:r,chatId:_,body:s,title:n,icon:o,messageId:a}=t;this.log.debug("showNotification",{accountId:r,chatId:_,messageId:a});let T=(()=>{let c=new URL(location.origin);return c.pathname="images/deltachat.png",c.toString()})();if(o)try{let c=await fetch(o.startsWith("data:")?o:this.transformBlobURL(o));if(!c.ok)throw new Error("request failed: code"+c.status);let S=await c.blob();T=await new Promise((y,b)=>{let d=new FileReader;d.onloadend=()=>{y(d.result)},d.onabort=b,d.onerror=b,d.readAsDataURL(S)})}catch(c){this.log.warn("failed to load thumbnail for notification",c)}this.log.info("notify-icon",{icon:T});let E=new Notification(n,{body:s,icon:T,tag:`${r}.${_}.${a}`});E.onclick=this.notificationCB.bind(this,{accountId:r,chatId:_,msgId:a}),this.activeNotifications[r]||(this.activeNotifications[r]={}),this.activeNotifications[r][_]?this.activeNotifications[r][_].push(E):this.activeNotifications[r][_]=[E]}clearAllNotifications(){for(let t of Object.keys(this.activeNotifications))if(!Number.isNaN(Number(t)))for(let r of Object.keys(this.activeNotifications[Number(t)]))Number.isNaN(Number(r))||this.clearNotifications(Number(t),Number(r))}clearNotifications(t,r){if(this.log.debug("clearNotificationsForChat",{chatId:r,notifications:this.activeNotifications}),this.activeNotifications[t]?.[r]){for(let _ of this.activeNotifications[t][r])_.close();delete this.activeNotifications[t][r]}this.log.debug("after cleared Notifications",{chatId:r,notifications:this.activeNotifications})}setBadgeCounter(t){document.title=`DeltaChat${t?`(${t})`:""}`}deleteWebxdcAccountData(t){return this.log.warn("deleteWebxdcAccountData method does not exist in browser."),Promise.resolve()}closeAllWebxdcInstances(){this.log.critical("Method not implemented.")}restartApp(){this.log.critical("Method not implemented.")}getRuntimeInfo(){if(this.runtime_info===null)throw new Error("this.runtime_info is not set");return this.runtime_info}async getDesktopSettings(){let t=await fetch("/backend-api/config");if(!t.ok)throw new Error("getDesktopSettings request failed");let r=await t.json();return r.locale===null&&(r.locale=navigator.language),r}getWebxdcIconURL(t,r){return this.log.critical("getWebxdcIconURL Method not implemented."),"not-implemented"}openWebxdc(t,r){throw new Error("Method not implemented.")}async openPath(t){if(t.includes("dc.db-blobs"))return window.open(this.transformBlobURL(t),"_blank")?.focus(),"";throw new Error("Browser does not support opening urls outside of blob directory")}async getAppPath(t){return this.log.critical("Method not implemented."),"not-implemented"}async downloadFile(t,r){if(t.includes("dc.db-blobs"))window.open(this.transformBlobURL(t)+"?download_with_filename="+encodeURIComponent(r),"_blank")?.focus();else throw new Error("Browser does not support opening urls outside of blob directory")}readClipboardText(){return navigator.clipboard.readText()}async readClipboardImage(){try{let t=await navigator.clipboard.read();for(let r of t)for(let _ of r.types)if(_.startsWith("image")){let s=await r.getType(_);return await new Promise((n,o)=>{let a=new FileReader;a.onloadend=()=>{n(a.result)},a.onabort=o,a.onerror=o,a.readAsDataURL(s)})}}catch(t){this.log.error("error in readClipboardImage",t)}return null}writeClipboardText(t){return navigator.clipboard.writeText(t)}async writeClipboardImage(t){try{let r=this.transformBlobURL(t),s=await(await fetch(r)).blob();if(!s.type.startsWith("image"))throw new Error("Not an image mimetype:"+s.type);if(s.type!=="image/png"){let n=new Image,o=new Promise((a,T)=>{n.onload=async()=>{try{let E=new OffscreenCanvas(n.naturalWidth,n.naturalHeight),c=E.getContext("2d");if(!c)throw new Error("canvas context creation error");c.fillRect(0,0,E.width,E.height),c.drawImage(n,0,0),a(await E.convertToBlob())}catch(E){T(E)}},n.onerror=T,n.onabort=T});n.src=r,s=await o}await navigator.clipboard.write([new ClipboardItem({[s.type]:s})]),this.log.debug("Fetched image copied.")}catch(r){throw this.log.error("error in writeClipboardImage",r),r}}transformBlobURL(t){let r=t.match(/.*(:?\\|\/)(.+?)\1dc.db-blobs\1(.*)/);return r?`/blobs/${r[2]}/${r[3]}`:(t!==""?this.log.error("transformBlobURL wrong url format",t):this.log.debug("transformBlobURL called with empty string for blob_path"),"")}transformStickerURL(t){throw new Error("sticker picker is not implemented yet for browser")}async showOpenFileDialog(t){let r=t.filters?.map(_=>_.extensions).reduce((_,s)=>s.concat(_)).map(_=>`.${_}`).join();return new Promise((_,s)=>{let n=document.createElement("input");n.type="file",n.accept=r||"",t.properties.includes("multiSelections")&&(n.multiple=!0),n.onchange=async()=>{if(n.files!=null){let o=[...n.files].map(c=>fetch(`/backend-api/uploadTempFile/${c.name}`,{method:"POST",body:c}).then(S=>S.json()).then(S=>S.path)),a=await Promise.allSettled(o);this.log.debug("showOpenFileDialog upload - results",a);let T=a.filter(c=>c.status=="fulfilled").map(c=>c.value),E=a.find(c=>c.status=="rejected");E?(this.log.warn("some file failed to upload with error, removing other files now:",E.reason),T.forEach(c=>{this.removeTempFile(c)}),s(E.reason)):_(T)}else _([])},n.click()})}openLink(t){window.open(t,"_blank")?.focus()}async initialize(t,r){this.log=r("runtime/browser");let[_,s]=await Promise.all([fetch("/backend-api/rc_config"),fetch("/backend-api/runtime_info")]);if(!_.ok||!s.ok)throw new Error("initialisation failed, look into network tab for more into");let n=this.rc_config=await _.json();n["log-debug"]&&(N=!0),console.info("RC_Config",n),this.runtime_info=await s.json(),t((o,a,T,...E)=>{this.sendToBackendOverWS({type:"log",data:[o,a,T,...E]})},n),this.askBrowserForNotificationPermission()}async askBrowserForNotificationPermission(){if("Notification"in window&&Notification.permission!=="granted"){let t=await Notification.requestPermission();this.log.debug("Notification.requestPermission",{result:t})}}getRC_Config(){if(this.rc_config===null)throw new Error("this.rc_config is not set");return this.rc_config}async openHelpWindow(t){let r=window.localeData.locale,_=await fetch(`/help_exists/${r}`),s=t?"#"+t:"";_.ok?window.open(`/help/${r}/help.html${s}`,"_blank")?.focus():window.open("/help/en/help.html"+s,"_blank")?.focus()}openLogFile(){throw new Error("Method not implemented.")}getCurrentLogLocation(){return"not implemented."}reloadWebContent(){window.location.reload()}getConfigPath(){return this.log.warn("getConfigPath method does not exist in browser."),""}getAutostartState(){return Promise.resolve({isSupported:!1,isRegistered:!1})}async checkMediaAccess(t){return navigator.permissions.query({name:t}).then(r=>r.state==="granted"?"granted":r.state==="prompt"?"not-determined":r.state==="denied"?"denied":"unknown")}askForMediaAccess(t){return!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia?(this.log.error("askForMediaAccess failed: no mediaDevices"),Promise.resolve(!1)):t!=="microphone"?navigator.mediaDevices.getUserMedia({audio:!0}).then(r=>(r.getTracks().forEach(_=>_.stop()),!0),r=>(this.log.error('askForMediaAccess "microphone" failed',r),!1)):(this.log.error(`askForMediaAccess failed: mediaType "${t}" not implemented`),Promise.resolve(!1))}};window.r=new P;
//# sourceMappingURL=runtime.js.map
