{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/isomorphic-ws@4.0.1_ws@8.18.0/node_modules/isomorphic-ws/browser.js", "../../../node_modules/.pnpm/@deltachat+tiny-emitter@3.0.0/node_modules/@deltachat/tiny-emitter/index.js", "../../../node_modules/.pnpm/@tauri-apps+api@2.5.0/node_modules/@tauri-apps/api/external/tslib/tslib.es6.js", "../../../node_modules/.pnpm/@tauri-apps+api@2.5.0/node_modules/@tauri-apps/api/core.js", "../../../node_modules/.pnpm/@tauri-apps+api@2.5.0/node_modules/@tauri-apps/api/dpi.js", "../../../node_modules/.pnpm/@tauri-apps+api@2.5.0/node_modules/@tauri-apps/api/event.js", "../../../node_modules/.pnpm/@tauri-apps+api@2.5.0/node_modules/@tauri-apps/api/image.js", "../../../node_modules/.pnpm/@tauri-apps+api@2.5.0/node_modules/@tauri-apps/api/window.js", "../../../node_modules/.pnpm/@tauri-apps+plugin-store@2.2.0/node_modules/@tauri-apps/plugin-store/dist-js/index.js", "../../../node_modules/.pnpm/@tauri-apps+plugin-opener@2.2.6/node_modules/@tauri-apps/plugin-opener/dist-js/index.js", "../../../node_modules/.pnpm/@tauri-apps+plugin-clipboard-manager@2.2.2/node_modules/@tauri-apps/plugin-clipboard-manager/dist-js/index.js", "../../../node_modules/.pnpm/@deltachat+jsonrpc-client@1.159.4_ws@8.18.0/node_modules/@deltachat/jsonrpc-client/generated/client.ts", "../../../node_modules/.pnpm/yerpc@0.6.2/node_modules/yerpc/index.ts", "../../../node_modules/.pnpm/yerpc@0.6.2/node_modules/yerpc/util/emitter.ts", "../../../node_modules/.pnpm/yerpc@0.6.2/node_modules/yerpc/client.ts", "../../../node_modules/.pnpm/yerpc@0.6.2/node_modules/yerpc/websocket.ts", "../../../node_modules/.pnpm/@deltachat+jsonrpc-client@1.159.4_ws@8.18.0/node_modules/@deltachat/jsonrpc-client/src/client.ts", "../../../node_modules/.pnpm/@deltachat+jsonrpc-client@1.159.4_ws@8.18.0/node_modules/@deltachat/jsonrpc-client/generated/constants.ts", "../runtime-tauri/runtime.ts"],
  "sourcesContent": ["// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js\n\nvar ws = null\n\nif (typeof WebSocket !== 'undefined') {\n  ws = WebSocket\n} else if (typeof MozWebSocket !== 'undefined') {\n  ws = MozWebSocket\n} else if (typeof global !== 'undefined') {\n  ws = global.WebSocket || global.MozWebSocket\n} else if (typeof window !== 'undefined') {\n  ws = window.WebSocket || window.MozWebSocket\n} else if (typeof self !== 'undefined') {\n  ws = self.WebSocket || self.MozWebSocket\n}\n\nmodule.exports = ws\n", "function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      try {\n        evtArr[i].fn.apply(evtArr[i].ctx, data);\n      } catch (error) {\n        console.error(\"event listener for event '\"+String(name)+\"' threw an error:\", error, evtArr[i].fn);\n      }\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n", "/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nexport { __classPrivateFieldGet, __classPrivateFieldSet };\n", "import { __classPrivateFieldGet, __classPrivateFieldSet } from './external/tslib/tslib.es6.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\nvar _Channel_onmessage, _Channel_nextMessageIndex, _Channel_pendingMessages, _Channel_messageEndIndex, _Resource_rid;\n/**\n * Invoke your custom commands.\n *\n * This package is also accessible with `window.__TAURI__.core` when [`app.withGlobalTauri`](https://v2.tauri.app/reference/config/#withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n/**\n * A key to be used to implement a special function\n * on your types that define how your type should be serialized\n * when passing across the IPC.\n * @example\n * Given a type in Rust that looks like this\n * ```rs\n * #[derive(serde::Serialize, serde::Deserialize)\n * enum UserId {\n *   String(String),\n *   Number(u32),\n * }\n * ```\n * `UserId::String(\"id\")` would be serialized into `{ String: \"id\" }`\n * and so we need to pass the same structure back to Rust\n * ```ts\n * import { SERIALIZE_TO_IPC_FN } from \"@tauri-apps/api/core\"\n *\n * class UserIdString {\n *   id\n *   constructor(id) {\n *     this.id = id\n *   }\n *\n *   [SERIALIZE_TO_IPC_FN]() {\n *     return { String: this.id }\n *   }\n * }\n *\n * class UserIdNumber {\n *   id\n *   constructor(id) {\n *     this.id = id\n *   }\n *\n *   [SERIALIZE_TO_IPC_FN]() {\n *     return { Number: this.id }\n *   }\n * }\n *\n * type UserId = UserIdString | UserIdNumber\n * ```\n *\n */\n// if this value changes, make sure to update it in:\n// 1. ipc.js\n// 2. process-ipc-message-fn.js\nconst SERIALIZE_TO_IPC_FN = '__TAURI_TO_IPC_KEY__';\n/**\n * Transforms a callback function to a string identifier that can be passed to the backend.\n * The backend uses the identifier to `eval()` the callback.\n *\n * @return A unique identifier associated with the callback function.\n *\n * @since 1.0.0\n */\nfunction transformCallback(callback, once = false) {\n    return window.__TAURI_INTERNALS__.transformCallback(callback, once);\n}\nclass Channel {\n    constructor(onmessage) {\n        _Channel_onmessage.set(this, void 0);\n        // the index is used as a mechanism to preserve message order\n        _Channel_nextMessageIndex.set(this, 0);\n        _Channel_pendingMessages.set(this, []);\n        _Channel_messageEndIndex.set(this, void 0);\n        __classPrivateFieldSet(this, _Channel_onmessage, onmessage || (() => { }), \"f\");\n        this.id = transformCallback((rawMessage) => {\n            const index = rawMessage.index;\n            if ('end' in rawMessage) {\n                if (index == __classPrivateFieldGet(this, _Channel_nextMessageIndex, \"f\")) {\n                    this.cleanupCallback();\n                }\n                else {\n                    __classPrivateFieldSet(this, _Channel_messageEndIndex, index, \"f\");\n                }\n                return;\n            }\n            const message = rawMessage.message;\n            // Process the message if we're at the right order\n            if (index == __classPrivateFieldGet(this, _Channel_nextMessageIndex, \"f\")) {\n                __classPrivateFieldGet(this, _Channel_onmessage, \"f\").call(this, message);\n                __classPrivateFieldSet(this, _Channel_nextMessageIndex, __classPrivateFieldGet(this, _Channel_nextMessageIndex, \"f\") + 1, \"f\");\n                // process pending messages\n                while (__classPrivateFieldGet(this, _Channel_nextMessageIndex, \"f\") in __classPrivateFieldGet(this, _Channel_pendingMessages, \"f\")) {\n                    const message = __classPrivateFieldGet(this, _Channel_pendingMessages, \"f\")[__classPrivateFieldGet(this, _Channel_nextMessageIndex, \"f\")];\n                    __classPrivateFieldGet(this, _Channel_onmessage, \"f\").call(this, message);\n                    // eslint-disable-next-line @typescript-eslint/no-array-delete\n                    delete __classPrivateFieldGet(this, _Channel_pendingMessages, \"f\")[__classPrivateFieldGet(this, _Channel_nextMessageIndex, \"f\")];\n                    __classPrivateFieldSet(this, _Channel_nextMessageIndex, __classPrivateFieldGet(this, _Channel_nextMessageIndex, \"f\") + 1, \"f\");\n                }\n                if (__classPrivateFieldGet(this, _Channel_nextMessageIndex, \"f\") === __classPrivateFieldGet(this, _Channel_messageEndIndex, \"f\")) {\n                    this.cleanupCallback();\n                }\n            }\n            // Queue the message if we're not\n            else {\n                // eslint-disable-next-line security/detect-object-injection\n                __classPrivateFieldGet(this, _Channel_pendingMessages, \"f\")[index] = message;\n            }\n        });\n    }\n    cleanupCallback() {\n        Reflect.deleteProperty(window, `_${this.id}`);\n    }\n    set onmessage(handler) {\n        __classPrivateFieldSet(this, _Channel_onmessage, handler, \"f\");\n    }\n    get onmessage() {\n        return __classPrivateFieldGet(this, _Channel_onmessage, \"f\");\n    }\n    [(_Channel_onmessage = new WeakMap(), _Channel_nextMessageIndex = new WeakMap(), _Channel_pendingMessages = new WeakMap(), _Channel_messageEndIndex = new WeakMap(), SERIALIZE_TO_IPC_FN)]() {\n        return `__CHANNEL__:${this.id}`;\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\nclass PluginListener {\n    constructor(plugin, event, channelId) {\n        this.plugin = plugin;\n        this.event = event;\n        this.channelId = channelId;\n    }\n    async unregister() {\n        return invoke(`plugin:${this.plugin}|remove_listener`, {\n            event: this.event,\n            channelId: this.channelId\n        });\n    }\n}\n/**\n * Adds a listener to a plugin event.\n *\n * @returns The listener object to stop listening to the events.\n *\n * @since 2.0.0\n */\nasync function addPluginListener(plugin, event, cb) {\n    const handler = new Channel(cb);\n    return invoke(`plugin:${plugin}|registerListener`, { event, handler }).then(() => new PluginListener(plugin, event, handler.id));\n}\n/**\n * Get permission state for a plugin.\n *\n * This should be used by plugin authors to wrap their actual implementation.\n */\nasync function checkPermissions(plugin) {\n    return invoke(`plugin:${plugin}|check_permissions`);\n}\n/**\n * Request permissions.\n *\n * This should be used by plugin authors to wrap their actual implementation.\n */\nasync function requestPermissions(plugin) {\n    return invoke(`plugin:${plugin}|request_permissions`);\n}\n/**\n * Sends a message to the backend.\n * @example\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * await invoke('login', { user: 'tauri', password: 'poiwe3h4r5ip3yrhtew9ty' });\n * ```\n *\n * @param cmd The command name.\n * @param args The optional arguments to pass to the command.\n * @param options The request options.\n * @return A promise resolving or rejecting to the backend response.\n *\n * @since 1.0.0\n */\nasync function invoke(cmd, args = {}, options) {\n    return window.__TAURI_INTERNALS__.invoke(cmd, args, options);\n}\n/**\n * Convert a device file path to an URL that can be loaded by the webview.\n * Note that `asset:` and `http://asset.localhost` must be added to [`app.security.csp`](https://v2.tauri.app/reference/config/#csp-1) in `tauri.conf.json`.\n * Example CSP value: `\"csp\": \"default-src 'self' ipc: http://ipc.localhost; img-src 'self' asset: http://asset.localhost\"` to use the asset protocol on image sources.\n *\n * Additionally, `\"enable\" : \"true\"` must be added to [`app.security.assetProtocol`](https://v2.tauri.app/reference/config/#assetprotocolconfig)\n * in `tauri.conf.json` and its access scope must be defined on the `scope` array on the same `assetProtocol` object.\n *\n * @param  filePath The file path.\n * @param  protocol The protocol to use. Defaults to `asset`. You only need to set this when using a custom protocol.\n * @example\n * ```typescript\n * import { appDataDir, join } from '@tauri-apps/api/path';\n * import { convertFileSrc } from '@tauri-apps/api/core';\n * const appDataDirPath = await appDataDir();\n * const filePath = await join(appDataDirPath, 'assets/video.mp4');\n * const assetUrl = convertFileSrc(filePath);\n *\n * const video = document.getElementById('my-video');\n * const source = document.createElement('source');\n * source.type = 'video/mp4';\n * source.src = assetUrl;\n * video.appendChild(source);\n * video.load();\n * ```\n *\n * @return the URL that can be used as source on the webview.\n *\n * @since 1.0.0\n */\nfunction convertFileSrc(filePath, protocol = 'asset') {\n    return window.__TAURI_INTERNALS__.convertFileSrc(filePath, protocol);\n}\n/**\n * A rust-backed resource stored through `tauri::Manager::resources_table` API.\n *\n * The resource lives in the main process and does not exist\n * in the Javascript world, and thus will not be cleaned up automatiacally\n * except on application exit. If you want to clean it up early, call {@linkcode Resource.close}\n *\n * @example\n * ```typescript\n * import { Resource, invoke } from '@tauri-apps/api/core';\n * export class DatabaseHandle extends Resource {\n *   static async open(path: string): Promise<DatabaseHandle> {\n *     const rid: number = await invoke('open_db', { path });\n *     return new DatabaseHandle(rid);\n *   }\n *\n *   async execute(sql: string): Promise<void> {\n *     await invoke('execute_sql', { rid: this.rid, sql });\n *   }\n * }\n * ```\n */\nclass Resource {\n    get rid() {\n        return __classPrivateFieldGet(this, _Resource_rid, \"f\");\n    }\n    constructor(rid) {\n        _Resource_rid.set(this, void 0);\n        __classPrivateFieldSet(this, _Resource_rid, rid, \"f\");\n    }\n    /**\n     * Destroys and cleans up this resource from memory.\n     * **You should not call any method on this object anymore and should drop any reference to it.**\n     */\n    async close() {\n        return invoke('plugin:resources|close', {\n            rid: this.rid\n        });\n    }\n}\n_Resource_rid = new WeakMap();\nfunction isTauri() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-member-access\n    return !!(globalThis || window).isTauri;\n}\n\nexport { Channel, PluginListener, Resource, SERIALIZE_TO_IPC_FN, addPluginListener, checkPermissions, convertFileSrc, invoke, isTauri, requestPermissions, transformCallback };\n", "import { SERIALIZE_TO_IPC_FN } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * A size represented in logical pixels.\n *\n * @since 2.0.0\n */\nclass LogicalSize {\n    constructor(...args) {\n        this.type = 'Logical';\n        if (args.length === 1) {\n            if ('Logical' in args[0]) {\n                this.width = args[0].Logical.width;\n                this.height = args[0].Logical.height;\n            }\n            else {\n                this.width = args[0].width;\n                this.height = args[0].height;\n            }\n        }\n        else {\n            this.width = args[0];\n            this.height = args[1];\n        }\n    }\n    /**\n     * Converts the logical size to a physical one.\n     * @example\n     * ```typescript\n     * import { LogicalSize } from '@tauri-apps/api/dpi';\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     *\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const size = new LogicalSize(400, 500);\n     * const physical = size.toPhysical(factor);\n     * ```\n     *\n     * @since 2.0.0\n     */\n    toPhysical(scaleFactor) {\n        return new PhysicalSize(this.width * scaleFactor, this.height * scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            width: this.width,\n            height: this.height\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n * A size represented in physical pixels.\n *\n * @since 2.0.0\n */\nclass PhysicalSize {\n    constructor(...args) {\n        this.type = 'Physical';\n        if (args.length === 1) {\n            if ('Physical' in args[0]) {\n                this.width = args[0].Physical.width;\n                this.height = args[0].Physical.height;\n            }\n            else {\n                this.width = args[0].width;\n                this.height = args[0].height;\n            }\n        }\n        else {\n            this.width = args[0];\n            this.height = args[1];\n        }\n    }\n    /**\n     * Converts the physical size to a logical one.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const size = await appWindow.innerSize(); // PhysicalSize\n     * const logical = size.toLogical(factor);\n     * ```\n     */\n    toLogical(scaleFactor) {\n        return new LogicalSize(this.width / scaleFactor, this.height / scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            width: this.width,\n            height: this.height\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n * A size represented either in physical or in logical pixels.\n *\n * This type is basically a union type of {@linkcode LogicalSize} and {@linkcode PhysicalSize}\n * but comes in handy when using `tauri::Size` in Rust as an argument to a command, as this class\n * automatically serializes into a valid format so it can be deserialized correctly into `tauri::Size`\n *\n * So instead of\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalSize, PhysicalSize } from '@tauri-apps/api/dpi';\n *\n * const size: LogicalSize | PhysicalSize = someFunction(); // where someFunction returns either LogicalSize or PhysicalSize\n * const validSize = size instanceof LogicalSize\n *   ? { Logical: { width: size.width, height: size.height } }\n *   : { Physical: { width: size.width, height: size.height } }\n * await invoke(\"do_something_with_size\", { size: validSize });\n * ```\n *\n * You can just use {@linkcode Size}\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalSize, PhysicalSize, Size } from '@tauri-apps/api/dpi';\n *\n * const size: LogicalSize | PhysicalSize = someFunction(); // where someFunction returns either LogicalSize or PhysicalSize\n * const validSize = new Size(size);\n * await invoke(\"do_something_with_size\", { size: validSize });\n * ```\n *\n * @since 2.1.0\n */\nclass Size {\n    constructor(size) {\n        this.size = size;\n    }\n    toLogical(scaleFactor) {\n        return this.size instanceof LogicalSize\n            ? this.size\n            : this.size.toLogical(scaleFactor);\n    }\n    toPhysical(scaleFactor) {\n        return this.size instanceof PhysicalSize\n            ? this.size\n            : this.size.toPhysical(scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            [`${this.size.type}`]: {\n                width: this.size.width,\n                height: this.size.height\n            }\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n *  A position represented in logical pixels.\n *\n * @since 2.0.0\n */\nclass LogicalPosition {\n    constructor(...args) {\n        this.type = 'Logical';\n        if (args.length === 1) {\n            if ('Logical' in args[0]) {\n                this.x = args[0].Logical.x;\n                this.y = args[0].Logical.y;\n            }\n            else {\n                this.x = args[0].x;\n                this.y = args[0].y;\n            }\n        }\n        else {\n            this.x = args[0];\n            this.y = args[1];\n        }\n    }\n    /**\n     * Converts the logical position to a physical one.\n     * @example\n     * ```typescript\n     * import { LogicalPosition } from '@tauri-apps/api/dpi';\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     *\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const position = new LogicalPosition(400, 500);\n     * const physical = position.toPhysical(factor);\n     * ```\n     *\n     * @since 2.0.0\n     */\n    toPhysical(scaleFactor) {\n        return new PhysicalPosition(this.x * scaleFactor, this.y * scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            x: this.x,\n            y: this.y\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n *  A position represented in physical pixels.\n *\n * @since 2.0.0\n */\nclass PhysicalPosition {\n    constructor(...args) {\n        this.type = 'Physical';\n        if (args.length === 1) {\n            if ('Physical' in args[0]) {\n                this.x = args[0].Physical.x;\n                this.y = args[0].Physical.y;\n            }\n            else {\n                this.x = args[0].x;\n                this.y = args[0].y;\n            }\n        }\n        else {\n            this.x = args[0];\n            this.y = args[1];\n        }\n    }\n    /**\n     * Converts the physical position to a logical one.\n     * @example\n     * ```typescript\n     * import { PhysicalPosition } from '@tauri-apps/api/dpi';\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     *\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const position = new PhysicalPosition(400, 500);\n     * const physical = position.toLogical(factor);\n     * ```\n     *\n     * @since 2.0.0\n     */\n    toLogical(scaleFactor) {\n        return new LogicalPosition(this.x / scaleFactor, this.y / scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            x: this.x,\n            y: this.y\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n * A position represented either in physical or in logical pixels.\n *\n * This type is basically a union type of {@linkcode LogicalSize} and {@linkcode PhysicalSize}\n * but comes in handy when using `tauri::Position` in Rust as an argument to a command, as this class\n * automatically serializes into a valid format so it can be deserialized correctly into `tauri::Position`\n *\n * So instead of\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalPosition, PhysicalPosition } from '@tauri-apps/api/dpi';\n *\n * const position: LogicalPosition | PhysicalPosition = someFunction(); // where someFunction returns either LogicalPosition or PhysicalPosition\n * const validPosition = position instanceof LogicalPosition\n *   ? { Logical: { x: position.x, y: position.y } }\n *   : { Physical: { x: position.x, y: position.y } }\n * await invoke(\"do_something_with_position\", { position: validPosition });\n * ```\n *\n * You can just use {@linkcode Position}\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalPosition, PhysicalPosition, Position } from '@tauri-apps/api/dpi';\n *\n * const position: LogicalPosition | PhysicalPosition = someFunction(); // where someFunction returns either LogicalPosition or PhysicalPosition\n * const validPosition = new Position(position);\n * await invoke(\"do_something_with_position\", { position: validPosition });\n * ```\n *\n * @since 2.1.0\n */\nclass Position {\n    constructor(position) {\n        this.position = position;\n    }\n    toLogical(scaleFactor) {\n        return this.position instanceof LogicalPosition\n            ? this.position\n            : this.position.toLogical(scaleFactor);\n    }\n    toPhysical(scaleFactor) {\n        return this.position instanceof PhysicalPosition\n            ? this.position\n            : this.position.toPhysical(scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            [`${this.position.type}`]: {\n                x: this.position.x,\n                y: this.position.y\n            }\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n\nexport { LogicalPosition, LogicalSize, PhysicalPosition, PhysicalSize, Position, Size };\n", "import { invoke, transformCallback } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * The event system allows you to emit events to the backend and listen to events from it.\n *\n * This package is also accessible with `window.__TAURI__.event` when [`app.withGlobalTauri`](https://v2.tauri.app/reference/config/#withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n/**\n * @since 1.1.0\n */\nvar TauriEvent;\n(function (TauriEvent) {\n    TauriEvent[\"WINDOW_RESIZED\"] = \"tauri://resize\";\n    TauriEvent[\"WINDOW_MOVED\"] = \"tauri://move\";\n    TauriEvent[\"WINDOW_CLOSE_REQUESTED\"] = \"tauri://close-requested\";\n    TauriEvent[\"WINDOW_DESTROYED\"] = \"tauri://destroyed\";\n    TauriEvent[\"WINDOW_FOCUS\"] = \"tauri://focus\";\n    TauriEvent[\"WINDOW_BLUR\"] = \"tauri://blur\";\n    TauriEvent[\"WINDOW_SCALE_FACTOR_CHANGED\"] = \"tauri://scale-change\";\n    TauriEvent[\"WINDOW_THEME_CHANGED\"] = \"tauri://theme-changed\";\n    TauriEvent[\"WINDOW_CREATED\"] = \"tauri://window-created\";\n    TauriEvent[\"WEBVIEW_CREATED\"] = \"tauri://webview-created\";\n    TauriEvent[\"DRAG_ENTER\"] = \"tauri://drag-enter\";\n    TauriEvent[\"DRAG_OVER\"] = \"tauri://drag-over\";\n    TauriEvent[\"DRAG_DROP\"] = \"tauri://drag-drop\";\n    TauriEvent[\"DRAG_LEAVE\"] = \"tauri://drag-leave\";\n})(TauriEvent || (TauriEvent = {}));\n/**\n * Unregister the event listener associated with the given name and id.\n *\n * @ignore\n * @param event The event name\n * @param eventId Event identifier\n * @returns\n */\nasync function _unlisten(event, eventId) {\n    await invoke('plugin:event|unlisten', {\n        event,\n        eventId\n    });\n}\n/**\n * Listen to an emitted event to any {@link EventTarget|target}.\n *\n * @example\n * ```typescript\n * import { listen } from '@tauri-apps/api/event';\n * const unlisten = await listen<string>('error', (event) => {\n *   console.log(`Got error, payload: ${event.payload}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @param options Event listening options.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function listen(event, handler, options) {\n    var _a;\n    const target = typeof (options === null || options === void 0 ? void 0 : options.target) === 'string'\n        ? { kind: 'AnyLabel', label: options.target }\n        : ((_a = options === null || options === void 0 ? void 0 : options.target) !== null && _a !== void 0 ? _a : { kind: 'Any' });\n    return invoke('plugin:event|listen', {\n        event,\n        target,\n        handler: transformCallback(handler)\n    }).then((eventId) => {\n        return async () => _unlisten(event, eventId);\n    });\n}\n/**\n * Listens once to an emitted event to any {@link EventTarget|target}.\n *\n * @example\n * ```typescript\n * import { once } from '@tauri-apps/api/event';\n * interface LoadedPayload {\n *   loggedIn: boolean,\n *   token: string\n * }\n * const unlisten = await once<LoadedPayload>('loaded', (event) => {\n *   console.log(`App is loaded, loggedIn: ${event.payload.loggedIn}, token: ${event.payload.token}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @param options Event listening options.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function once(event, handler, options) {\n    return listen(event, (eventData) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        _unlisten(event, eventData.id);\n        handler(eventData);\n    }, options);\n}\n/**\n * Emits an event to all {@link EventTarget|targets}.\n *\n * @example\n * ```typescript\n * import { emit } from '@tauri-apps/api/event';\n * await emit('frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param payload Event payload.\n *\n * @since 1.0.0\n */\nasync function emit(event, payload) {\n    await invoke('plugin:event|emit', {\n        event,\n        payload\n    });\n}\n/**\n * Emits an event to all {@link EventTarget|targets} matching the given target.\n *\n * @example\n * ```typescript\n * import { emitTo } from '@tauri-apps/api/event';\n * await emitTo('main', 'frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param payload Event payload.\n *\n * @since 2.0.0\n */\nasync function emitTo(target, event, payload) {\n    const eventTarget = typeof target === 'string' ? { kind: 'AnyLabel', label: target } : target;\n    await invoke('plugin:event|emit_to', {\n        target: eventTarget,\n        event,\n        payload\n    });\n}\n\nexport { TauriEvent, emit, emitTo, listen, once };\n", "import { Resource, invoke } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** An RGBA Image in row-major order from top to bottom. */\nclass Image extends Resource {\n    /**\n     * Creates an Image from a resource ID. For internal use only.\n     *\n     * @ignore\n     */\n    constructor(rid) {\n        super(rid);\n    }\n    /** Creates a new Image using RGBA data, in row-major order from top to bottom, and with specified width and height. */\n    static async new(rgba, width, height) {\n        return invoke('plugin:image|new', {\n            rgba: transformImage(rgba),\n            width,\n            height\n        }).then((rid) => new Image(rid));\n    }\n    /**\n     * Creates a new image using the provided bytes by inferring the file format.\n     * If the format is known, prefer [@link Image.fromPngBytes] or [@link Image.fromIcoBytes].\n     *\n     * Only `ico` and `png` are supported (based on activated feature flag).\n     *\n     * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     */\n    static async fromBytes(bytes) {\n        return invoke('plugin:image|from_bytes', {\n            bytes: transformImage(bytes)\n        }).then((rid) => new Image(rid));\n    }\n    /**\n     * Creates a new image using the provided path.\n     *\n     * Only `ico` and `png` are supported (based on activated feature flag).\n     *\n     * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     */\n    static async fromPath(path) {\n        return invoke('plugin:image|from_path', { path }).then((rid) => new Image(rid));\n    }\n    /** Returns the RGBA data for this image, in row-major order from top to bottom.  */\n    async rgba() {\n        return invoke('plugin:image|rgba', {\n            rid: this.rid\n        }).then((buffer) => new Uint8Array(buffer));\n    }\n    /** Returns the size of this image.  */\n    async size() {\n        return invoke('plugin:image|size', { rid: this.rid });\n    }\n}\n/**\n * Transforms image from various types into a type acceptable by Rust.\n *\n * See [tauri::image::JsImage](https://docs.rs/tauri/2/tauri/image/enum.JsImage.html) for more information.\n * Note the API signature is not stable and might change.\n */\nfunction transformImage(image) {\n    const ret = image == null\n        ? null\n        : typeof image === 'string'\n            ? image\n            : image instanceof Image\n                ? image.rid\n                : image;\n    return ret;\n}\n\nexport { Image, transformImage };\n", "import { PhysicalPosition, PhysicalSize, Size, Position } from './dpi.js';\nexport { LogicalPosition, LogicalSize } from './dpi.js';\nimport { listen, once, emit, emitTo, TauriEvent } from './event.js';\nimport { invoke } from './core.js';\nimport { transformImage } from './image.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Provides APIs to create windows, communicate with other windows and manipulate the current window.\n *\n * #### Window events\n *\n * Events can be listened to using {@link Window.listen}:\n * ```typescript\n * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n * getCurrentWindow().listen(\"my-window-event\", ({ event, payload }) => { });\n * ```\n *\n * @module\n */\n/**\n * Attention type to request on a window.\n *\n * @since 1.0.0\n */\nvar UserAttentionType;\n(function (UserAttentionType) {\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon until the application is in focus.\n     * - **Windows:** Flashes both the window and the taskbar button until the application is in focus.\n     */\n    UserAttentionType[UserAttentionType[\"Critical\"] = 1] = \"Critical\";\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon once.\n     * - **Windows:** Flashes the taskbar button until the application is in focus.\n     */\n    UserAttentionType[UserAttentionType[\"Informational\"] = 2] = \"Informational\";\n})(UserAttentionType || (UserAttentionType = {}));\nclass CloseRequestedEvent {\n    constructor(event) {\n        this._preventDefault = false;\n        this.event = event.event;\n        this.id = event.id;\n    }\n    preventDefault() {\n        this._preventDefault = true;\n    }\n    isPreventDefault() {\n        return this._preventDefault;\n    }\n}\nvar ProgressBarStatus;\n(function (ProgressBarStatus) {\n    /**\n     * Hide progress bar.\n     */\n    ProgressBarStatus[\"None\"] = \"none\";\n    /**\n     * Normal state.\n     */\n    ProgressBarStatus[\"Normal\"] = \"normal\";\n    /**\n     * Indeterminate state. **Treated as Normal on Linux and macOS**\n     */\n    ProgressBarStatus[\"Indeterminate\"] = \"indeterminate\";\n    /**\n     * Paused state. **Treated as Normal on Linux**\n     */\n    ProgressBarStatus[\"Paused\"] = \"paused\";\n    /**\n     * Error state. **Treated as Normal on linux**\n     */\n    ProgressBarStatus[\"Error\"] = \"error\";\n})(ProgressBarStatus || (ProgressBarStatus = {}));\n/**\n * Get an instance of `Window` for the current window.\n *\n * @since 1.0.0\n */\nfunction getCurrentWindow() {\n    return new Window(window.__TAURI_INTERNALS__.metadata.currentWindow.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    });\n}\n/**\n * Gets a list of instances of `Window` for all available windows.\n *\n * @since 1.0.0\n */\nasync function getAllWindows() {\n    return invoke('plugin:window|get_all_windows').then((windows) => windows.map((w) => new Window(w, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    })));\n}\n/** @ignore */\n// events that are emitted right here instead of by the created window\nconst localTauriEvents = ['tauri://created', 'tauri://error'];\n/**\n * Create new window or get a handle to an existing one.\n *\n * Windows are identified by a *label*  a unique identifier that can be used to reference it later.\n * It may only contain alphanumeric characters `a-zA-Z` plus the following special characters `-`, `/`, `:` and `_`.\n *\n * @example\n * ```typescript\n * import { Window } from \"@tauri-apps/api/window\"\n *\n * const appWindow = new Window('theUniqueLabel');\n *\n * appWindow.once('tauri://created', function () {\n *  // window successfully created\n * });\n * appWindow.once('tauri://error', function (e) {\n *  // an error happened creating the window\n * });\n *\n * // emit an event to the backend\n * await appWindow.emit(\"some-event\", \"data\");\n * // listen to an event from the backend\n * const unlisten = await appWindow.listen(\"event-name\", e => {});\n * unlisten();\n * ```\n *\n * @since 2.0.0\n */\nclass Window {\n    /**\n     * Creates a new Window.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window';\n     * const appWindow = new Window('my-label');\n     * appWindow.once('tauri://created', function () {\n     *  // window successfully created\n     * });\n     * appWindow.once('tauri://error', function (e) {\n     *  // an error happened creating the window\n     * });\n     * ```\n     *\n     * @param label The unique window label. Must be alphanumeric: `a-zA-Z-/:_`.\n     * @returns The {@link Window} instance to communicate with the window.\n     */\n    constructor(label, options = {}) {\n        var _a;\n        this.label = label;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.listeners = Object.create(null);\n        // @ts-expect-error `skip` is not a public API so it is not defined in WindowOptions\n        if (!(options === null || options === void 0 ? void 0 : options.skip)) {\n            invoke('plugin:window|create', {\n                options: {\n                    ...options,\n                    parent: typeof options.parent === 'string'\n                        ? options.parent\n                        : (_a = options.parent) === null || _a === void 0 ? void 0 : _a.label,\n                    label\n                }\n            })\n                .then(async () => this.emit('tauri://created'))\n                .catch(async (e) => this.emit('tauri://error', e));\n        }\n    }\n    /**\n     * Gets the Window associated with the given label.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window';\n     * const mainWindow = Window.getByLabel('main');\n     * ```\n     *\n     * @param label The window label.\n     * @returns The Window instance to communicate with the window or null if the window doesn't exist.\n     */\n    static async getByLabel(label) {\n        var _a;\n        return (_a = (await getAllWindows()).find((w) => w.label === label)) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Get an instance of `Window` for the current window.\n     */\n    static getCurrent() {\n        return getCurrentWindow();\n    }\n    /**\n     * Gets a list of instances of `Window` for all available windows.\n     */\n    static async getAll() {\n        return getAllWindows();\n    }\n    /**\n     *  Gets the focused window.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window';\n     * const focusedWindow = Window.getFocusedWindow();\n     * ```\n     *\n     * @returns The Window instance or `undefined` if there is not any focused window.\n     */\n    static async getFocusedWindow() {\n        for (const w of await getAllWindows()) {\n            if (await w.isFocused()) {\n                return w;\n            }\n        }\n        return null;\n    }\n    /**\n     * Listen to an emitted event on this window.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const unlisten = await getCurrentWindow().listen<string>('state-changed', (event) => {\n     *   console.log(`Got error: ${payload}`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async listen(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return listen(event, handler, {\n            target: { kind: 'Window', label: this.label }\n        });\n    }\n    /**\n     * Listen to an emitted event on this window only once.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const unlisten = await getCurrentWindow().once<null>('initialized', (event) => {\n     *   console.log(`Window initialized!`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async once(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return once(event, handler, {\n            target: { kind: 'Window', label: this.label }\n        });\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets}.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().emit('window-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emit(event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line\n            for (const handler of this.listeners[event] || []) {\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return;\n        }\n        return emit(event, payload);\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets} matching the given target.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().emit('main', 'window-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emitTo(target, event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line security/detect-object-injection\n            for (const handler of this.listeners[event] || []) {\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return;\n        }\n        return emitTo(target, event, payload);\n    }\n    /** @ignore */\n    _handleTauriEvent(event, handler) {\n        if (localTauriEvents.includes(event)) {\n            if (!(event in this.listeners)) {\n                // eslint-disable-next-line\n                this.listeners[event] = [handler];\n            }\n            else {\n                // eslint-disable-next-line\n                this.listeners[event].push(handler);\n            }\n            return true;\n        }\n        return false;\n    }\n    // Getters\n    /**\n     * The scale factor that can be used to map physical pixels to logical pixels.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const factor = await getCurrentWindow().scaleFactor();\n     * ```\n     *\n     * @returns The window's monitor scale factor.\n     */\n    async scaleFactor() {\n        return invoke('plugin:window|scale_factor', {\n            label: this.label\n        });\n    }\n    /**\n     * The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const position = await getCurrentWindow().innerPosition();\n     * ```\n     *\n     * @returns The window's inner position.\n     */\n    async innerPosition() {\n        return invoke('plugin:window|inner_position', {\n            label: this.label\n        }).then((p) => new PhysicalPosition(p));\n    }\n    /**\n     * The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const position = await getCurrentWindow().outerPosition();\n     * ```\n     *\n     * @returns The window's outer position.\n     */\n    async outerPosition() {\n        return invoke('plugin:window|outer_position', {\n            label: this.label\n        }).then((p) => new PhysicalPosition(p));\n    }\n    /**\n     * The physical size of the window's client area.\n     * The client area is the content of the window, excluding the title bar and borders.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const size = await getCurrentWindow().innerSize();\n     * ```\n     *\n     * @returns The window's inner size.\n     */\n    async innerSize() {\n        return invoke('plugin:window|inner_size', {\n            label: this.label\n        }).then((s) => new PhysicalSize(s));\n    }\n    /**\n     * The physical size of the entire window.\n     * These dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const size = await getCurrentWindow().outerSize();\n     * ```\n     *\n     * @returns The window's outer size.\n     */\n    async outerSize() {\n        return invoke('plugin:window|outer_size', {\n            label: this.label\n        }).then((s) => new PhysicalSize(s));\n    }\n    /**\n     * Gets the window's current fullscreen state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const fullscreen = await getCurrentWindow().isFullscreen();\n     * ```\n     *\n     * @returns Whether the window is in fullscreen mode or not.\n     */\n    async isFullscreen() {\n        return invoke('plugin:window|is_fullscreen', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current minimized state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const minimized = await getCurrentWindow().isMinimized();\n     * ```\n     */\n    async isMinimized() {\n        return invoke('plugin:window|is_minimized', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current maximized state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const maximized = await getCurrentWindow().isMaximized();\n     * ```\n     *\n     * @returns Whether the window is maximized or not.\n     */\n    async isMaximized() {\n        return invoke('plugin:window|is_maximized', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current focus state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const focused = await getCurrentWindow().isFocused();\n     * ```\n     *\n     * @returns Whether the window is focused or not.\n     */\n    async isFocused() {\n        return invoke('plugin:window|is_focused', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current decorated state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const decorated = await getCurrentWindow().isDecorated();\n     * ```\n     *\n     * @returns Whether the window is decorated or not.\n     */\n    async isDecorated() {\n        return invoke('plugin:window|is_decorated', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current resizable state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const resizable = await getCurrentWindow().isResizable();\n     * ```\n     *\n     * @returns Whether the window is resizable or not.\n     */\n    async isResizable() {\n        return invoke('plugin:window|is_resizable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's native maximize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const maximizable = await getCurrentWindow().isMaximizable();\n     * ```\n     *\n     * @returns Whether the window's native maximize button is enabled or not.\n     */\n    async isMaximizable() {\n        return invoke('plugin:window|is_maximizable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's native minimize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const minimizable = await getCurrentWindow().isMinimizable();\n     * ```\n     *\n     * @returns Whether the window's native minimize button is enabled or not.\n     */\n    async isMinimizable() {\n        return invoke('plugin:window|is_minimizable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's native close button state.\n     *\n     * #### Platform-specific\n     *\n     * - **iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const closable = await getCurrentWindow().isClosable();\n     * ```\n     *\n     * @returns Whether the window's native close button is enabled or not.\n     */\n    async isClosable() {\n        return invoke('plugin:window|is_closable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current visible state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const visible = await getCurrentWindow().isVisible();\n     * ```\n     *\n     * @returns Whether the window is visible or not.\n     */\n    async isVisible() {\n        return invoke('plugin:window|is_visible', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current title.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const title = await getCurrentWindow().title();\n     * ```\n     */\n    async title() {\n        return invoke('plugin:window|title', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current theme.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Theme was introduced on macOS 10.14. Returns `light` on macOS 10.13 and below.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const theme = await getCurrentWindow().theme();\n     * ```\n     *\n     * @returns The window theme.\n     */\n    async theme() {\n        return invoke('plugin:window|theme', {\n            label: this.label\n        });\n    }\n    /**\n     * Whether the window is configured to be always on top of other windows or not.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const alwaysOnTop = await getCurrentWindow().isAlwaysOnTop();\n     * ```\n     *\n     * @returns Whether the window is visible or not.\n     */\n    async isAlwaysOnTop() {\n        return invoke('plugin:window|is_always_on_top', {\n            label: this.label\n        });\n    }\n    // Setters\n    /**\n     * Centers the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().center();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async center() {\n        return invoke('plugin:window|center', {\n            label: this.label\n        });\n    }\n    /**\n     *  Requests user attention to the window, this has no effect if the application\n     * is already focused. How requesting for user attention manifests is platform dependent,\n     * see `UserAttentionType` for details.\n     *\n     * Providing `null` will unset the request for user attention. Unsetting the request for\n     * user attention might not be done automatically by the WM when the window receives input.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** `null` has no effect.\n     * - **Linux:** Urgency levels have the same effect.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().requestUserAttention();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async requestUserAttention(requestType) {\n        let requestType_ = null;\n        if (requestType) {\n            if (requestType === UserAttentionType.Critical) {\n                requestType_ = { type: 'Critical' };\n            }\n            else {\n                requestType_ = { type: 'Informational' };\n            }\n        }\n        return invoke('plugin:window|request_user_attention', {\n            label: this.label,\n            value: requestType_\n        });\n    }\n    /**\n     * Updates the window resizable flag.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setResizable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setResizable(resizable) {\n        return invoke('plugin:window|set_resizable', {\n            label: this.label,\n            value: resizable\n        });\n    }\n    /**\n     * Enable or disable the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setEnabled(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setEnabled(enabled) {\n        return invoke('plugin:window|set_enabled', {\n            label: this.label,\n            value: enabled\n        });\n    }\n    /**\n     * Whether the window is enabled or disabled.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setEnabled(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async isEnabled() {\n        return invoke('plugin:window|is_enabled', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets whether the window's native maximize button is enabled or not.\n     * If resizable is set to false, this setting is ignored.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Disables the \"zoom\" button in the window titlebar, which is also used to enter fullscreen mode.\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMaximizable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMaximizable(maximizable) {\n        return invoke('plugin:window|set_maximizable', {\n            label: this.label,\n            value: maximizable\n        });\n    }\n    /**\n     * Sets whether the window's native minimize button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMinimizable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMinimizable(minimizable) {\n        return invoke('plugin:window|set_minimizable', {\n            label: this.label,\n            value: minimizable\n        });\n    }\n    /**\n     * Sets whether the window's native close button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** GTK+ will do its best to convince the window manager not to show a close button. Depending on the system, this function may not have any effect when called on a window that is already visible\n     * - **iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setClosable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setClosable(closable) {\n        return invoke('plugin:window|set_closable', {\n            label: this.label,\n            value: closable\n        });\n    }\n    /**\n     * Sets the window title.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setTitle('Tauri');\n     * ```\n     *\n     * @param title The new title\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setTitle(title) {\n        return invoke('plugin:window|set_title', {\n            label: this.label,\n            value: title\n        });\n    }\n    /**\n     * Maximizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().maximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async maximize() {\n        return invoke('plugin:window|maximize', {\n            label: this.label\n        });\n    }\n    /**\n     * Unmaximizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().unmaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async unmaximize() {\n        return invoke('plugin:window|unmaximize', {\n            label: this.label\n        });\n    }\n    /**\n     * Toggles the window maximized state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().toggleMaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async toggleMaximize() {\n        return invoke('plugin:window|toggle_maximize', {\n            label: this.label\n        });\n    }\n    /**\n     * Minimizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().minimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async minimize() {\n        return invoke('plugin:window|minimize', {\n            label: this.label\n        });\n    }\n    /**\n     * Unminimizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().unminimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async unminimize() {\n        return invoke('plugin:window|unminimize', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets the window visibility to true.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().show();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async show() {\n        return invoke('plugin:window|show', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets the window visibility to false.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().hide();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async hide() {\n        return invoke('plugin:window|hide', {\n            label: this.label\n        });\n    }\n    /**\n     * Closes the window.\n     *\n     * Note this emits a closeRequested event so you can intercept it. To force window close, use {@link Window.destroy}.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().close();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async close() {\n        return invoke('plugin:window|close', {\n            label: this.label\n        });\n    }\n    /**\n     * Destroys the window. Behaves like {@link Window.close} but forces the window close instead of emitting a closeRequested event.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().destroy();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async destroy() {\n        return invoke('plugin:window|destroy', {\n            label: this.label\n        });\n    }\n    /**\n     * Whether the window should have borders and bars.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setDecorations(false);\n     * ```\n     *\n     * @param decorations Whether the window should have borders and bars.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setDecorations(decorations) {\n        return invoke('plugin:window|set_decorations', {\n            label: this.label,\n            value: decorations\n        });\n    }\n    /**\n     * Whether or not the window should have shadow.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows:**\n     *   - `false` has no effect on decorated window, shadows are always ON.\n     *   - `true` will make undecorated window have a 1px white border,\n     * and on Windows 11, it will have a rounded corners.\n     * - **Linux:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setShadow(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setShadow(enable) {\n        return invoke('plugin:window|set_shadow', {\n            label: this.label,\n            value: enable\n        });\n    }\n    /**\n     * Set window effects.\n     */\n    async setEffects(effects) {\n        return invoke('plugin:window|set_effects', {\n            label: this.label,\n            value: effects\n        });\n    }\n    /**\n     * Clear any applied effects if possible.\n     */\n    async clearEffects() {\n        return invoke('plugin:window|set_effects', {\n            label: this.label,\n            value: null\n        });\n    }\n    /**\n     * Whether the window should always be on top of other windows.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setAlwaysOnTop(true);\n     * ```\n     *\n     * @param alwaysOnTop Whether the window should always be on top of other windows or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setAlwaysOnTop(alwaysOnTop) {\n        return invoke('plugin:window|set_always_on_top', {\n            label: this.label,\n            value: alwaysOnTop\n        });\n    }\n    /**\n     * Whether the window should always be below other windows.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setAlwaysOnBottom(true);\n     * ```\n     *\n     * @param alwaysOnBottom Whether the window should always be below other windows or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setAlwaysOnBottom(alwaysOnBottom) {\n        return invoke('plugin:window|set_always_on_bottom', {\n            label: this.label,\n            value: alwaysOnBottom\n        });\n    }\n    /**\n     * Prevents the window contents from being captured by other apps.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setContentProtected(true);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setContentProtected(protected_) {\n        return invoke('plugin:window|set_content_protected', {\n            label: this.label,\n            value: protected_\n        });\n    }\n    /**\n     * Resizes the window with a new inner size.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalSize } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSize(size) {\n        return invoke('plugin:window|set_size', {\n            label: this.label,\n            value: size instanceof Size ? size : new Size(size)\n        });\n    }\n    /**\n     * Sets the window minimum inner size. If the `size` argument is not provided, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, PhysicalSize } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMinSize(new PhysicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMinSize(size) {\n        return invoke('plugin:window|set_min_size', {\n            label: this.label,\n            value: size instanceof Size ? size : size ? new Size(size) : null\n        });\n    }\n    /**\n     * Sets the window maximum inner size. If the `size` argument is undefined, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalSize } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMaxSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMaxSize(size) {\n        return invoke('plugin:window|set_max_size', {\n            label: this.label,\n            value: size instanceof Size ? size : size ? new Size(size) : null\n        });\n    }\n    /**\n     * Sets the window inner size constraints.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setSizeConstraints({ minWidth: 300 });\n     * ```\n     *\n     * @param constraints The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSizeConstraints(constraints) {\n        function logical(pixel) {\n            return pixel ? { Logical: pixel } : null;\n        }\n        return invoke('plugin:window|set_size_constraints', {\n            label: this.label,\n            value: {\n                minWidth: logical(constraints === null || constraints === void 0 ? void 0 : constraints.minWidth),\n                minHeight: logical(constraints === null || constraints === void 0 ? void 0 : constraints.minHeight),\n                maxWidth: logical(constraints === null || constraints === void 0 ? void 0 : constraints.maxWidth),\n                maxHeight: logical(constraints === null || constraints === void 0 ? void 0 : constraints.maxHeight)\n            }\n        });\n    }\n    /**\n     * Sets the window outer position.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalPosition } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setPosition(new LogicalPosition(600, 500));\n     * ```\n     *\n     * @param position The new position, in logical or physical pixels.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setPosition(position) {\n        return invoke('plugin:window|set_position', {\n            label: this.label,\n            value: position instanceof Position ? position : new Position(position)\n        });\n    }\n    /**\n     * Sets the window fullscreen state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setFullscreen(true);\n     * ```\n     *\n     * @param fullscreen Whether the window should go to fullscreen or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFullscreen(fullscreen) {\n        return invoke('plugin:window|set_fullscreen', {\n            label: this.label,\n            value: fullscreen\n        });\n    }\n    /**\n     * Bring the window to front and focus.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setFocus();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFocus() {\n        return invoke('plugin:window|set_focus', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets the window icon.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setIcon('/tauri/awesome.png');\n     * ```\n     *\n     * Note that you may need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     *\n     * @param icon Icon bytes or path to the icon file.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setIcon(icon) {\n        return invoke('plugin:window|set_icon', {\n            label: this.label,\n            value: transformImage(icon)\n        });\n    }\n    /**\n     * Whether the window icon should be hidden from the taskbar or not.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Unsupported.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setSkipTaskbar(true);\n     * ```\n     *\n     * @param skip true to hide window icon, false to show it.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSkipTaskbar(skip) {\n        return invoke('plugin:window|set_skip_taskbar', {\n            label: this.label,\n            value: skip\n        });\n    }\n    /**\n     * Grabs the cursor, preventing it from leaving the window.\n     *\n     * There's no guarantee that the cursor will be hidden. You should\n     * hide it by yourself if you want so.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** Unsupported.\n     * - **macOS:** This locks the cursor in a fixed location, which looks visually awkward.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorGrab(true);\n     * ```\n     *\n     * @param grab `true` to grab the cursor icon, `false` to release it.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorGrab(grab) {\n        return invoke('plugin:window|set_cursor_grab', {\n            label: this.label,\n            value: grab\n        });\n    }\n    /**\n     * Modifies the cursor's visibility.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows:** The cursor is only hidden within the confines of the window.\n     * - **macOS:** The cursor is hidden as long as the window has input focus, even if the cursor is\n     *   outside of the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorVisible(false);\n     * ```\n     *\n     * @param visible If `false`, this will hide the cursor. If `true`, this will show the cursor.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorVisible(visible) {\n        return invoke('plugin:window|set_cursor_visible', {\n            label: this.label,\n            value: visible\n        });\n    }\n    /**\n     * Modifies the cursor icon of the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorIcon('help');\n     * ```\n     *\n     * @param icon The new cursor icon.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorIcon(icon) {\n        return invoke('plugin:window|set_cursor_icon', {\n            label: this.label,\n            value: icon\n        });\n    }\n    /**\n     * Sets the window background color.\n     *\n     * #### Platform-specific:\n     *\n     * - **Windows:** alpha channel is ignored.\n     * - **iOS / Android:** Unsupported.\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.1.0\n     */\n    async setBackgroundColor(color) {\n        return invoke('plugin:window|set_background_color', { color });\n    }\n    /**\n     * Changes the position of the cursor in window coordinates.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalPosition } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorPosition(new LogicalPosition(600, 300));\n     * ```\n     *\n     * @param position The new cursor position.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorPosition(position) {\n        return invoke('plugin:window|set_cursor_position', {\n            label: this.label,\n            value: position instanceof Position ? position : new Position(position)\n        });\n    }\n    /**\n     * Changes the cursor events behavior.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setIgnoreCursorEvents(true);\n     * ```\n     *\n     * @param ignore `true` to ignore the cursor events; `false` to process them as usual.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setIgnoreCursorEvents(ignore) {\n        return invoke('plugin:window|set_ignore_cursor_events', {\n            label: this.label,\n            value: ignore\n        });\n    }\n    /**\n     * Starts dragging the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().startDragging();\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async startDragging() {\n        return invoke('plugin:window|start_dragging', {\n            label: this.label\n        });\n    }\n    /**\n     * Starts resize-dragging the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().startResizeDragging();\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async startResizeDragging(direction) {\n        return invoke('plugin:window|start_resize_dragging', {\n            label: this.label,\n            value: direction\n        });\n    }\n    /**\n     * Sets the badge count. It is app wide and not specific to this window.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows**: Unsupported. Use @{linkcode Window.setOverlayIcon} instead.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setBadgeCount(5);\n     * ```\n     *\n     * @param count The badge count. Use `undefined` to remove the badge.\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setBadgeCount(count) {\n        return invoke('plugin:window|set_badge_count', {\n            label: this.label,\n            value: count\n        });\n    }\n    /**\n     * Sets the badge cont **macOS only**.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setBadgeLabel(\"Hello\");\n     * ```\n     *\n     * @param label The badge label. Use `undefined` to remove the badge.\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setBadgeLabel(label) {\n        return invoke('plugin:window|set_badge_label', {\n            label: this.label,\n            value: label\n        });\n    }\n    /**\n     * Sets the overlay icon. **Windows only**\n     * The overlay icon can be set for every window.\n     *\n     *\n     * Note that you may need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     *\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setOverlayIcon(\"/tauri/awesome.png\");\n     * ```\n     *\n     * @param icon Icon bytes or path to the icon file. Use `undefined` to remove the overlay icon.\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setOverlayIcon(icon) {\n        return invoke('plugin:window|set_overlay_icon', {\n            label: this.label,\n            value: icon ? transformImage(icon) : undefined\n        });\n    }\n    /**\n     * Sets the taskbar progress state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / macOS**: Progress bar is app-wide and not specific to this window.\n     * - **Linux**: Only supported desktop environments with `libunity` (e.g. GNOME).\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, ProgressBarStatus } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setProgressBar({\n     *   status: ProgressBarStatus.Normal,\n     *   progress: 50,\n     * });\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setProgressBar(state) {\n        return invoke('plugin:window|set_progress_bar', {\n            label: this.label,\n            value: state\n        });\n    }\n    /**\n     * Sets whether the window should be visible on all workspaces or virtual desktops.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows / iOS / Android:** Unsupported.\n     *\n     * @since 2.0.0\n     */\n    async setVisibleOnAllWorkspaces(visible) {\n        return invoke('plugin:window|set_visible_on_all_workspaces', {\n            label: this.label,\n            value: visible\n        });\n    }\n    /**\n     * Sets the title bar style. **macOS only**.\n     *\n     * @since 2.0.0\n     */\n    async setTitleBarStyle(style) {\n        return invoke('plugin:window|set_title_bar_style', {\n            label: this.label,\n            value: style\n        });\n    }\n    /**\n     * Set window theme, pass in `null` or `undefined` to follow system theme\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / macOS**: Theme is app-wide and not specific to this window.\n     * - **iOS / Android:** Unsupported.\n     *\n     * @since 2.0.0\n     */\n    async setTheme(theme) {\n        return invoke('plugin:window|set_theme', {\n            label: this.label,\n            value: theme\n        });\n    }\n    // Listeners\n    /**\n     * Listen to window resize.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onResized(({ payload: size }) => {\n     *  console.log('Window resized', size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onResized(handler) {\n        return this.listen(TauriEvent.WINDOW_RESIZED, (e) => {\n            e.payload = new PhysicalSize(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window move.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onMoved(({ payload: position }) => {\n     *  console.log('Window moved', position);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onMoved(handler) {\n        return this.listen(TauriEvent.WINDOW_MOVED, (e) => {\n            e.payload = new PhysicalPosition(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window close requested. Emitted when the user requests to closes the window.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * import { confirm } from '@tauri-apps/api/dialog';\n     * const unlisten = await getCurrentWindow().onCloseRequested(async (event) => {\n     *   const confirmed = await confirm('Are you sure?');\n     *   if (!confirmed) {\n     *     // user did not confirm closing the window; let's prevent it\n     *     event.preventDefault();\n     *   }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onCloseRequested(handler) {\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        return this.listen(TauriEvent.WINDOW_CLOSE_REQUESTED, async (event) => {\n            const evt = new CloseRequestedEvent(event);\n            await handler(evt);\n            if (!evt.isPreventDefault()) {\n                await this.destroy();\n            }\n        });\n    }\n    /**\n     * Listen to a file drop event.\n     * The listener is triggered when the user hovers the selected files on the webview,\n     * drops the files or cancels the operation.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/webview\";\n     * const unlisten = await getCurrentWindow().onDragDropEvent((event) => {\n     *  if (event.payload.type === 'over') {\n     *    console.log('User hovering', event.payload.position);\n     *  } else if (event.payload.type === 'drop') {\n     *    console.log('User dropped', event.payload.paths);\n     *  } else {\n     *    console.log('File drop cancelled');\n     *  }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onDragDropEvent(handler) {\n        const unlistenDrag = await this.listen(TauriEvent.DRAG_ENTER, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'enter',\n                    paths: event.payload.paths,\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDragOver = await this.listen(TauriEvent.DRAG_OVER, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'over',\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDrop = await this.listen(TauriEvent.DRAG_DROP, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'drop',\n                    paths: event.payload.paths,\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenCancel = await this.listen(TauriEvent.DRAG_LEAVE, (event) => {\n            handler({ ...event, payload: { type: 'leave' } });\n        });\n        return () => {\n            unlistenDrag();\n            unlistenDrop();\n            unlistenDragOver();\n            unlistenCancel();\n        };\n    }\n    /**\n     * Listen to window focus change.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onFocusChanged(({ payload: focused }) => {\n     *  console.log('Focus changed, window is focused? ' + focused);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onFocusChanged(handler) {\n        const unlistenFocus = await this.listen(TauriEvent.WINDOW_FOCUS, (event) => {\n            handler({ ...event, payload: true });\n        });\n        const unlistenBlur = await this.listen(TauriEvent.WINDOW_BLUR, (event) => {\n            handler({ ...event, payload: false });\n        });\n        return () => {\n            unlistenFocus();\n            unlistenBlur();\n        };\n    }\n    /**\n     * Listen to window scale change. Emitted when the window's scale factor has changed.\n     * The following user actions can cause DPI changes:\n     * - Changing the display's resolution.\n     * - Changing the display's scale factor (e.g. in Control Panel on Windows).\n     * - Moving the window to a display with a different scale factor.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onScaleChanged(({ payload }) => {\n     *  console.log('Scale changed', payload.scaleFactor, payload.size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onScaleChanged(handler) {\n        return this.listen(TauriEvent.WINDOW_SCALE_FACTOR_CHANGED, handler);\n    }\n    /**\n     * Listen to the system theme change.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onThemeChanged(({ payload: theme }) => {\n     *  console.log('New theme: ' + theme);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onThemeChanged(handler) {\n        return this.listen(TauriEvent.WINDOW_THEME_CHANGED, handler);\n    }\n}\n/**\n * Background throttling policy\n *\n * @since 2.0.0\n */\nvar BackgroundThrottlingPolicy;\n(function (BackgroundThrottlingPolicy) {\n    BackgroundThrottlingPolicy[\"Disabled\"] = \"disabled\";\n    BackgroundThrottlingPolicy[\"Throttle\"] = \"throttle\";\n    BackgroundThrottlingPolicy[\"Suspend\"] = \"suspend\";\n})(BackgroundThrottlingPolicy || (BackgroundThrottlingPolicy = {}));\n/**\n * Platform-specific window effects\n *\n * @since 2.0.0\n */\nvar Effect;\n(function (Effect) {\n    /**\n     * A default material appropriate for the view's effectiveAppearance.  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. You should instead choose an appropriate semantic material.\n     */\n    Effect[\"AppearanceBased\"] = \"appearanceBased\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"Light\"] = \"light\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"Dark\"] = \"dark\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"MediumLight\"] = \"mediumLight\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"UltraDark\"] = \"ultraDark\";\n    /**\n     *  **macOS 10.10+**\n     */\n    Effect[\"Titlebar\"] = \"titlebar\";\n    /**\n     *  **macOS 10.10+**\n     */\n    Effect[\"Selection\"] = \"selection\";\n    /**\n     *  **macOS 10.11+**\n     */\n    Effect[\"Menu\"] = \"menu\";\n    /**\n     *  **macOS 10.11+**\n     */\n    Effect[\"Popover\"] = \"popover\";\n    /**\n     *  **macOS 10.11+**\n     */\n    Effect[\"Sidebar\"] = \"sidebar\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"HeaderView\"] = \"headerView\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"Sheet\"] = \"sheet\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"WindowBackground\"] = \"windowBackground\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"HudWindow\"] = \"hudWindow\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"FullScreenUI\"] = \"fullScreenUI\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"Tooltip\"] = \"tooltip\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"ContentBackground\"] = \"contentBackground\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"UnderWindowBackground\"] = \"underWindowBackground\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"UnderPageBackground\"] = \"underPageBackground\";\n    /**\n     *  **Windows 11 Only**\n     */\n    Effect[\"Mica\"] = \"mica\";\n    /**\n     * **Windows 7/10/11(22H1) Only**\n     *\n     * #### Notes\n     *\n     * This effect has bad performance when resizing/dragging the window on Windows 11 build 22621.\n     */\n    Effect[\"Blur\"] = \"blur\";\n    /**\n     * **Windows 10/11**\n     *\n     * #### Notes\n     *\n     * This effect has bad performance when resizing/dragging the window on Windows 10 v1903+ and Windows 11 build 22000.\n     */\n    Effect[\"Acrylic\"] = \"acrylic\";\n    /**\n     * Tabbed effect that matches the system dark perefence **Windows 11 Only**\n     */\n    Effect[\"Tabbed\"] = \"tabbed\";\n    /**\n     * Tabbed effect with dark mode but only if dark mode is enabled on the system **Windows 11 Only**\n     */\n    Effect[\"TabbedDark\"] = \"tabbedDark\";\n    /**\n     * Tabbed effect with light mode **Windows 11 Only**\n     */\n    Effect[\"TabbedLight\"] = \"tabbedLight\";\n})(Effect || (Effect = {}));\n/**\n * Window effect state **macOS only**\n *\n * @see https://developer.apple.com/documentation/appkit/nsvisualeffectview/state\n *\n * @since 2.0.0\n */\nvar EffectState;\n(function (EffectState) {\n    /**\n     *  Make window effect state follow the window's active state **macOS only**\n     */\n    EffectState[\"FollowsWindowActiveState\"] = \"followsWindowActiveState\";\n    /**\n     *  Make window effect state always active **macOS only**\n     */\n    EffectState[\"Active\"] = \"active\";\n    /**\n     *  Make window effect state always inactive **macOS only**\n     */\n    EffectState[\"Inactive\"] = \"inactive\";\n})(EffectState || (EffectState = {}));\nfunction mapMonitor(m) {\n    return m === null\n        ? null\n        : {\n            name: m.name,\n            scaleFactor: m.scaleFactor,\n            position: new PhysicalPosition(m.position),\n            size: new PhysicalSize(m.size)\n        };\n}\n/**\n * Returns the monitor on which the window currently resides.\n * Returns `null` if current monitor can't be detected.\n * @example\n * ```typescript\n * import { currentMonitor } from '@tauri-apps/api/window';\n * const monitor = currentMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function currentMonitor() {\n    return invoke('plugin:window|current_monitor').then(mapMonitor);\n}\n/**\n * Returns the primary monitor of the system.\n * Returns `null` if it can't identify any monitor as a primary one.\n * @example\n * ```typescript\n * import { primaryMonitor } from '@tauri-apps/api/window';\n * const monitor = primaryMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function primaryMonitor() {\n    return invoke('plugin:window|primary_monitor').then(mapMonitor);\n}\n/**\n * Returns the monitor that contains the given point. Returns `null` if can't find any.\n * @example\n * ```typescript\n * import { monitorFromPoint } from '@tauri-apps/api/window';\n * const monitor = monitorFromPoint();\n * ```\n *\n * @since 1.0.0\n */\nasync function monitorFromPoint(x, y) {\n    return invoke('plugin:window|monitor_from_point', {\n        x,\n        y\n    }).then(mapMonitor);\n}\n/**\n * Returns the list of all the monitors available on the system.\n * @example\n * ```typescript\n * import { availableMonitors } from '@tauri-apps/api/window';\n * const monitors = availableMonitors();\n * ```\n *\n * @since 1.0.0\n */\nasync function availableMonitors() {\n    return invoke('plugin:window|available_monitors').then((ms) => ms.map(mapMonitor));\n}\n/**\n * Get the cursor position relative to the top-left hand corner of the desktop.\n *\n * Note that the top-left hand corner of the desktop is not necessarily the same as the screen.\n * If the user uses a desktop with multiple monitors,\n * the top-left hand corner of the desktop is the top-left hand corner of the main monitor on Windows and macOS\n * or the top-left of the leftmost monitor on X11.\n *\n * The coordinates can be negative if the top-left hand corner of the window is outside of the visible screen region.\n */\nasync function cursorPosition() {\n    return invoke('plugin:window|cursor_position').then((v) => new PhysicalPosition(v));\n}\n\nexport { CloseRequestedEvent, Effect, EffectState, PhysicalPosition, PhysicalSize, ProgressBarStatus, UserAttentionType, Window, availableMonitors, currentMonitor, cursorPosition, getAllWindows, getCurrentWindow, monitorFromPoint, primaryMonitor };\n", "import { listen } from '@tauri-apps/api/event';\nimport { Resource, invoke } from '@tauri-apps/api/core';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Create a new Store or load the existing store with the path.\n *\n * @example\n * ```typescript\n * import { Store } from '@tauri-apps/api/store';\n * const store = await Store.load('store.json');\n * ```\n *\n * @param path Path to save the store in `app_data_dir`\n * @param options Store configuration options\n */\nasync function load(path, options) {\n    return await Store.load(path, options);\n}\n/**\n * Gets an already loaded store.\n *\n * If the store is not loaded, returns `null`. In this case you must {@link Store.load load} it.\n *\n * This function is more useful when you already know the store is loaded\n * and just need to access its instance. Prefer {@link Store.load} otherwise.\n *\n * @example\n * ```typescript\n * import { getStore } from '@tauri-apps/api/store';\n * const store = await getStore('store.json');\n * ```\n *\n * @param path Path of the store.\n */\nasync function getStore(path) {\n    return await Store.get(path);\n}\n/**\n * A lazy loaded key-value store persisted by the backend layer.\n */\nclass LazyStore {\n    get store() {\n        if (!this._store) {\n            this._store = load(this.path, this.options);\n        }\n        return this._store;\n    }\n    /**\n     * Note that the options are not applied if someone else already created the store\n     * @param path Path to save the store in `app_data_dir`\n     * @param options Store configuration options\n     */\n    constructor(path, options) {\n        this.path = path;\n        this.options = options;\n    }\n    /**\n     * Init/load the store if it's not loaded already\n     */\n    async init() {\n        await this.store;\n    }\n    async set(key, value) {\n        return (await this.store).set(key, value);\n    }\n    async get(key) {\n        return (await this.store).get(key);\n    }\n    async has(key) {\n        return (await this.store).has(key);\n    }\n    async delete(key) {\n        return (await this.store).delete(key);\n    }\n    async clear() {\n        await (await this.store).clear();\n    }\n    async reset() {\n        await (await this.store).reset();\n    }\n    async keys() {\n        return (await this.store).keys();\n    }\n    async values() {\n        return (await this.store).values();\n    }\n    async entries() {\n        return (await this.store).entries();\n    }\n    async length() {\n        return (await this.store).length();\n    }\n    async reload() {\n        await (await this.store).reload();\n    }\n    async save() {\n        await (await this.store).save();\n    }\n    async onKeyChange(key, cb) {\n        return (await this.store).onKeyChange(key, cb);\n    }\n    async onChange(cb) {\n        return (await this.store).onChange(cb);\n    }\n    async close() {\n        if (this._store) {\n            await (await this._store).close();\n        }\n    }\n}\n/**\n * A key-value store persisted by the backend layer.\n */\nclass Store extends Resource {\n    constructor(rid) {\n        super(rid);\n    }\n    /**\n     * Create a new Store or load the existing store with the path.\n     *\n     * @example\n     * ```typescript\n     * import { Store } from '@tauri-apps/api/store';\n     * const store = await Store.load('store.json');\n     * ```\n     *\n     * @param path Path to save the store in `app_data_dir`\n     * @param options Store configuration options\n     */\n    static async load(path, options) {\n        const rid = await invoke('plugin:store|load', {\n            path,\n            ...options\n        });\n        return new Store(rid);\n    }\n    /**\n     * Gets an already loaded store.\n     *\n     * If the store is not loaded, returns `null`. In this case you must {@link Store.load load} it.\n     *\n     * This function is more useful when you already know the store is loaded\n     * and just need to access its instance. Prefer {@link Store.load} otherwise.\n     *\n     * @example\n     * ```typescript\n     * import { Store } from '@tauri-apps/api/store';\n     * let store = await Store.get('store.json');\n     * if (!store) {\n     *   store = await Store.load('store.json');\n     * }\n     * ```\n     *\n     * @param path Path of the store.\n     */\n    static async get(path) {\n        return await invoke('plugin:store|get_store', { path }).then((rid) => (rid ? new Store(rid) : null));\n    }\n    async set(key, value) {\n        await invoke('plugin:store|set', {\n            rid: this.rid,\n            key,\n            value\n        });\n    }\n    async get(key) {\n        const [value, exists] = await invoke('plugin:store|get', {\n            rid: this.rid,\n            key\n        });\n        return exists ? value : undefined;\n    }\n    async has(key) {\n        return await invoke('plugin:store|has', {\n            rid: this.rid,\n            key\n        });\n    }\n    async delete(key) {\n        return await invoke('plugin:store|delete', {\n            rid: this.rid,\n            key\n        });\n    }\n    async clear() {\n        await invoke('plugin:store|clear', { rid: this.rid });\n    }\n    async reset() {\n        await invoke('plugin:store|reset', { rid: this.rid });\n    }\n    async keys() {\n        return await invoke('plugin:store|keys', { rid: this.rid });\n    }\n    async values() {\n        return await invoke('plugin:store|values', { rid: this.rid });\n    }\n    async entries() {\n        return await invoke('plugin:store|entries', { rid: this.rid });\n    }\n    async length() {\n        return await invoke('plugin:store|length', { rid: this.rid });\n    }\n    async reload() {\n        await invoke('plugin:store|reload', { rid: this.rid });\n    }\n    async save() {\n        await invoke('plugin:store|save', { rid: this.rid });\n    }\n    async onKeyChange(key, cb) {\n        return await listen('store://change', (event) => {\n            if (event.payload.resourceId === this.rid && event.payload.key === key) {\n                cb(event.payload.exists ? event.payload.value : undefined);\n            }\n        });\n    }\n    async onChange(cb) {\n        return await listen('store://change', (event) => {\n            if (event.payload.resourceId === this.rid) {\n                cb(event.payload.key, event.payload.exists ? event.payload.value : undefined);\n            }\n        });\n    }\n}\n\nexport { LazyStore, Store, getStore, load };\n", "import { invoke } from '@tauri-apps/api/core';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Open files and URLs using their default application.\n *\n * ## Security\n *\n * This API has a scope configuration that forces you to restrict the files and urls to be opened.\n *\n * ### Restricting access to the {@link open | `open`} API\n *\n * On the configuration object, `open: true` means that the {@link open} API can be used with any URL,\n * as the argument is validated with the `^((mailto:\\w+)|(tel:\\w+)|(https?://\\w+)).+` regex.\n * You can change that regex by changing the boolean value to a string, e.g. `open: ^https://github.com/`.\n *\n * @module\n */\n/**\n * Opens a url with the system's default app, or the one specified with {@linkcode openWith}.\n *\n * @example\n * ```typescript\n * import { openUrl } from '@tauri-apps/plugin-opener';\n *\n * // opens the given URL on the default browser:\n * await openUrl('https://github.com/tauri-apps/tauri');\n * // opens the given URL using `firefox`:\n * await openUrl('https://github.com/tauri-apps/tauri', 'firefox');\n * ```\n *\n * @param url The URL to open.\n * @param openWith The app to open the URL with. If not specified, defaults to the system default application for the specified url type.\n *\n * @since 2.0.0\n */\nasync function openUrl(url, openWith) {\n    await invoke('plugin:opener|open_url', {\n        url,\n        with: openWith\n    });\n}\n/**\n * Opens a path with the system's default app, or the one specified with {@linkcode openWith}.\n *\n * @example\n * ```typescript\n * import { openPath } from '@tauri-apps/plugin-opener';\n *\n * // opens a file using the default program:\n * await openPath('/path/to/file');\n * // opens a file using `vlc` command on Windows.\n * await openPath('C:/path/to/file', 'vlc');\n * ```\n *\n * @param path The path to open.\n * @param openWith The app to open the path with. If not specified, defaults to the system default application for the specified path type.\n *\n * @since 2.0.0\n */\nasync function openPath(path, openWith) {\n    await invoke('plugin:opener|open_path', {\n        path,\n        with: openWith\n    });\n}\n/**\n * Reveal a path with the system's default explorer.\n *\n * #### Platform-specific:\n *\n * - **Android / iOS:** Unsupported.\n *\n * @example\n * ```typescript\n * import { revealItemInDir } from '@tauri-apps/plugin-opener';\n * await revealItemInDir('/path/to/file');\n * ```\n *\n * @param path The path to reveal.\n *\n * @since 2.0.0\n */\nasync function revealItemInDir(path) {\n    return invoke('plugin:opener|reveal_item_in_dir', { path });\n}\n\nexport { openPath, openUrl, revealItemInDir };\n", "import { invoke } from '@tauri-apps/api/core';\nimport { transformImage, Image } from '@tauri-apps/api/image';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Read and write to the system clipboard.\n *\n * @module\n */\n/**\n * Writes plain text to the clipboard.\n * @example\n * ```typescript\n * import { writeText, readText } from '@tauri-apps/plugin-clipboard-manager';\n * await writeText('Tauri is awesome!');\n * assert(await readText(), 'Tauri is awesome!');\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 2.0.0\n */\nasync function writeText(text, opts) {\n    await invoke('plugin:clipboard-manager|write_text', {\n        label: opts?.label,\n        text\n    });\n}\n/**\n * Gets the clipboard content as plain text.\n * @example\n * ```typescript\n * import { readText } from '@tauri-apps/plugin-clipboard-manager';\n * const clipboardText = await readText();\n * ```\n * @since 2.0.0\n */\nasync function readText() {\n    return await invoke('plugin:clipboard-manager|read_text');\n}\n/**\n * Writes image buffer to the clipboard.\n *\n * #### Platform-specific\n *\n * - **Android / iOS:** Not supported.\n *\n * @example\n * ```typescript\n * import { writeImage } from '@tauri-apps/plugin-clipboard-manager';\n * const buffer = [\n *   // A red pixel\n *   255, 0, 0, 255,\n *\n *  // A green pixel\n *   0, 255, 0, 255,\n * ];\n * await writeImage(buffer);\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 2.0.0\n */\nasync function writeImage(image) {\n    await invoke('plugin:clipboard-manager|write_image', {\n        image: transformImage(image)\n    });\n}\n/**\n * Gets the clipboard content as Uint8Array image.\n *\n * #### Platform-specific\n *\n * - **Android / iOS:** Not supported.\n *\n * @example\n * ```typescript\n * import { readImage } from '@tauri-apps/plugin-clipboard-manager';\n *\n * const clipboardImage = await readImage();\n * const blob = new Blob([await clipboardImage.rgba()], { type: 'image' })\n * const url = URL.createObjectURL(blob)\n * ```\n * @since 2.0.0\n */\nasync function readImage() {\n    return await invoke('plugin:clipboard-manager|read_image').then((rid) => new Image(rid));\n}\n/**\n * * Writes HTML or fallbacks to write provided plain text to the clipboard.\n *\n * #### Platform-specific\n *\n * - **Android / iOS:** Not supported.\n *\n * @example\n * ```typescript\n * import { writeHtml } from '@tauri-apps/plugin-clipboard-manager';\n * await writeHtml('<h1>Tauri is awesome!</h1>', 'plaintext');\n * // The following will write \"<h1>Tauri is awesome</h1>\" as plain text\n * await writeHtml('<h1>Tauri is awesome!</h1>', '<h1>Tauri is awesome</h1>');\n * // we can read html data only as a string so there's just readText(), no readHtml()\n * assert(await readText(), '<h1>Tauri is awesome!</h1>');\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 2.0.0\n */\nasync function writeHtml(html, altText) {\n    await invoke('plugin:clipboard-manager|write_html', {\n        html,\n        altText\n    });\n}\n/**\n * Clears the clipboard.\n *\n * #### Platform-specific\n *\n * - **Android:** Only supported on SDK 28+. For older releases we write an empty string to the clipboard instead.\n *\n * @example\n * ```typescript\n * import { clear } from '@tauri-apps/plugin-clipboard-manager';\n * await clear();\n * ```\n * @since 2.0.0\n */\nasync function clear() {\n    await invoke('plugin:clipboard-manager|clear');\n}\n\nexport { clear, readImage, readText, writeHtml, writeImage, writeText };\n", "// AUTO-GENERATED by yerpc-derive\n\nimport * as T from \"./types.js\"\nimport * as RPC from \"./jsonrpc.js\"\n\ntype RequestMethod = (method: string, params?: RPC.Params) => Promise<unknown>;\ntype NotificationMethod = (method: string, params?: RPC.Params) => void;\n\ninterface Transport {\n  request: RequestMethod,\n  notification: NotificationMethod\n}\n\nexport class RawClient {\n  constructor(private _transport: Transport) {}\n\n  /**\n   * Test function.\n   */\n  public sleep(delay: T.F64): Promise<void> {\n    return (this._transport.request('sleep', [delay] as RPC.Params)) as Promise<void>;\n  }\n\n  /**\n   * Checks if an email address is valid.\n   */\n  public checkEmailValidity(email: string): Promise<boolean> {\n    return (this._transport.request('check_email_validity', [email] as RPC.Params)) as Promise<boolean>;\n  }\n\n  /**\n   * Returns general system info.\n   */\n  public getSystemInfo(): Promise<Record<string, string>> {\n    return (this._transport.request('get_system_info', [] as RPC.Params)) as Promise<Record<string, string>>;\n  }\n\n  /**\n   * Get the next event.\n   */\n  public getNextEvent(): Promise<T.Event> {\n    return (this._transport.request('get_next_event', [] as RPC.Params)) as Promise<T.Event>;\n  }\n\n\n  public addAccount(): Promise<T.U32> {\n    return (this._transport.request('add_account', [] as RPC.Params)) as Promise<T.U32>;\n  }\n\n  /**\n   * Imports/migrated an existing account from a database path into this account manager.\n   * Returns the ID of new account.\n   */\n  public migrateAccount(pathToDb: string): Promise<T.U32> {\n    return (this._transport.request('migrate_account', [pathToDb] as RPC.Params)) as Promise<T.U32>;\n  }\n\n\n  public removeAccount(accountId: T.U32): Promise<null> {\n    return (this._transport.request('remove_account', [accountId] as RPC.Params)) as Promise<null>;\n  }\n\n\n  public getAllAccountIds(): Promise<(T.U32)[]> {\n    return (this._transport.request('get_all_account_ids', [] as RPC.Params)) as Promise<(T.U32)[]>;\n  }\n\n  /**\n   * Select account in account manager, this saves the last used account to accounts.toml\n   */\n  public selectAccount(id: T.U32): Promise<null> {\n    return (this._transport.request('select_account', [id] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Get the selected account from the account manager (on startup it is read from accounts.toml)\n   */\n  public getSelectedAccountId(): Promise<(T.U32 | null)> {\n    return (this._transport.request('get_selected_account_id', [] as RPC.Params)) as Promise<(T.U32 | null)>;\n  }\n\n  /**\n   * Get a list of all configured accounts.\n   */\n  public getAllAccounts(): Promise<(T.Account)[]> {\n    return (this._transport.request('get_all_accounts', [] as RPC.Params)) as Promise<(T.Account)[]>;\n  }\n\n  /**\n   * Starts background tasks for all accounts.\n   */\n  public startIoForAllAccounts(): Promise<null> {\n    return (this._transport.request('start_io_for_all_accounts', [] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Stops background tasks for all accounts.\n   */\n  public stopIoForAllAccounts(): Promise<null> {\n    return (this._transport.request('stop_io_for_all_accounts', [] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Performs a background fetch for all accounts in parallel with a timeout.\n   *\n   * The `AccountsBackgroundFetchDone` event is emitted at the end even in case of timeout.\n   * Process all events until you get this one and you can safely return to the background\n   * without forgetting to create notifications caused by timing race conditions.\n   */\n  public accountsBackgroundFetch(timeoutInSeconds: T.F64): Promise<null> {\n    return (this._transport.request('accounts_background_fetch', [timeoutInSeconds] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Starts background tasks for a single account.\n   */\n  public startIo(accountId: T.U32): Promise<null> {\n    return (this._transport.request('start_io', [accountId] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Stops background tasks for a single account.\n   */\n  public stopIo(accountId: T.U32): Promise<null> {\n    return (this._transport.request('stop_io', [accountId] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Get top-level info for an account.\n   */\n  public getAccountInfo(accountId: T.U32): Promise<T.Account> {\n    return (this._transport.request('get_account_info', [accountId] as RPC.Params)) as Promise<T.Account>;\n  }\n\n  /**\n   * Get the combined filesize of an account in bytes\n   */\n  public getAccountFileSize(accountId: T.U32): Promise<T.U64> {\n    return (this._transport.request('get_account_file_size', [accountId] as RPC.Params)) as Promise<T.U64>;\n  }\n\n  /**\n   * Returns provider for the given domain.\n   *\n   * This function looks up domain in offline database.\n   *\n   * For compatibility, email address can be passed to this function\n   * instead of the domain.\n   */\n  public getProviderInfo(accountId: T.U32, email: string): Promise<(T.ProviderInfo | null)> {\n    return (this._transport.request('get_provider_info', [accountId, email] as RPC.Params)) as Promise<(T.ProviderInfo | null)>;\n  }\n\n  /**\n   * Checks if the context is already configured.\n   */\n  public isConfigured(accountId: T.U32): Promise<boolean> {\n    return (this._transport.request('is_configured', [accountId] as RPC.Params)) as Promise<boolean>;\n  }\n\n  /**\n   * Get system info for an account.\n   */\n  public getInfo(accountId: T.U32): Promise<Record<string, string>> {\n    return (this._transport.request('get_info', [accountId] as RPC.Params)) as Promise<Record<string, string>>;\n  }\n\n  /**\n   * Get the blob dir.\n   */\n  public getBlobDir(accountId: T.U32): Promise<(string | null)> {\n    return (this._transport.request('get_blob_dir', [accountId] as RPC.Params)) as Promise<(string | null)>;\n  }\n\n  /**\n   * Copy file to blob dir.\n   */\n  public copyToBlobDir(accountId: T.U32, path: string): Promise<string> {\n    return (this._transport.request('copy_to_blob_dir', [accountId, path] as RPC.Params)) as Promise<string>;\n  }\n\n\n  public draftSelfReport(accountId: T.U32): Promise<T.U32> {\n    return (this._transport.request('draft_self_report', [accountId] as RPC.Params)) as Promise<T.U32>;\n  }\n\n  /**\n   * Sets the given configuration key.\n   */\n  public setConfig(accountId: T.U32, key: string, value: (string | null)): Promise<null> {\n    return (this._transport.request('set_config', [accountId, key, value] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Updates a batch of configuration values.\n   */\n  public batchSetConfig(accountId: T.U32, config: Record<string, (string | null)>): Promise<null> {\n    return (this._transport.request('batch_set_config', [accountId, config] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Set configuration values from a QR code. (technically from the URI that is stored in the qrcode)\n   * Before this function is called, `checkQr()` should confirm the type of the\n   * QR code is `account` or `webrtcInstance`.\n   *\n   * Internally, the function will call dc_set_config() with the appropriate keys,\n   */\n  public setConfigFromQr(accountId: T.U32, qrContent: string): Promise<null> {\n    return (this._transport.request('set_config_from_qr', [accountId, qrContent] as RPC.Params)) as Promise<null>;\n  }\n\n\n  public checkQr(accountId: T.U32, qrContent: string): Promise<T.Qr> {\n    return (this._transport.request('check_qr', [accountId, qrContent] as RPC.Params)) as Promise<T.Qr>;\n  }\n\n  /**\n   * Returns configuration value for the given key.\n   */\n  public getConfig(accountId: T.U32, key: string): Promise<(string | null)> {\n    return (this._transport.request('get_config', [accountId, key] as RPC.Params)) as Promise<(string | null)>;\n  }\n\n\n  public batchGetConfig(accountId: T.U32, keys: (string)[]): Promise<Record<string, (string | null)>> {\n    return (this._transport.request('batch_get_config', [accountId, keys] as RPC.Params)) as Promise<Record<string, (string | null)>>;\n  }\n\n\n  public setStockStrings(strings: Record<T.U32, string>): Promise<null> {\n    return (this._transport.request('set_stock_strings', [strings] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Configures this account with the currently set parameters.\n   * Setup the credential config before calling this.\n   *\n   * Deprecated as of 2025-02; use `add_transport_from_qr()`\n   * or `add_or_update_transport()` instead.\n   */\n  public configure(accountId: T.U32): Promise<null> {\n    return (this._transport.request('configure', [accountId] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Configures a new email account using the provided parameters\n   * and adds it as a transport.\n   *\n   * If the email address is the same as an existing transport,\n   * then this existing account will be reconfigured instead of a new one being added.\n   *\n   * This function stops and starts IO as needed.\n   *\n   * Usually it will be enough to only set `addr` and `password`,\n   * and all the other settings will be autoconfigured.\n   *\n   * During configuration, ConfigureProgress events are emitted;\n   * they indicate a successful configuration as well as errors\n   * and may be used to create a progress bar.\n   * This function will return after configuration is finished.\n   *\n   * If configuration is successful,\n   * the working server parameters will be saved\n   * and used for connecting to the server.\n   * The parameters entered by the user will be saved separately\n   * so that they can be prefilled when the user opens the server-configuration screen again.\n   *\n   * See also:\n   * - [Self::is_configured()] to check whether there is\n   *   at least one working transport.\n   * - [Self::add_transport_from_qr()] to add a transport\n   *   from a server encoded in a QR code.\n   * - [Self::list_transports()] to get a list of all configured transports.\n   * - [Self::delete_transport()] to remove a transport.\n   */\n  public addOrUpdateTransport(accountId: T.U32, param: T.EnteredLoginParam): Promise<null> {\n    return (this._transport.request('add_or_update_transport', [accountId, param] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Deprecated 2025-04. Alias for [Self::add_or_update_transport()].\n   */\n  public addTransport(accountId: T.U32, param: T.EnteredLoginParam): Promise<null> {\n    return (this._transport.request('add_transport', [accountId, param] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Adds a new email account as a transport\n   * using the server encoded in the QR code.\n   * See [Self::add_or_update_transport].\n   */\n  public addTransportFromQr(accountId: T.U32, qr: string): Promise<null> {\n    return (this._transport.request('add_transport_from_qr', [accountId, qr] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Returns the list of all email accounts that are used as a transport in the current profile.\n   * Use [Self::add_or_update_transport()] to add or change a transport\n   * and [Self::delete_transport()] to delete a transport.\n   */\n  public listTransports(accountId: T.U32): Promise<(T.EnteredLoginParam)[]> {\n    return (this._transport.request('list_transports', [accountId] as RPC.Params)) as Promise<(T.EnteredLoginParam)[]>;\n  }\n\n  /**\n   * Removes the transport with the specified email address\n   * (i.e. [EnteredLoginParam::addr]).\n   */\n  public deleteTransport(accountId: T.U32, addr: string): Promise<null> {\n    return (this._transport.request('delete_transport', [accountId, addr] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Signal an ongoing process to stop.\n   */\n  public stopOngoingProcess(accountId: T.U32): Promise<null> {\n    return (this._transport.request('stop_ongoing_process', [accountId] as RPC.Params)) as Promise<null>;\n  }\n\n\n  public exportSelfKeys(accountId: T.U32, path: string, passphrase: (string | null)): Promise<null> {\n    return (this._transport.request('export_self_keys', [accountId, path, passphrase] as RPC.Params)) as Promise<null>;\n  }\n\n\n  public importSelfKeys(accountId: T.U32, path: string, passphrase: (string | null)): Promise<null> {\n    return (this._transport.request('import_self_keys', [accountId, path, passphrase] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Returns the message IDs of all _fresh_ messages of any chat.\n   * Typically used for implementing notification summaries\n   * or badge counters e.g. on the app icon.\n   * The list is already sorted and starts with the most recent fresh message.\n   *\n   * Messages belonging to muted chats or to the contact requests are not returned;\n   * these messages should not be notified\n   * and also badge counters should not include these messages.\n   *\n   * To get the number of fresh messages for a single chat, muted or not,\n   * use `get_fresh_msg_cnt()`.\n   */\n  public getFreshMsgs(accountId: T.U32): Promise<(T.U32)[]> {\n    return (this._transport.request('get_fresh_msgs', [accountId] as RPC.Params)) as Promise<(T.U32)[]>;\n  }\n\n  /**\n   * Get the number of _fresh_ messages in a chat.\n   * Typically used to implement a badge with a number in the chatlist.\n   *\n   * If the specified chat is muted,\n   * the UI should show the badge counter \"less obtrusive\",\n   * e.g. using \"gray\" instead of \"red\" color.\n   */\n  public getFreshMsgCnt(accountId: T.U32, chatId: T.U32): Promise<T.Usize> {\n    return (this._transport.request('get_fresh_msg_cnt', [accountId, chatId] as RPC.Params)) as Promise<T.Usize>;\n  }\n\n  /**\n   * Gets messages to be processed by the bot and returns their IDs.\n   *\n   * Only messages with database ID higher than `last_msg_id` config value\n   * are returned. After processing the messages, the bot should\n   * update `last_msg_id` by calling [`markseen_msgs`]\n   * or manually updating the value to avoid getting already\n   * processed messages.\n   *\n   * [`markseen_msgs`]: Self::markseen_msgs\n   */\n  public getNextMsgs(accountId: T.U32): Promise<(T.U32)[]> {\n    return (this._transport.request('get_next_msgs', [accountId] as RPC.Params)) as Promise<(T.U32)[]>;\n  }\n\n  /**\n   * Waits for messages to be processed by the bot and returns their IDs.\n   *\n   * This function is similar to [`get_next_msgs`],\n   * but waits for internal new message notification before returning.\n   * New message notification is sent when new message is added to the database,\n   * on initialization, when I/O is started and when I/O is stopped.\n   * This allows bots to use `wait_next_msgs` in a loop to process\n   * old messages after initialization and during the bot runtime.\n   * To shutdown the bot, stopping I/O can be used to interrupt\n   * pending or next `wait_next_msgs` call.\n   *\n   * [`get_next_msgs`]: Self::get_next_msgs\n   */\n  public waitNextMsgs(accountId: T.U32): Promise<(T.U32)[]> {\n    return (this._transport.request('wait_next_msgs', [accountId] as RPC.Params)) as Promise<(T.U32)[]>;\n  }\n\n  /**\n   * Estimate the number of messages that will be deleted\n   * by the set_config()-options `delete_device_after` or `delete_server_after`.\n   * This is typically used to show the estimated impact to the user\n   * before actually enabling deletion of old messages.\n   */\n  public estimateAutoDeletionCount(accountId: T.U32, fromServer: boolean, seconds: T.I64): Promise<T.Usize> {\n    return (this._transport.request('estimate_auto_deletion_count', [accountId, fromServer, seconds] as RPC.Params)) as Promise<T.Usize>;\n  }\n\n\n  public initiateAutocryptKeyTransfer(accountId: T.U32): Promise<string> {\n    return (this._transport.request('initiate_autocrypt_key_transfer', [accountId] as RPC.Params)) as Promise<string>;\n  }\n\n\n  public continueAutocryptKeyTransfer(accountId: T.U32, messageId: T.U32, setupCode: string): Promise<null> {\n    return (this._transport.request('continue_autocrypt_key_transfer', [accountId, messageId, setupCode] as RPC.Params)) as Promise<null>;\n  }\n\n\n  public getChatlistEntries(accountId: T.U32, listFlags: (T.U32 | null), queryString: (string | null), queryContactId: (T.U32 | null)): Promise<(T.U32)[]> {\n    return (this._transport.request('get_chatlist_entries', [accountId, listFlags, queryString, queryContactId] as RPC.Params)) as Promise<(T.U32)[]>;\n  }\n\n  /**\n   * Returns chats similar to the given one.\n   *\n   * Experimental API, subject to change without notice.\n   */\n  public getSimilarChatIds(accountId: T.U32, chatId: T.U32): Promise<(T.U32)[]> {\n    return (this._transport.request('get_similar_chat_ids', [accountId, chatId] as RPC.Params)) as Promise<(T.U32)[]>;\n  }\n\n\n  public getChatlistItemsByEntries(accountId: T.U32, entries: (T.U32)[]): Promise<Record<T.U32, T.ChatListItemFetchResult>> {\n    return (this._transport.request('get_chatlist_items_by_entries', [accountId, entries] as RPC.Params)) as Promise<Record<T.U32, T.ChatListItemFetchResult>>;\n  }\n\n\n  public getFullChatById(accountId: T.U32, chatId: T.U32): Promise<T.FullChat> {\n    return (this._transport.request('get_full_chat_by_id', [accountId, chatId] as RPC.Params)) as Promise<T.FullChat>;\n  }\n\n  /**\n   * get basic info about a chat,\n   * use chatlist_get_full_chat_by_id() instead if you need more information\n   */\n  public getBasicChatInfo(accountId: T.U32, chatId: T.U32): Promise<T.BasicChat> {\n    return (this._transport.request('get_basic_chat_info', [accountId, chatId] as RPC.Params)) as Promise<T.BasicChat>;\n  }\n\n\n  public acceptChat(accountId: T.U32, chatId: T.U32): Promise<null> {\n    return (this._transport.request('accept_chat', [accountId, chatId] as RPC.Params)) as Promise<null>;\n  }\n\n\n  public blockChat(accountId: T.U32, chatId: T.U32): Promise<null> {\n    return (this._transport.request('block_chat', [accountId, chatId] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Delete a chat.\n   *\n   * Messages are deleted from the device and the chat database entry is deleted.\n   * After that, the event #DC_EVENT_MSGS_CHANGED is posted.\n   *\n   * Things that are _not done_ implicitly:\n   *\n   * - Messages are **not deleted from the server**.\n   * - The chat or the contact is **not blocked**, so new messages from the user/the group may appear as a contact request\n   *   and the user may create the chat again.\n   * - **Groups are not left** - this would\n   *   be unexpected as (1) deleting a normal chat also does not prevent new mails\n   *   from arriving, (2) leaving a group requires sending a message to\n   *   all group members - especially for groups not used for a longer time, this is\n   *   really unexpected when deletion results in contacting all members again,\n   *   (3) only leaving groups is also a valid usecase.\n   *\n   * To leave a chat explicitly, use leave_group()\n   */\n  public deleteChat(accountId: T.U32, chatId: T.U32): Promise<null> {\n    return (this._transport.request('delete_chat', [accountId, chatId] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Get encryption info for a chat.\n   * Get a multi-line encryption info, containing encryption preferences of all members.\n   * Can be used to find out why messages sent to group are not encrypted.\n   *\n   * returns Multi-line text\n   */\n  public getChatEncryptionInfo(accountId: T.U32, chatId: T.U32): Promise<string> {\n    return (this._transport.request('get_chat_encryption_info', [accountId, chatId] as RPC.Params)) as Promise<string>;\n  }\n\n  /**\n   * Get QR code text that will offer a [SecureJoin](https://securejoin.delta.chat/) invitation.\n   *\n   * If `chat_id` is a group chat ID, SecureJoin QR code for the group is returned.\n   * If `chat_id` is unset, setup contact QR code is returned.\n   */\n  public getChatSecurejoinQrCode(accountId: T.U32, chatId: (T.U32 | null)): Promise<string> {\n    return (this._transport.request('get_chat_securejoin_qr_code', [accountId, chatId] as RPC.Params)) as Promise<string>;\n  }\n\n  /**\n   * Get QR code (text and SVG) that will offer a Setup-Contact or Verified-Group invitation.\n   * The QR code is compatible to the OPENPGP4FPR format\n   * so that a basic fingerprint comparison also works e.g. with OpenKeychain.\n   *\n   * The scanning device will pass the scanned content to `checkQr()` then;\n   * if `checkQr()` returns `askVerifyContact` or `askVerifyGroup`\n   * an out-of-band-verification can be joined using `secure_join()`\n   *\n   * chat_id: If set to a group-chat-id,\n   *     the Verified-Group-Invite protocol is offered in the QR code;\n   *     works for protected groups as well as for normal groups.\n   *     If not set, the Setup-Contact protocol is offered in the QR code.\n   *     See https://securejoin.delta.chat/ for details about both protocols.\n   *\n   * return format: `[code, svg]`\n   */\n  public getChatSecurejoinQrCodeSvg(accountId: T.U32, chatId: (T.U32 | null)): Promise<[string, string]> {\n    return (this._transport.request('get_chat_securejoin_qr_code_svg', [accountId, chatId] as RPC.Params)) as Promise<[string, string]>;\n  }\n\n  /**\n   * Continue a Setup-Contact or Verified-Group-Invite protocol\n   * started on another device with `get_chat_securejoin_qr_code_svg()`.\n   * This function is typically called when `check_qr()` returns\n   * type=AskVerifyContact or type=AskVerifyGroup.\n   *\n   * The function returns immediately and the handshake runs in background,\n   * sending and receiving several messages.\n   * During the handshake, info messages are added to the chat,\n   * showing progress, success or errors.\n   *\n   * Subsequent calls of `secure_join()` will abort previous, unfinished handshakes.\n   *\n   * See https://securejoin.delta.chat/ for details about both protocols.\n   *\n   * **qr**: The text of the scanned QR code. Typically, the same string as given\n   *     to `check_qr()`.\n   *\n   * **returns**: The chat ID of the joined chat, the UI may redirect to the this chat.\n   *         A returned chat ID does not guarantee that the chat is protected or the belonging contact is verified.\n   *\n   */\n  public secureJoin(accountId: T.U32, qr: string): Promise<T.U32> {\n    return (this._transport.request('secure_join', [accountId, qr] as RPC.Params)) as Promise<T.U32>;\n  }\n\n\n  public leaveGroup(accountId: T.U32, chatId: T.U32): Promise<null> {\n    return (this._transport.request('leave_group', [accountId, chatId] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Remove a member from a group.\n   *\n   * If the group is already _promoted_ (any message was sent to the group),\n   * all group members are informed by a special status message that is sent automatically by this function.\n   *\n   * Sends out #DC_EVENT_CHAT_MODIFIED and #DC_EVENT_MSGS_CHANGED if a status message was sent.\n   */\n  public removeContactFromChat(accountId: T.U32, chatId: T.U32, contactId: T.U32): Promise<null> {\n    return (this._transport.request('remove_contact_from_chat', [accountId, chatId, contactId] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Add a member to a group.\n   *\n   * If the group is already _promoted_ (any message was sent to the group),\n   * all group members are informed by a special status message that is sent automatically by this function.\n   *\n   * If the group has group protection enabled, only verified contacts can be added to the group.\n   *\n   * Sends out #DC_EVENT_CHAT_MODIFIED and #DC_EVENT_MSGS_CHANGED if a status message was sent.\n   */\n  public addContactToChat(accountId: T.U32, chatId: T.U32, contactId: T.U32): Promise<null> {\n    return (this._transport.request('add_contact_to_chat', [accountId, chatId, contactId] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Get the contact IDs belonging to a chat.\n   *\n   * - for normal chats, the function always returns exactly one contact,\n   *   DC_CONTACT_ID_SELF is returned only for SELF-chats.\n   *\n   * - for group chats all members are returned, DC_CONTACT_ID_SELF is returned\n   *   explicitly as it may happen that oneself gets removed from a still existing\n   *   group\n   *\n   * - for broadcasts, all recipients are returned, DC_CONTACT_ID_SELF is not included\n   *\n   * - for mailing lists, the behavior is not documented currently, we will decide on that later.\n   *   for now, the UI should not show the list for mailing lists.\n   *   (we do not know all members and there is not always a global mailing list address,\n   *   so we could return only SELF or the known members; this is not decided yet)\n   */\n  public getChatContacts(accountId: T.U32, chatId: T.U32): Promise<(T.U32)[]> {\n    return (this._transport.request('get_chat_contacts', [accountId, chatId] as RPC.Params)) as Promise<(T.U32)[]>;\n  }\n\n  /**\n   * Returns contact IDs of the past chat members.\n   */\n  public getPastChatContacts(accountId: T.U32, chatId: T.U32): Promise<(T.U32)[]> {\n    return (this._transport.request('get_past_chat_contacts', [accountId, chatId] as RPC.Params)) as Promise<(T.U32)[]>;\n  }\n\n  /**\n   * Create a new group chat.\n   *\n   * After creation,\n   * the group has one member with the ID DC_CONTACT_ID_SELF\n   * and is in _unpromoted_ state.\n   * This means, you can add or remove members, change the name,\n   * the group image and so on without messages being sent to all group members.\n   *\n   * This changes as soon as the first message is sent to the group members\n   * and the group becomes _promoted_.\n   * After that, all changes are synced with all group members\n   * by sending status message.\n   *\n   * To check, if a chat is still unpromoted, you can look at the `is_unpromoted` property of `BasicChat` or `FullChat`.\n   * This may be useful if you want to show some help for just created groups.\n   *\n   * @param protect If set to 1 the function creates group with protection initially enabled.\n   *     Only verified members are allowed in these groups\n   *     and end-to-end-encryption is always enabled.\n   */\n  public createGroupChat(accountId: T.U32, name: string, protect: boolean): Promise<T.U32> {\n    return (this._transport.request('create_group_chat', [accountId, name, protect] as RPC.Params)) as Promise<T.U32>;\n  }\n\n  /**\n   * Create a new broadcast list.\n   *\n   * Broadcast lists are similar to groups on the sending device,\n   * however, recipients get the messages in a read-only chat\n   * and will see who the other members are.\n   *\n   * For historical reasons, this function does not take a name directly,\n   * instead you have to set the name using dc_set_chat_name()\n   * after creating the broadcast list.\n   */\n  public createBroadcastList(accountId: T.U32): Promise<T.U32> {\n    return (this._transport.request('create_broadcast_list', [accountId] as RPC.Params)) as Promise<T.U32>;\n  }\n\n  /**\n   * Set group name.\n   *\n   * If the group is already _promoted_ (any message was sent to the group),\n   * all group members are informed by a special status message that is sent automatically by this function.\n   *\n   * Sends out #DC_EVENT_CHAT_MODIFIED and #DC_EVENT_MSGS_CHANGED if a status message was sent.\n   */\n  public setChatName(accountId: T.U32, chatId: T.U32, newName: string): Promise<null> {\n    return (this._transport.request('set_chat_name', [accountId, chatId, newName] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Set group profile image.\n   *\n   * If the group is already _promoted_ (any message was sent to the group),\n   * all group members are informed by a special status message that is sent automatically by this function.\n   *\n   * Sends out #DC_EVENT_CHAT_MODIFIED and #DC_EVENT_MSGS_CHANGED if a status message was sent.\n   *\n   * To find out the profile image of a chat, use dc_chat_get_profile_image()\n   *\n   * @param image_path Full path of the image to use as the group image. The image will immediately be copied to the\n   *     `blobdir`; the original image will not be needed anymore.\n   *      If you pass null here, the group image is deleted (for promoted groups, all members are informed about\n   *      this change anyway).\n   */\n  public setChatProfileImage(accountId: T.U32, chatId: T.U32, imagePath: (string | null)): Promise<null> {\n    return (this._transport.request('set_chat_profile_image', [accountId, chatId, imagePath] as RPC.Params)) as Promise<null>;\n  }\n\n\n  public setChatVisibility(accountId: T.U32, chatId: T.U32, visibility: T.ChatVisibility): Promise<null> {\n    return (this._transport.request('set_chat_visibility', [accountId, chatId, visibility] as RPC.Params)) as Promise<null>;\n  }\n\n\n  public setChatEphemeralTimer(accountId: T.U32, chatId: T.U32, timer: T.U32): Promise<null> {\n    return (this._transport.request('set_chat_ephemeral_timer', [accountId, chatId, timer] as RPC.Params)) as Promise<null>;\n  }\n\n\n  public getChatEphemeralTimer(accountId: T.U32, chatId: T.U32): Promise<T.U32> {\n    return (this._transport.request('get_chat_ephemeral_timer', [accountId, chatId] as RPC.Params)) as Promise<T.U32>;\n  }\n\n  /**\n   * Add a message to the device-chat.\n   * Device-messages usually contain update information\n   * and some hints that are added during the program runs, multi-device etc.\n   * The device-message may be defined by a label;\n   * if a message with the same label was added or skipped before,\n   * the message is not added again, even if the message was deleted in between.\n   * If needed, the device-chat is created before.\n   *\n   * Sends the `MsgsChanged` event on success.\n   *\n   * Setting msg to None will prevent the device message with this label from being added in the future.\n   */\n  public addDeviceMessage(accountId: T.U32, label: string, msg: (T.MessageData | null)): Promise<(T.U32 | null)> {\n    return (this._transport.request('add_device_message', [accountId, label, msg] as RPC.Params)) as Promise<(T.U32 | null)>;\n  }\n\n  /**\n   *  Mark all messages in a chat as _noticed_.\n   *  _Noticed_ messages are no longer _fresh_ and do not count as being unseen\n   *  but are still waiting for being marked as \"seen\" using markseen_msgs()\n   *  (IMAP/MDNs is not done for noticed messages).\n   *\n   *  Calling this function usually results in the event #DC_EVENT_MSGS_NOTICED.\n   *  See also markseen_msgs().\n   */\n  public marknoticedChat(accountId: T.U32, chatId: T.U32): Promise<null> {\n    return (this._transport.request('marknoticed_chat', [accountId, chatId] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Returns the message that is immediately followed by the last seen\n   * message.\n   * From the point of view of the user this is effectively\n   * \"first unread\", but in reality in the database a seen message\n   * _can_ be followed by a fresh (unseen) message\n   * if that message has not been individually marked as seen.\n   */\n  public getFirstUnreadMessageOfChat(accountId: T.U32, chatId: T.U32): Promise<(T.U32 | null)> {\n    return (this._transport.request('get_first_unread_message_of_chat', [accountId, chatId] as RPC.Params)) as Promise<(T.U32 | null)>;\n  }\n\n  /**\n   * Set mute duration of a chat.\n   *\n   * The UI can then call is_chat_muted() when receiving a new message\n   * to decide whether it should trigger an notification.\n   *\n   * Muted chats should not sound or vibrate\n   * and should not show a visual notification in the system area.\n   * Moreover, muted chats should be excluded from global badge counter\n   * (get_fresh_msgs() skips muted chats therefore)\n   * and the in-app, per-chat badge counter should use a less obtrusive color.\n   *\n   * Sends out #DC_EVENT_CHAT_MODIFIED.\n   */\n  public setChatMuteDuration(accountId: T.U32, chatId: T.U32, duration: T.MuteDuration): Promise<null> {\n    return (this._transport.request('set_chat_mute_duration', [accountId, chatId, duration] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Check whether the chat is currently muted (can be changed by set_chat_mute_duration()).\n   *\n   * This is available as a standalone function outside of fullchat, because it might be only needed for notification\n   */\n  public isChatMuted(accountId: T.U32, chatId: T.U32): Promise<boolean> {\n    return (this._transport.request('is_chat_muted', [accountId, chatId] as RPC.Params)) as Promise<boolean>;\n  }\n\n  /**\n   * Mark messages as presented to the user.\n   * Typically, UIs call this function on scrolling through the message list,\n   * when the messages are presented at least for a little moment.\n   * The concrete action depends on the type of the chat and on the users settings\n   * (dc_msgs_presented() may be a better name therefore, but well. :)\n   *\n   * - For normal chats, the IMAP state is updated, MDN is sent\n   *   (if set_config()-options `mdns_enabled` is set)\n   *   and the internal state is changed to @ref DC_STATE_IN_SEEN to reflect these actions.\n   *\n   * - For contact requests, no IMAP or MDNs is done\n   *   and the internal state is not changed therefore.\n   *   See also marknoticed_chat().\n   *\n   * Moreover, timer is started for incoming ephemeral messages.\n   * This also happens for contact requests chats.\n   *\n   * This function updates `last_msg_id` configuration value\n   * to the maximum of the current value and IDs passed to this function.\n   * Bots which mark messages as seen can rely on this side effect\n   * to avoid updating `last_msg_id` value manually.\n   *\n   * One #DC_EVENT_MSGS_NOTICED event is emitted per modified chat.\n   */\n  public markseenMsgs(accountId: T.U32, msgIds: (T.U32)[]): Promise<null> {\n    return (this._transport.request('markseen_msgs', [accountId, msgIds] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Returns all messages of a particular chat.\n   * If `add_daymarker` is `true`, it will return them as\n   * `DC_MSG_ID_DAYMARKER`, e.g. [1234, 1237, 9, 1239].\n   */\n  public getMessageIds(accountId: T.U32, chatId: T.U32, infoOnly: boolean, addDaymarker: boolean): Promise<(T.U32)[]> {\n    return (this._transport.request('get_message_ids', [accountId, chatId, infoOnly, addDaymarker] as RPC.Params)) as Promise<(T.U32)[]>;\n  }\n\n\n  public getMessageListItems(accountId: T.U32, chatId: T.U32, infoOnly: boolean, addDaymarker: boolean): Promise<(T.MessageListItem)[]> {\n    return (this._transport.request('get_message_list_items', [accountId, chatId, infoOnly, addDaymarker] as RPC.Params)) as Promise<(T.MessageListItem)[]>;\n  }\n\n\n  public getMessage(accountId: T.U32, msgId: T.U32): Promise<T.Message> {\n    return (this._transport.request('get_message', [accountId, msgId] as RPC.Params)) as Promise<T.Message>;\n  }\n\n\n  public getMessageHtml(accountId: T.U32, messageId: T.U32): Promise<(string | null)> {\n    return (this._transport.request('get_message_html', [accountId, messageId] as RPC.Params)) as Promise<(string | null)>;\n  }\n\n  /**\n   * get multiple messages in one call,\n   * if loading one message fails the error is stored in the result object in it's place.\n   *\n   * this is the batch variant of [get_message]\n   */\n  public getMessages(accountId: T.U32, messageIds: (T.U32)[]): Promise<Record<T.U32, T.MessageLoadResult>> {\n    return (this._transport.request('get_messages', [accountId, messageIds] as RPC.Params)) as Promise<Record<T.U32, T.MessageLoadResult>>;\n  }\n\n  /**\n   * Fetch info desktop needs for creating a notification for a message\n   */\n  public getMessageNotificationInfo(accountId: T.U32, messageId: T.U32): Promise<T.MessageNotificationInfo> {\n    return (this._transport.request('get_message_notification_info', [accountId, messageId] as RPC.Params)) as Promise<T.MessageNotificationInfo>;\n  }\n\n  /**\n   * Delete messages. The messages are deleted on the current device and\n   * on the IMAP server.\n   */\n  public deleteMessages(accountId: T.U32, messageIds: (T.U32)[]): Promise<null> {\n    return (this._transport.request('delete_messages', [accountId, messageIds] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Delete messages. The messages are deleted on the current device,\n   * on the IMAP server and also for all chat members\n   */\n  public deleteMessagesForAll(accountId: T.U32, messageIds: (T.U32)[]): Promise<null> {\n    return (this._transport.request('delete_messages_for_all', [accountId, messageIds] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Get an informational text for a single message. The text is multiline and may\n   * contain e.g. the raw text of the message.\n   *\n   * The max. text returned is typically longer (about 100000 characters) than the\n   * max. text returned by dc_msg_get_text() (about 30000 characters).\n   */\n  public getMessageInfo(accountId: T.U32, messageId: T.U32): Promise<string> {\n    return (this._transport.request('get_message_info', [accountId, messageId] as RPC.Params)) as Promise<string>;\n  }\n\n  /**\n   * Returns additional information for single message.\n   */\n  public getMessageInfoObject(accountId: T.U32, messageId: T.U32): Promise<T.MessageInfo> {\n    return (this._transport.request('get_message_info_object', [accountId, messageId] as RPC.Params)) as Promise<T.MessageInfo>;\n  }\n\n  /**\n   * Returns contacts that sent read receipts and the time of reading.\n   */\n  public getMessageReadReceipts(accountId: T.U32, messageId: T.U32): Promise<(T.MessageReadReceipt)[]> {\n    return (this._transport.request('get_message_read_receipts', [accountId, messageId] as RPC.Params)) as Promise<(T.MessageReadReceipt)[]>;\n  }\n\n  /**\n   * Asks the core to start downloading a message fully.\n   * This function is typically called when the user hits the \"Download\" button\n   * that is shown by the UI in case `download_state` is `'Available'` or `'Failure'`\n   *\n   * On success, the @ref DC_MSG \"view type of the message\" may change\n   * or the message may be replaced completely by one or more messages with other message IDs.\n   * That may happen e.g. in cases where the message was encrypted\n   * and the type could not be determined without fully downloading.\n   * Downloaded content can be accessed as usual after download.\n   *\n   * To reflect these changes a @ref DC_EVENT_MSGS_CHANGED event will be emitted.\n   */\n  public downloadFullMessage(accountId: T.U32, messageId: T.U32): Promise<null> {\n    return (this._transport.request('download_full_message', [accountId, messageId] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Search messages containing the given query string.\n   * Searching can be done globally (chat_id=None) or in a specified chat only (chat_id set).\n   *\n   * Global search results are typically displayed using dc_msg_get_summary(), chat\n   * search results may just highlight the corresponding messages and present a\n   * prev/next button.\n   *\n   * For the global search, the result is limited to 1000 messages,\n   * this allows an incremental search done fast.\n   * So, when getting exactly 1000 messages, the result actually may be truncated;\n   * the UIs may display sth. like \"1000+ messages found\" in this case.\n   * The chat search (if chat_id is set) is not limited.\n   */\n  public searchMessages(accountId: T.U32, query: string, chatId: (T.U32 | null)): Promise<(T.U32)[]> {\n    return (this._transport.request('search_messages', [accountId, query, chatId] as RPC.Params)) as Promise<(T.U32)[]>;\n  }\n\n\n  public messageIdsToSearchResults(accountId: T.U32, messageIds: (T.U32)[]): Promise<Record<T.U32, T.MessageSearchResult>> {\n    return (this._transport.request('message_ids_to_search_results', [accountId, messageIds] as RPC.Params)) as Promise<Record<T.U32, T.MessageSearchResult>>;\n  }\n\n\n  public saveMsgs(accountId: T.U32, messageIds: (T.U32)[]): Promise<null> {\n    return (this._transport.request('save_msgs', [accountId, messageIds] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Get a single contact options by ID.\n   */\n  public getContact(accountId: T.U32, contactId: T.U32): Promise<T.Contact> {\n    return (this._transport.request('get_contact', [accountId, contactId] as RPC.Params)) as Promise<T.Contact>;\n  }\n\n  /**\n   * Add a single contact as a result of an explicit user action.\n   *\n   * Returns contact id of the created or existing contact\n   */\n  public createContact(accountId: T.U32, email: string, name: (string | null)): Promise<T.U32> {\n    return (this._transport.request('create_contact', [accountId, email, name] as RPC.Params)) as Promise<T.U32>;\n  }\n\n  /**\n   * Returns contact id of the created or existing DM chat with that contact\n   */\n  public createChatByContactId(accountId: T.U32, contactId: T.U32): Promise<T.U32> {\n    return (this._transport.request('create_chat_by_contact_id', [accountId, contactId] as RPC.Params)) as Promise<T.U32>;\n  }\n\n\n  public blockContact(accountId: T.U32, contactId: T.U32): Promise<null> {\n    return (this._transport.request('block_contact', [accountId, contactId] as RPC.Params)) as Promise<null>;\n  }\n\n\n  public unblockContact(accountId: T.U32, contactId: T.U32): Promise<null> {\n    return (this._transport.request('unblock_contact', [accountId, contactId] as RPC.Params)) as Promise<null>;\n  }\n\n\n  public getBlockedContacts(accountId: T.U32): Promise<(T.Contact)[]> {\n    return (this._transport.request('get_blocked_contacts', [accountId] as RPC.Params)) as Promise<(T.Contact)[]>;\n  }\n\n\n  public getContactIds(accountId: T.U32, listFlags: T.U32, query: (string | null)): Promise<(T.U32)[]> {\n    return (this._transport.request('get_contact_ids', [accountId, listFlags, query] as RPC.Params)) as Promise<(T.U32)[]>;\n  }\n\n  /**\n   * Get a list of contacts.\n   * (formerly called getContacts2 in desktop)\n   */\n  public getContacts(accountId: T.U32, listFlags: T.U32, query: (string | null)): Promise<(T.Contact)[]> {\n    return (this._transport.request('get_contacts', [accountId, listFlags, query] as RPC.Params)) as Promise<(T.Contact)[]>;\n  }\n\n\n  public getContactsByIds(accountId: T.U32, ids: (T.U32)[]): Promise<Record<T.U32, T.Contact>> {\n    return (this._transport.request('get_contacts_by_ids', [accountId, ids] as RPC.Params)) as Promise<Record<T.U32, T.Contact>>;\n  }\n\n\n  public deleteContact(accountId: T.U32, contactId: T.U32): Promise<null> {\n    return (this._transport.request('delete_contact', [accountId, contactId] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Resets contact encryption.\n   */\n  public resetContactEncryption(accountId: T.U32, contactId: T.U32): Promise<null> {\n    return (this._transport.request('reset_contact_encryption', [accountId, contactId] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Sets display name for existing contact.\n   */\n  public changeContactName(accountId: T.U32, contactId: T.U32, name: string): Promise<null> {\n    return (this._transport.request('change_contact_name', [accountId, contactId, name] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Get encryption info for a contact.\n   * Get a multi-line encryption info, containing your fingerprint and the\n   * fingerprint of the contact, used e.g. to compare the fingerprints for a simple out-of-band verification.\n   */\n  public getContactEncryptionInfo(accountId: T.U32, contactId: T.U32): Promise<string> {\n    return (this._transport.request('get_contact_encryption_info', [accountId, contactId] as RPC.Params)) as Promise<string>;\n  }\n\n  /**\n   * Check if an e-mail address belongs to a known and unblocked contact.\n   * To get a list of all known and unblocked contacts, use contacts_get_contacts().\n   *\n   * To validate an e-mail address independently of the contact database\n   * use check_email_validity().\n   */\n  public lookupContactIdByAddr(accountId: T.U32, addr: string): Promise<(T.U32 | null)> {\n    return (this._transport.request('lookup_contact_id_by_addr', [accountId, addr] as RPC.Params)) as Promise<(T.U32 | null)>;\n  }\n\n  /**\n   * Parses a vCard file located at the given path. Returns contacts in their original order.\n   */\n  public parseVcard(path: string): Promise<(T.VcardContact)[]> {\n    return (this._transport.request('parse_vcard', [path] as RPC.Params)) as Promise<(T.VcardContact)[]>;\n  }\n\n  /**\n   * Imports contacts from a vCard file located at the given path.\n   *\n   * Returns the ids of created/modified contacts in the order they appear in the vCard.\n   */\n  public importVcard(accountId: T.U32, path: string): Promise<(T.U32)[]> {\n    return (this._transport.request('import_vcard', [accountId, path] as RPC.Params)) as Promise<(T.U32)[]>;\n  }\n\n  /**\n   * Imports contacts from a vCard.\n   *\n   * Returns the ids of created/modified contacts in the order they appear in the vCard.\n   */\n  public importVcardContents(accountId: T.U32, vcard: string): Promise<(T.U32)[]> {\n    return (this._transport.request('import_vcard_contents', [accountId, vcard] as RPC.Params)) as Promise<(T.U32)[]>;\n  }\n\n  /**\n   * Returns a vCard containing contacts with the given ids.\n   */\n  public makeVcard(accountId: T.U32, contacts: (T.U32)[]): Promise<string> {\n    return (this._transport.request('make_vcard', [accountId, contacts] as RPC.Params)) as Promise<string>;\n  }\n\n  /**\n   * Sets vCard containing the given contacts to the message draft.\n   */\n  public setDraftVcard(accountId: T.U32, msgId: T.U32, contacts: (T.U32)[]): Promise<null> {\n    return (this._transport.request('set_draft_vcard', [accountId, msgId, contacts] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Returns the [`ChatId`] for the 1:1 chat with `contact_id` if it exists.\n   *\n   * If it does not exist, `None` is returned.\n   */\n  public getChatIdByContactId(accountId: T.U32, contactId: T.U32): Promise<(T.U32 | null)> {\n    return (this._transport.request('get_chat_id_by_contact_id', [accountId, contactId] as RPC.Params)) as Promise<(T.U32 | null)>;\n  }\n\n  /**\n   * Returns all message IDs of the given types in a chat.\n   * Typically used to show a gallery.\n   *\n   * The list is already sorted and starts with the oldest message.\n   * Clients should not try to re-sort the list as this would be an expensive action\n   * and would result in inconsistencies between clients.\n   *\n   * Setting `chat_id` to `None` (`null` in typescript) means get messages with media\n   * from any chat of the currently used account.\n   */\n  public getChatMedia(accountId: T.U32, chatId: (T.U32 | null), messageType: T.Viewtype, orMessageType2: (T.Viewtype | null), orMessageType3: (T.Viewtype | null)): Promise<(T.U32)[]> {\n    return (this._transport.request('get_chat_media', [accountId, chatId, messageType, orMessageType2, orMessageType3] as RPC.Params)) as Promise<(T.U32)[]>;\n  }\n\n\n  public exportBackup(accountId: T.U32, destination: string, passphrase: (string | null)): Promise<null> {\n    return (this._transport.request('export_backup', [accountId, destination, passphrase] as RPC.Params)) as Promise<null>;\n  }\n\n\n  public importBackup(accountId: T.U32, path: string, passphrase: (string | null)): Promise<null> {\n    return (this._transport.request('import_backup', [accountId, path, passphrase] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Offers a backup for remote devices to retrieve.\n   *\n   * Can be cancelled by stopping the ongoing process.  Success or failure can be tracked\n   * via the `ImexProgress` event which should either reach `1000` for success or `0` for\n   * failure.\n   *\n   * This **stops IO** while it is running.\n   *\n   * Returns once a remote device has retrieved the backup, or is cancelled.\n   */\n  public provideBackup(accountId: T.U32): Promise<null> {\n    return (this._transport.request('provide_backup', [accountId] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Returns the text of the QR code for the running [`CommandApi::provide_backup`].\n   *\n   * This QR code text can be used in [`CommandApi::get_backup`] on a second device to\n   * retrieve the backup and setup this second device.\n   *\n   * This call will block until the QR code is ready,\n   * even if there is no concurrent call to [`CommandApi::provide_backup`],\n   * but will fail after 60 seconds to avoid deadlocks.\n   */\n  public getBackupQr(accountId: T.U32): Promise<string> {\n    return (this._transport.request('get_backup_qr', [accountId] as RPC.Params)) as Promise<string>;\n  }\n\n  /**\n   * Returns the rendered QR code for the running [`CommandApi::provide_backup`].\n   *\n   * This QR code can be used in [`CommandApi::get_backup`] on a second device to\n   * retrieve the backup and setup this second device.\n   *\n   * This call will block until the QR code is ready,\n   * even if there is no concurrent call to [`CommandApi::provide_backup`],\n   * but will fail after 60 seconds to avoid deadlocks.\n   *\n   * Returns the QR code rendered as an SVG image.\n   */\n  public getBackupQrSvg(accountId: T.U32): Promise<string> {\n    return (this._transport.request('get_backup_qr_svg', [accountId] as RPC.Params)) as Promise<string>;\n  }\n\n  /**\n   * Gets a backup from a remote provider.\n   *\n   * This retrieves the backup from a remote device over the network and imports it into\n   * the current device.\n   *\n   * Can be cancelled by stopping the ongoing process.\n   *\n   * Do not forget to call start_io on the account after a successful import,\n   * otherwise it will not connect to the email server.\n   */\n  public getBackup(accountId: T.U32, qrText: string): Promise<null> {\n    return (this._transport.request('get_backup', [accountId, qrText] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Indicate that the network likely has come back.\n   * or just that the network conditions might have changed\n   */\n  public maybeNetwork(): Promise<null> {\n    return (this._transport.request('maybe_network', [] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Get the current connectivity, i.e. whether the device is connected to the IMAP server.\n   * One of:\n   * - DC_CONNECTIVITY_NOT_CONNECTED (1000-1999): Show e.g. the string \"Not connected\" or a red dot\n   * - DC_CONNECTIVITY_CONNECTING (2000-2999): Show e.g. the string \"Connecting\u2026\" or a yellow dot\n   * - DC_CONNECTIVITY_WORKING (3000-3999): Show e.g. the string \"Getting new messages\" or a spinning wheel\n   * - DC_CONNECTIVITY_CONNECTED (>=4000): Show e.g. the string \"Connected\" or a green dot\n   *\n   * We don't use exact values but ranges here so that we can split up\n   * states into multiple states in the future.\n   *\n   * Meant as a rough overview that can be shown\n   * e.g. in the title of the main screen.\n   *\n   * If the connectivity changes, a #DC_EVENT_CONNECTIVITY_CHANGED will be emitted.\n   */\n  public getConnectivity(accountId: T.U32): Promise<T.U32> {\n    return (this._transport.request('get_connectivity', [accountId] as RPC.Params)) as Promise<T.U32>;\n  }\n\n  /**\n   * Get an overview of the current connectivity, and possibly more statistics.\n   * Meant to give the user more insight about the current status than\n   * the basic connectivity info returned by get_connectivity(); show this\n   * e.g., if the user taps on said basic connectivity info.\n   *\n   * If this page changes, a #DC_EVENT_CONNECTIVITY_CHANGED will be emitted.\n   *\n   * This comes as an HTML from the core so that we can easily improve it\n   * and the improvement instantly reaches all UIs.\n   */\n  public getConnectivityHtml(accountId: T.U32): Promise<string> {\n    return (this._transport.request('get_connectivity_html', [accountId] as RPC.Params)) as Promise<string>;\n  }\n\n\n  public getLocations(accountId: T.U32, chatId: (T.U32 | null), contactId: (T.U32 | null), timestampBegin: T.I64, timestampEnd: T.I64): Promise<(T.Location)[]> {\n    return (this._transport.request('get_locations', [accountId, chatId, contactId, timestampBegin, timestampEnd] as RPC.Params)) as Promise<(T.Location)[]>;\n  }\n\n\n  public sendWebxdcStatusUpdate(accountId: T.U32, instanceMsgId: T.U32, updateStr: string, descr: (string | null)): Promise<null> {\n    return (this._transport.request('send_webxdc_status_update', [accountId, instanceMsgId, updateStr, descr] as RPC.Params)) as Promise<null>;\n  }\n\n\n  public sendWebxdcRealtimeData(accountId: T.U32, instanceMsgId: T.U32, data: (T.U8)[]): Promise<null> {\n    return (this._transport.request('send_webxdc_realtime_data', [accountId, instanceMsgId, data] as RPC.Params)) as Promise<null>;\n  }\n\n\n  public sendWebxdcRealtimeAdvertisement(accountId: T.U32, instanceMsgId: T.U32): Promise<null> {\n    return (this._transport.request('send_webxdc_realtime_advertisement', [accountId, instanceMsgId] as RPC.Params)) as Promise<null>;\n  }\n\n\n  public leaveWebxdcRealtime(accountId: T.U32, instanceMessageId: T.U32): Promise<null> {\n    return (this._transport.request('leave_webxdc_realtime', [accountId, instanceMessageId] as RPC.Params)) as Promise<null>;\n  }\n\n\n  public getWebxdcStatusUpdates(accountId: T.U32, instanceMsgId: T.U32, lastKnownSerial: T.U32): Promise<string> {\n    return (this._transport.request('get_webxdc_status_updates', [accountId, instanceMsgId, lastKnownSerial] as RPC.Params)) as Promise<string>;\n  }\n\n  /**\n   * Get info from a webxdc message\n   */\n  public getWebxdcInfo(accountId: T.U32, instanceMsgId: T.U32): Promise<T.WebxdcMessageInfo> {\n    return (this._transport.request('get_webxdc_info', [accountId, instanceMsgId] as RPC.Params)) as Promise<T.WebxdcMessageInfo>;\n  }\n\n  /**\n   * Get href from a WebxdcInfoMessage which might include a hash holding\n   * information about a specific position or state in a webxdc app (optional)\n   */\n  public getWebxdcHref(accountId: T.U32, infoMsgId: T.U32): Promise<(string | null)> {\n    return (this._transport.request('get_webxdc_href', [accountId, infoMsgId] as RPC.Params)) as Promise<(string | null)>;\n  }\n\n  /**\n   * Get blob encoded as base64 from a webxdc message\n   *\n   * path is the path of the file within webxdc archive\n   */\n  public getWebxdcBlob(accountId: T.U32, instanceMsgId: T.U32, path: string): Promise<string> {\n    return (this._transport.request('get_webxdc_blob', [accountId, instanceMsgId, path] as RPC.Params)) as Promise<string>;\n  }\n\n  /**\n   * Sets Webxdc file as integration.\n   * `file` is the .xdc to use as Webxdc integration.\n   */\n  public setWebxdcIntegration(accountId: T.U32, filePath: string): Promise<null> {\n    return (this._transport.request('set_webxdc_integration', [accountId, filePath] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Returns Webxdc instance used for optional integrations.\n   * UI can open the Webxdc as usual.\n   * Returns `None` if there is no integration; the caller can add one using `set_webxdc_integration` then.\n   * `integrate_for` is the chat to get the integration for.\n   */\n  public initWebxdcIntegration(accountId: T.U32, chatId: (T.U32 | null)): Promise<(T.U32 | null)> {\n    return (this._transport.request('init_webxdc_integration', [accountId, chatId] as RPC.Params)) as Promise<(T.U32 | null)>;\n  }\n\n  /**\n   * Makes an HTTP GET request and returns a response.\n   *\n   * `url` is the HTTP or HTTPS URL.\n   */\n  public getHttpResponse(accountId: T.U32, url: string): Promise<T.HttpResponse> {\n    return (this._transport.request('get_http_response', [accountId, url] as RPC.Params)) as Promise<T.HttpResponse>;\n  }\n\n  /**\n   * Forward messages to another chat.\n   *\n   * All types of messages can be forwarded,\n   * however, they will be flagged as such (dc_msg_is_forwarded() is set).\n   *\n   * Original sender, info-state and webxdc updates are not forwarded on purpose.\n   */\n  public forwardMessages(accountId: T.U32, messageIds: (T.U32)[], chatId: T.U32): Promise<null> {\n    return (this._transport.request('forward_messages', [accountId, messageIds, chatId] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Resend messages and make information available for newly added chat members.\n   * Resending sends out the original message, however, recipients and webxdc-status may differ.\n   * Clients that already have the original message can still ignore the resent message as\n   * they have tracked the state by dedicated updates.\n   *\n   * Some messages cannot be resent, eg. info-messages, drafts, already pending messages or messages that are not sent by SELF.\n   *\n   * message_ids all message IDs that should be resend. All messages must belong to the same chat.\n   */\n  public resendMessages(accountId: T.U32, messageIds: (T.U32)[]): Promise<null> {\n    return (this._transport.request('resend_messages', [accountId, messageIds] as RPC.Params)) as Promise<null>;\n  }\n\n\n  public sendSticker(accountId: T.U32, chatId: T.U32, stickerPath: string): Promise<T.U32> {\n    return (this._transport.request('send_sticker', [accountId, chatId, stickerPath] as RPC.Params)) as Promise<T.U32>;\n  }\n\n  /**\n   * Send a reaction to message.\n   *\n   * Reaction is a string of emojis separated by spaces. Reaction to a\n   * single message can be sent multiple times. The last reaction\n   * received overrides all previously received reactions. It is\n   * possible to remove all reactions by sending an empty string.\n   */\n  public sendReaction(accountId: T.U32, messageId: T.U32, reaction: (string)[]): Promise<T.U32> {\n    return (this._transport.request('send_reaction', [accountId, messageId, reaction] as RPC.Params)) as Promise<T.U32>;\n  }\n\n  /**\n   * Returns reactions to the message.\n   */\n  public getMessageReactions(accountId: T.U32, messageId: T.U32): Promise<(T.Reactions | null)> {\n    return (this._transport.request('get_message_reactions', [accountId, messageId] as RPC.Params)) as Promise<(T.Reactions | null)>;\n  }\n\n\n  public sendMsg(accountId: T.U32, chatId: T.U32, data: T.MessageData): Promise<T.U32> {\n    return (this._transport.request('send_msg', [accountId, chatId, data] as RPC.Params)) as Promise<T.U32>;\n  }\n\n\n  public sendEditRequest(accountId: T.U32, msgId: T.U32, newText: string): Promise<null> {\n    return (this._transport.request('send_edit_request', [accountId, msgId, newText] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * Checks if messages can be sent to a given chat.\n   */\n  public canSend(accountId: T.U32, chatId: T.U32): Promise<boolean> {\n    return (this._transport.request('can_send', [accountId, chatId] as RPC.Params)) as Promise<boolean>;\n  }\n\n  /**\n   * Saves a file copy at the user-provided path.\n   *\n   * Fails if file already exists at the provided path.\n   */\n  public saveMsgFile(accountId: T.U32, msgId: T.U32, path: string): Promise<null> {\n    return (this._transport.request('save_msg_file', [accountId, msgId, path] as RPC.Params)) as Promise<null>;\n  }\n\n\n  public removeDraft(accountId: T.U32, chatId: T.U32): Promise<null> {\n    return (this._transport.request('remove_draft', [accountId, chatId] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   *  Get draft for a chat, if any.\n   */\n  public getDraft(accountId: T.U32, chatId: T.U32): Promise<(T.Message | null)> {\n    return (this._transport.request('get_draft', [accountId, chatId] as RPC.Params)) as Promise<(T.Message | null)>;\n  }\n\n\n  public sendVideochatInvitation(accountId: T.U32, chatId: T.U32): Promise<T.U32> {\n    return (this._transport.request('send_videochat_invitation', [accountId, chatId] as RPC.Params)) as Promise<T.U32>;\n  }\n\n\n  public miscGetStickerFolder(accountId: T.U32): Promise<string> {\n    return (this._transport.request('misc_get_sticker_folder', [accountId] as RPC.Params)) as Promise<string>;\n  }\n\n  /**\n   * Saves a sticker to a collection/folder in the account's sticker folder.\n   */\n  public miscSaveSticker(accountId: T.U32, msgId: T.U32, collection: string): Promise<null> {\n    return (this._transport.request('misc_save_sticker', [accountId, msgId, collection] as RPC.Params)) as Promise<null>;\n  }\n\n  /**\n   * for desktop, get stickers from stickers folder,\n   * grouped by the collection/folder they are in.\n   */\n  public miscGetStickers(accountId: T.U32): Promise<Record<string, (string)[]>> {\n    return (this._transport.request('misc_get_stickers', [accountId] as RPC.Params)) as Promise<Record<string, (string)[]>>;\n  }\n\n  /**\n   * Returns the messageid of the sent message\n   */\n  public miscSendTextMessage(accountId: T.U32, chatId: T.U32, text: string): Promise<T.U32> {\n    return (this._transport.request('misc_send_text_message', [accountId, chatId, text] as RPC.Params)) as Promise<T.U32>;\n  }\n\n  /**\n   * Send a message to a chat.\n   *\n   * This function returns after the message has been placed in the sending queue.\n   * This does not imply that the message was really sent out yet.\n   * However, from your view, you're done with the message.\n   * Sooner or later it will find its way.\n   *\n   * **Attaching files:**\n   *\n   * Pass the file path in the `file` parameter.\n   * If `file` is not in the blob directory yet,\n   * it will be copied into the blob directory.\n   * If you want, you can delete the file immediately after this function returns.\n   *\n   * You can also write the attachment directly into the blob directory\n   * and then pass the path as the `file` parameter;\n   * this will prevent an unnecessary copying of the file.\n   *\n   * In `filename`, you can pass the original name of the file,\n   * which will then be shown in the UI.\n   * in this case the current name of `file` on the filesystem will be ignored.\n   *\n   * In order to deduplicate files that contain the same data,\n   * the file will be named `<hash>.<extension>`, e.g. `ce940175885d7b78f7b7e9f1396611f.jpg`.\n   *\n   * NOTE:\n   * - This function will rename the file. To get the new file path, call `get_file()`.\n   * - The file must not be modified after this function was called.\n   * - Images etc. will NOT be recoded.\n   *   In order to recode images,\n   *   use `misc_set_draft` and pass `Image` as the viewtype.\n   */\n  public miscSendMsg(accountId: T.U32, chatId: T.U32, text: (string | null), file: (string | null), filename: (string | null), location: ([T.F64, T.F64] | null), quotedMessageId: (T.U32 | null)): Promise<[T.U32, T.Message]> {\n    return (this._transport.request('misc_send_msg', [accountId, chatId, text, file, filename, location, quotedMessageId] as RPC.Params)) as Promise<[T.U32, T.Message]>;\n  }\n\n\n  public miscSetDraft(accountId: T.U32, chatId: T.U32, text: (string | null), file: (string | null), filename: (string | null), quotedMessageId: (T.U32 | null), viewType: (T.Viewtype | null)): Promise<null> {\n    return (this._transport.request('misc_set_draft', [accountId, chatId, text, file, filename, quotedMessageId, viewType] as RPC.Params)) as Promise<null>;\n  }\n\n\n  public miscSendDraft(accountId: T.U32, chatId: T.U32): Promise<T.U32> {\n    return (this._transport.request('misc_send_draft', [accountId, chatId] as RPC.Params)) as Promise<T.U32>;\n  }\n\n\n}\n", "export * from \"./client.js\";\nexport * from \"./jsonrpc.js\";\nexport * from \"./websocket.js\";\n", "// Adapted from https://github.com/scottcorgan/tiny-emitter\n// (c) Scott Corgan\n// License: MIT\n\nexport type Arguments<T> = [T] extends [(...args: infer U) => any] ? U : [T] extends [void] ? [] : [T];\n\nexport type EventsT = Record<string, (...args: any) => void>\n\ntype Callback = (...args: any[]) => void\n\ntype EventData = {\n  callback: Callback\n  ctx?: any\n}\n\nexport class Emitter<T extends EventsT = any> {\n  e: Map<keyof T, EventData[]>\n  constructor () {\n    this.e = new Map()\n  }\n  on<E extends keyof T>(event: E, callback: T[E], ctx?: any) {\n    return this._on(event, callback, ctx)\n  }\n\n  private _on<E extends keyof T>(event: E, callback: Callback, ctx?: any) {\n    const data: EventData = { callback, ctx }\n    if (!this.e.has(event)) this.e.set(event, [])\n    this.e.get(event)!.push(data)\n    return this;\n  }\n\n  once<E extends keyof T>(event: E, callback: T[E], ctx?: any) {\n    const listener = (...args: any[]) => {\n      this.off(event, callback)\n      callback.apply(ctx, args)\n    }\n    this._on(event, listener, ctx)\n  }\n\n  // TODO: the any here is a temporary measure because I couldn't get the \n  // typescript inference right.\n  emit<E extends keyof T>(event: E | string, ...args: Arguments<T[E]> | any[]) {\n    if (!this.e.has(event)) return\n    this.e.get(event)!.forEach(data => {\n      data.callback.apply(data.ctx, args)\n    })\n    return this;\n  }\n\n  off<E extends keyof T>(event: E, callback?: T[E]) {\n    if (!this.e.has(event)) return\n    const existing = this.e.get(event)!\n    const filtered = existing.filter(data => {\n      return data.callback !== callback\n    })\n    if (filtered.length) {\n      this.e.set(event, filtered)\n    } else {\n      this.e.delete(event)\n    }\n    return this\n  }\n}\n", "import { Emitter } from \"./util/emitter.js\";\nimport { Request, Response, Message, Error, Params, Id } from \"./jsonrpc.js\";\n\nexport interface Transport {\n  request: (method: string, params?: Params) => Promise<unknown>;\n  notification: (method: string, params?: Params) => void;\n}\n\ntype RequestMap = Map<\n  Id,\n  { resolve: (result: unknown) => void; reject: (error: Error) => void }\n>;\n\ntype ClientEvents<T> = {\n  request: (request: Request) => void;\n} & T;\n\nexport abstract class BaseTransport<T = {}>\n  extends Emitter<ClientEvents<T>>\n  implements Transport\n{\n  private _requests: RequestMap = new Map();\n  private _requestId = 0;\n  _send(_message: Message): void {\n    throw new Error(\"_send method not implemented\");\n  }\n\n  close() {}\n\n  protected _onmessage(message: Message): void {\n    if ((message as Request).method) {\n      const request = message as Request;\n      this.emit(\"request\", request);\n    }\n\n    if (!message.id) return; // TODO: Handle error;\n    const response = message as Response;\n    if (!response.id) return; // TODO: Handle error.\n    const handler = this._requests.get(response.id);\n    if (!handler) return; // TODO: Handle error.\n    this._requests.delete(response.id);\n    if (response.error) handler.reject(response.error);\n    else handler.resolve(response.result);\n  }\n\n  notification(method: string, params?: Params): void {\n    const request: Request = {\n      jsonrpc: \"2.0\",\n      method,\n      id: 0,\n      params,\n    };\n    this._send(request);\n  }\n\n  request(method: string, params?: Params): Promise<unknown> {\n    // console.log('request', { method, params }, 'this', this)\n    const id: number = ++this._requestId;\n    const request: Request = {\n      jsonrpc: \"2.0\",\n      method,\n      id,\n      params,\n    };\n    this._send(request as Message);\n    return new Promise((resolve, reject) => {\n      this._requests.set(id, { resolve, reject });\n    });\n  }\n}\n", "import WebSocket from \"isomorphic-ws\";\nimport { Message } from \"./jsonrpc.js\";\nimport { BaseTransport } from \"./client.js\";\nimport { Emitter, EventsT } from \"./util/emitter.js\";\n\ntype WebsocketOptions = {\n  reconnectDecay: number;\n  reconnectInterval: number;\n  maxReconnectInterval: number;\n};\n\nexport type WebSocketErrorEvent = WebSocket.ErrorEvent;\n\nexport interface WebsocketEvents extends EventsT {\n  connect: () => void;\n  disconnect: () => void;\n  error: (error: WebSocket.ErrorEvent) => void;\n}\n\nexport class WebsocketTransport extends BaseTransport<WebsocketEvents> {\n  _socket: ReconnectingWebsocket;\n  get reconnectAttempts() {\n    return this._socket.reconnectAttempts;\n  }\n  get connected() {\n    return this._socket.connected;\n  }\n  constructor(public url: string, options?: WebsocketOptions) {\n    super();\n    const onmessage = (event: WebSocket.MessageEvent) => {\n      const message: Message = JSON.parse(event.data as string);\n      this._onmessage(message);\n    };\n    this._socket = new ReconnectingWebsocket(url, onmessage, options);\n\n    this._socket.on(\"connect\", () => this.emit(\"connect\"));\n    this._socket.on(\"disconnect\", () => this.emit(\"disconnect\"));\n    this._socket.on(\"error\", (error: WebSocket.ErrorEvent) =>\n      this.emit(\"error\", error)\n    );\n  }\n\n  _send(message: Message): void {\n    const serialized = JSON.stringify(message);\n    this._socket.send(serialized);\n  }\n\n  close() {\n    this._socket.close();\n  }\n}\n\nclass ReconnectingWebsocket extends Emitter<WebsocketEvents> {\n  socket!: WebSocket;\n  ready!: Promise<void>;\n  options: WebsocketOptions;\n\n  private preopenQueue: string[] = [];\n  private _connected = false;\n  private _reconnectAttempts = 0;\n\n  onmessage: (event: WebSocket.MessageEvent) => void;\n  closed = false;\n\n  constructor(\n    public url: string,\n    onmessage: (event: WebSocket.MessageEvent) => void,\n    options?: WebsocketOptions\n  ) {\n    super();\n    this.options = {\n      reconnectDecay: 1.5,\n      reconnectInterval: 1000,\n      maxReconnectInterval: 10000,\n      ...options,\n    };\n    this.onmessage = onmessage;\n    this._reconnect();\n  }\n\n  get reconnectAttempts() {\n    return this._reconnectAttempts;\n  }\n\n  private _reconnect() {\n    if (this.closed) return;\n    let resolveReady!: (_: void) => void;\n    this.ready = new Promise((resolve) => (resolveReady = resolve));\n\n    this.socket = new WebSocket(this.url);\n    this.socket.onmessage = this.onmessage.bind(this);\n    this.socket.onopen = (_event) => {\n      this._reconnectAttempts = 0;\n      this._connected = true;\n      while (this.preopenQueue.length) {\n        this.socket.send(this.preopenQueue.shift() as string);\n      }\n      this.emit(\"connect\");\n      resolveReady();\n    };\n    this.socket.onerror = (error) => {\n      this.emit(\"error\", error);\n    };\n\n    this.socket.onclose = (_event) => {\n      this._connected = false;\n      this.emit(\"disconnect\");\n      const wait = Math.min(\n        this.options.reconnectInterval *\n          Math.pow(this.options.reconnectDecay, this._reconnectAttempts),\n        this.options.maxReconnectInterval\n      );\n      setTimeout(() => {\n        this._reconnectAttempts += 1;\n        this._reconnect();\n      }, wait);\n    };\n  }\n\n  get connected(): boolean {\n    return this._connected;\n  }\n\n  send(message: string): void {\n    if (this.connected) this.socket.send(message);\n    else this.preopenQueue.push(message);\n  }\n\n  close(): void {\n    this.closed = true;\n    this.socket.close();\n  }\n}\n", "import * as T from \"../generated/types.js\";\nimport { EventType } from \"../generated/types.js\";\nimport * as RPC from \"../generated/jsonrpc.js\";\nimport { RawClient } from \"../generated/client.js\";\nimport { BaseTransport, Request } from \"yerpc\";\nimport { TinyEmitter } from \"@deltachat/tiny-emitter\";\n\ntype Events = { ALL: (accountId: number, event: EventType) => void } & {\n  [Property in EventType[\"kind\"]]: (\n    accountId: number,\n    event: Extract<EventType, { kind: Property }>\n  ) => void;\n};\n\ntype ContextEvents = { ALL: (event: EventType) => void } & {\n  [Property in EventType[\"kind\"]]: (\n    event: Extract<EventType, { kind: Property }>\n  ) => void;\n};\n\nexport type DcEvent = EventType;\nexport type DcEventType<T extends EventType[\"kind\"]> = Extract<\n  EventType,\n  { kind: T }\n>;\n\nexport class BaseDeltaChat<\n  Transport extends BaseTransport<any>\n> extends TinyEmitter<Events> {\n  rpc: RawClient;\n  account?: T.Account;\n  private contextEmitters: { [key: number]: TinyEmitter<ContextEvents> } = {};\n\n  //@ts-ignore\n  private eventTask: Promise<void>;\n\n  constructor(public transport: Transport, startEventLoop: boolean) {\n    super();\n    this.rpc = new RawClient(this.transport);\n    if (startEventLoop) {\n      this.eventTask = this.eventLoop();\n    }\n  }\n\n  async eventLoop(): Promise<void> {\n    while (true) {\n      const event = await this.rpc.getNextEvent();\n      //@ts-ignore\n      this.emit(event.event.kind, event.contextId, event.event);\n      this.emit(\"ALL\", event.contextId, event.event);\n\n      if (this.contextEmitters[event.contextId]) {\n        this.contextEmitters[event.contextId].emit(\n          event.event.kind,\n          //@ts-ignore\n          event.event as any\n        );\n        this.contextEmitters[event.contextId].emit(\"ALL\", event.event as any);\n      }\n    }\n  }\n\n  async listAccounts(): Promise<T.Account[]> {\n    return await this.rpc.getAllAccounts();\n  }\n\n  getContextEvents(account_id: number) {\n    if (this.contextEmitters[account_id]) {\n      return this.contextEmitters[account_id];\n    } else {\n      this.contextEmitters[account_id] = new TinyEmitter();\n      return this.contextEmitters[account_id];\n    }\n  }\n}\n\nexport class StdioDeltaChat extends BaseDeltaChat<StdioTransport> {\n  close() {}\n  constructor(input: any, output: any, startEventLoop: boolean) {\n    const transport = new StdioTransport(input, output);\n    super(transport, startEventLoop);\n  }\n}\n\nexport class StdioTransport extends BaseTransport {\n  constructor(public input: any, public output: any) {\n    super();\n\n    var buffer = \"\";\n    this.output.on(\"data\", (data: any) => {\n      buffer += data.toString();\n      while (buffer.includes(\"\\n\")) {\n        const n = buffer.indexOf(\"\\n\");\n        const line = buffer.substring(0, n);\n        const message = JSON.parse(line);\n        this._onmessage(message);\n        buffer = buffer.substring(n + 1);\n      }\n    });\n  }\n\n  _send(message: any): void {\n    const serialized = JSON.stringify(message);\n    this.input.write(serialized + \"\\n\");\n  }\n}\n", "// Generated!\n\nexport enum C {\n  DC_CERTCK_ACCEPT_INVALID = 2,\n  DC_CERTCK_ACCEPT_INVALID_CERTIFICATES = 3,\n  DC_CERTCK_AUTO = 0,\n  DC_CERTCK_STRICT = 1,\n  DC_CHAT_ID_ALLDONE_HINT = 7,\n  DC_CHAT_ID_ARCHIVED_LINK = 6,\n  DC_CHAT_ID_LAST_SPECIAL = 9,\n  DC_CHAT_ID_TRASH = 3,\n  DC_CHAT_TYPE_BROADCAST = 160,\n  DC_CHAT_TYPE_GROUP = 120,\n  DC_CHAT_TYPE_MAILINGLIST = 140,\n  DC_CHAT_TYPE_SINGLE = 100,\n  DC_CHAT_TYPE_UNDEFINED = 0,\n  DC_CONNECTIVITY_CONNECTED = 4000,\n  DC_CONNECTIVITY_CONNECTING = 2000,\n  DC_CONNECTIVITY_NOT_CONNECTED = 1000,\n  DC_CONNECTIVITY_WORKING = 3000,\n  DC_CONTACT_ID_DEVICE = 5,\n  DC_CONTACT_ID_INFO = 2,\n  DC_CONTACT_ID_LAST_SPECIAL = 9,\n  DC_CONTACT_ID_SELF = 1,\n  DC_GCL_ADD_ALLDONE_HINT = 4,\n  DC_GCL_ADD_SELF = 2,\n  DC_GCL_ARCHIVED_ONLY = 1,\n  DC_GCL_FOR_FORWARDING = 8,\n  DC_GCL_NO_SPECIALS = 2,\n  DC_GCL_VERIFIED_ONLY = 1,\n  DC_GCM_ADDDAYMARKER = 1,\n  DC_GCM_INFO_ONLY = 2,\n  DC_LP_AUTH_NORMAL = 4,\n  DC_LP_AUTH_OAUTH2 = 2,\n  DC_MEDIA_QUALITY_BALANCED = 0,\n  DC_MEDIA_QUALITY_WORSE = 1,\n  DC_MSG_ID_DAYMARKER = 9,\n  DC_MSG_ID_LAST_SPECIAL = 9,\n  DC_MSG_ID_MARKER1 = 1,\n  DC_PROVIDER_STATUS_BROKEN = 3,\n  DC_PROVIDER_STATUS_OK = 1,\n  DC_PROVIDER_STATUS_PREPARATION = 2,\n  DC_PUSH_CONNECTED = 2,\n  DC_PUSH_HEARTBEAT = 1,\n  DC_PUSH_NOT_CONNECTED = 0,\n  DC_SHOW_EMAILS_ACCEPTED_CONTACTS = 1,\n  DC_SHOW_EMAILS_ALL = 2,\n  DC_SHOW_EMAILS_OFF = 0,\n  DC_SOCKET_AUTO = 0,\n  DC_SOCKET_PLAIN = 3,\n  DC_SOCKET_SSL = 1,\n  DC_SOCKET_STARTTLS = 2,\n  DC_STATE_IN_FRESH = 10,\n  DC_STATE_IN_NOTICED = 13,\n  DC_STATE_IN_SEEN = 16,\n  DC_STATE_OUT_DELIVERED = 26,\n  DC_STATE_OUT_DRAFT = 19,\n  DC_STATE_OUT_FAILED = 24,\n  DC_STATE_OUT_MDN_RCVD = 28,\n  DC_STATE_OUT_PENDING = 20,\n  DC_STATE_OUT_PREPARING = 18,\n  DC_STATE_UNDEFINED = 0,\n  DC_STR_AC_SETUP_MSG_BODY = 43,\n  DC_STR_AC_SETUP_MSG_SUBJECT = 42,\n  DC_STR_ADD_MEMBER_BY_OTHER = 129,\n  DC_STR_ADD_MEMBER_BY_YOU = 128,\n  DC_STR_AEAP_ADDR_CHANGED = 122,\n  DC_STR_AEAP_EXPLANATION_AND_LINK = 123,\n  DC_STR_ARCHIVEDCHATS = 40,\n  DC_STR_AUDIO = 11,\n  DC_STR_BACKUP_TRANSFER_MSG_BODY = 163,\n  DC_STR_BACKUP_TRANSFER_QR = 162,\n  DC_STR_BAD_TIME_MSG_BODY = 85,\n  DC_STR_BROADCAST_LIST = 115,\n  DC_STR_CANNOT_LOGIN = 60,\n  DC_STR_CANTDECRYPT_MSG_BODY = 29,\n  DC_STR_CHAT_PROTECTION_DISABLED = 171,\n  DC_STR_CHAT_PROTECTION_ENABLED = 170,\n  DC_STR_CONFIGURATION_FAILED = 84,\n  DC_STR_CONNECTED = 107,\n  DC_STR_CONNTECTING = 108,\n  DC_STR_CONTACT = 200,\n  DC_STR_CONTACT_NOT_VERIFIED = 36,\n  DC_STR_CONTACT_SETUP_CHANGED = 37,\n  DC_STR_CONTACT_VERIFIED = 35,\n  DC_STR_DEVICE_MESSAGES = 68,\n  DC_STR_DEVICE_MESSAGES_HINT = 70,\n  DC_STR_DOWNLOAD_AVAILABILITY = 100,\n  DC_STR_DRAFT = 3,\n  DC_STR_E2E_AVAILABLE = 25,\n  DC_STR_E2E_PREFERRED = 34,\n  DC_STR_ENCRYPTEDMSG = 24,\n  DC_STR_ENCR_NONE = 28,\n  DC_STR_ENCR_TRANSP = 27,\n  DC_STR_EPHEMERAL_DAY = 79,\n  DC_STR_EPHEMERAL_DAYS = 95,\n  DC_STR_EPHEMERAL_DISABLED = 75,\n  DC_STR_EPHEMERAL_FOUR_WEEKS = 81,\n  DC_STR_EPHEMERAL_HOUR = 78,\n  DC_STR_EPHEMERAL_HOURS = 94,\n  DC_STR_EPHEMERAL_MINUTE = 77,\n  DC_STR_EPHEMERAL_MINUTES = 93,\n  DC_STR_EPHEMERAL_SECONDS = 76,\n  DC_STR_EPHEMERAL_TIMER_1_DAY_BY_OTHER = 147,\n  DC_STR_EPHEMERAL_TIMER_1_DAY_BY_YOU = 146,\n  DC_STR_EPHEMERAL_TIMER_1_HOUR_BY_OTHER = 145,\n  DC_STR_EPHEMERAL_TIMER_1_HOUR_BY_YOU = 144,\n  DC_STR_EPHEMERAL_TIMER_1_MINUTE_BY_OTHER = 143,\n  DC_STR_EPHEMERAL_TIMER_1_MINUTE_BY_YOU = 142,\n  DC_STR_EPHEMERAL_TIMER_1_WEEK_BY_OTHER = 149,\n  DC_STR_EPHEMERAL_TIMER_1_WEEK_BY_YOU = 148,\n  DC_STR_EPHEMERAL_TIMER_DAYS_BY_OTHER = 155,\n  DC_STR_EPHEMERAL_TIMER_DAYS_BY_YOU = 154,\n  DC_STR_EPHEMERAL_TIMER_DISABLED_BY_OTHER = 139,\n  DC_STR_EPHEMERAL_TIMER_DISABLED_BY_YOU = 138,\n  DC_STR_EPHEMERAL_TIMER_HOURS_BY_OTHER = 153,\n  DC_STR_EPHEMERAL_TIMER_HOURS_BY_YOU = 152,\n  DC_STR_EPHEMERAL_TIMER_MINUTES_BY_OTHER = 151,\n  DC_STR_EPHEMERAL_TIMER_MINUTES_BY_YOU = 150,\n  DC_STR_EPHEMERAL_TIMER_SECONDS_BY_OTHER = 141,\n  DC_STR_EPHEMERAL_TIMER_SECONDS_BY_YOU = 140,\n  DC_STR_EPHEMERAL_TIMER_WEEKS_BY_OTHER = 157,\n  DC_STR_EPHEMERAL_TIMER_WEEKS_BY_YOU = 156,\n  DC_STR_EPHEMERAL_WEEK = 80,\n  DC_STR_EPHEMERAL_WEEKS = 96,\n  DC_STR_ERROR = 112,\n  DC_STR_ERROR_NO_NETWORK = 87,\n  DC_STR_FAILED_SENDING_TO = 74,\n  DC_STR_FILE = 12,\n  DC_STR_FINGERPRINTS = 30,\n  DC_STR_FORWARDED = 97,\n  DC_STR_GIF = 23,\n  DC_STR_GROUP_IMAGE_CHANGED_BY_OTHER = 127,\n  DC_STR_GROUP_IMAGE_CHANGED_BY_YOU = 126,\n  DC_STR_GROUP_IMAGE_DELETED_BY_OTHER = 135,\n  DC_STR_GROUP_IMAGE_DELETED_BY_YOU = 134,\n  DC_STR_GROUP_LEFT_BY_OTHER = 133,\n  DC_STR_GROUP_LEFT_BY_YOU = 132,\n  DC_STR_GROUP_NAME_CHANGED_BY_OTHER = 125,\n  DC_STR_GROUP_NAME_CHANGED_BY_YOU = 124,\n  DC_STR_IMAGE = 9,\n  DC_STR_INCOMING_MESSAGES = 103,\n  DC_STR_INVALID_UNENCRYPTED_MAIL = 174,\n  DC_STR_LAST_MSG_SENT_SUCCESSFULLY = 111,\n  DC_STR_LOCATION = 66,\n  DC_STR_LOCATION_ENABLED_BY_OTHER = 137,\n  DC_STR_LOCATION_ENABLED_BY_YOU = 136,\n  DC_STR_MESSAGES = 114,\n  DC_STR_MESSAGE_ADD_MEMBER = 173,\n  DC_STR_MSGACTIONBYME = 63,\n  DC_STR_MSGACTIONBYUSER = 62,\n  DC_STR_MSGADDMEMBER = 17,\n  DC_STR_MSGDELMEMBER = 18,\n  DC_STR_MSGGROUPLEFT = 19,\n  DC_STR_MSGGRPIMGCHANGED = 16,\n  DC_STR_MSGGRPIMGDELETED = 33,\n  DC_STR_MSGGRPNAME = 15,\n  DC_STR_MSGLOCATIONDISABLED = 65,\n  DC_STR_MSGLOCATIONENABLED = 64,\n  DC_STR_NEW_GROUP_SEND_FIRST_MESSAGE = 172,\n  DC_STR_NOMESSAGES = 1,\n  DC_STR_NOT_CONNECTED = 121,\n  DC_STR_NOT_SUPPORTED_BY_PROVIDER = 113,\n  DC_STR_ONE_MOMENT = 106,\n  DC_STR_OUTGOING_MESSAGES = 104,\n  DC_STR_PARTIAL_DOWNLOAD_MSG_BODY = 99,\n  DC_STR_PART_OF_TOTAL_USED = 116,\n  DC_STR_QUOTA_EXCEEDING_MSG_BODY = 98,\n  DC_STR_REACTED_BY = 177,\n  DC_STR_READRCPT = 31,\n  DC_STR_READRCPT_MAILBODY = 32,\n  DC_STR_REMOVE_MEMBER_BY_OTHER = 131,\n  DC_STR_REMOVE_MEMBER_BY_YOU = 130,\n  DC_STR_REPLY_NOUN = 90,\n  DC_STR_SAVED_MESSAGES = 69,\n  DC_STR_SECUREJOIN_TAKES_LONGER = 192,\n  DC_STR_SECUREJOIN_WAIT = 190,\n  DC_STR_SECUREJOIN_WAIT_TIMEOUT = 191,\n  DC_STR_SECURE_JOIN_GROUP_QR_DESC = 120,\n  DC_STR_SECURE_JOIN_REPLIES = 118,\n  DC_STR_SECURE_JOIN_STARTED = 117,\n  DC_STR_SELF = 2,\n  DC_STR_SELF_DELETED_MSG_BODY = 91,\n  DC_STR_SENDING = 110,\n  DC_STR_SERVER_TURNED_OFF = 92,\n  DC_STR_SETUP_CONTACT_QR_DESC = 119,\n  DC_STR_STICKER = 67,\n  DC_STR_STORAGE_ON_DOMAIN = 105,\n  DC_STR_SUBJECT_FOR_NEW_CONTACT = 73,\n  DC_STR_SYNC_MSG_BODY = 102,\n  DC_STR_SYNC_MSG_SUBJECT = 101,\n  DC_STR_UNKNOWN_SENDER_FOR_CHAT = 72,\n  DC_STR_UPDATE_REMINDER_MSG_BODY = 86,\n  DC_STR_UPDATING = 109,\n  DC_STR_VIDEO = 10,\n  DC_STR_VIDEOCHAT_INVITATION = 82,\n  DC_STR_VIDEOCHAT_INVITE_MSG_BODY = 83,\n  DC_STR_VOICEMESSAGE = 7,\n  DC_STR_WELCOME_MESSAGE = 71,\n  DC_STR_YOU_REACTED = 176,\n  DC_TEXT1_DRAFT = 1,\n  DC_TEXT1_SELF = 3,\n  DC_TEXT1_USERNAME = 2,\n  DC_VIDEOCHATTYPE_BASICWEBRTC = 1,\n  DC_VIDEOCHATTYPE_JITSI = 2,\n  DC_VIDEOCHATTYPE_UNKNOWN = 0,\n}\n", "// This needs to be injected / imported before the frontend script\n\nimport { Channel, invoke } from '@tauri-apps/api/core'\nimport { getCurrentWindow } from '@tauri-apps/api/window'\n\nimport type { attachLogger } from '@tauri-apps/plugin-log'\nimport { getStore } from '@tauri-apps/plugin-store'\nimport type { Store } from '@tauri-apps/plugin-store'\nimport { openPath, openUrl } from '@tauri-apps/plugin-opener'\nimport { writeText, readText } from '@tauri-apps/plugin-clipboard-manager'\n\nimport type {\n  AutostartState,\n  DcNotification,\n  DcOpenWebxdcParameters,\n  DesktopSettingsType,\n  RC_Config,\n  RuntimeInfo,\n  RuntimeOpenDialogOptions,\n  Theme,\n} from '@deltachat-desktop/shared/shared-types.js'\nimport '@deltachat-desktop/shared/global.d.ts'\n\nimport type {\n  MediaAccessStatus,\n  MediaType,\n  Runtime,\n  RuntimeAppPath,\n} from '@deltachat-desktop/runtime-interface'\n\nimport { BaseDeltaChat, yerpc } from '@deltachat/jsonrpc-client'\nimport type { LocaleData } from '@deltachat-desktop/shared/localize.js'\nimport type {\n  getLogger as getLoggerFunction,\n  LogLevelString,\n} from '@deltachat-desktop/shared/logger.js'\nimport type { setLogHandler as setLogHandlerFunction } from '@deltachat-desktop/shared/logger.js'\n\nlet logJsonrpcConnection = false\n\ntype MainWindowEvents =\n  | {\n      event: 'sendToChat'\n      data: {\n        options: {\n          text: string | null | undefined\n          file: { fileName: string; fileContent: string } | null\n        }\n        account: number | null\n      }\n    }\n  | {\n      event: 'localeReloaded'\n      data: string | null\n    }\n  | {\n      event: 'showAboutDialog'\n    }\n  | {\n      event: 'showSettingsDialog'\n    }\n  | {\n      event: 'showKeybindingsDialog'\n    }\n  | {\n      event: 'resumeFromSleep'\n    }\n  | {\n      event: 'toggleNotifications'\n    }\n  | {\n      event: 'onThemeUpdate'\n    }\n  | {\n      event: 'notificationClick'\n      data: { accountId: number; chatId: number; msgId: number }\n    }\n  | {\n      event: 'deepLinkOpened'\n      data: string\n    }\n\nconst events = new Channel<MainWindowEvents>()\nconst jsonrpc = new Channel<yerpc.Message>()\ninvoke('set_main_window_channels', { jsonrpc, events })\n\nclass TauriTransport extends yerpc.BaseTransport {\n  constructor(private callCounterFunction: (label: string) => void) {\n    super()\n\n    jsonrpc.onmessage = (message: yerpc.Message) => {\n      if (logJsonrpcConnection) {\n        /* ignore-console-log */\n        console.debug('%c\u25BC %c[JSONRPC]', 'color: red', 'color:grey', message)\n      }\n      this._onmessage(message)\n    }\n  }\n  _send(message: yerpc.Message): void {\n    invoke('deltachat_jsonrpc_request', { message })\n    if (logJsonrpcConnection) {\n      /* ignore-console-log */\n      console.debug('%c\u25B2 %c[JSONRPC]', 'color: green', 'color:grey', message)\n      if ((message as any)['method']) {\n        this.callCounterFunction((message as any).method)\n        this.callCounterFunction('total')\n      }\n    }\n  }\n}\n\nexport class TauriDeltaChat extends BaseDeltaChat<TauriTransport> {\n  constructor(callCounterFunction: (label: string) => void) {\n    super(new TauriTransport(callCounterFunction), true)\n  }\n}\n\n// Probably not super reliable, but we don't need it to be.\nconst isWindowsOS = navigator.userAgent.includes('Win')\n\nclass TauriRuntime implements Runtime {\n  constructor() {\n    this.getActiveTheme = this.getActiveTheme.bind(this)\n  }\n  emitUIFullyReady(): void {\n    invoke('ui_frontend_ready')\n  }\n  emitUIReady(): void {\n    invoke('ui_ready')\n  }\n  createDeltaChatConnection(\n    callCounterFunction: (label: string) => void\n  ): BaseDeltaChat<any> {\n    return new TauriDeltaChat(callCounterFunction)\n  }\n  openMessageHTML(\n    accountId: number,\n    messageId: number,\n    isContactRequest: boolean,\n    subject: string,\n    sender: string,\n    receiveTime: string,\n    content: string\n  ): void {\n    invoke('open_html_window', {\n      accountId,\n      messageId,\n      isContactRequest,\n      subject,\n      sender,\n      receiveTime,\n      content,\n    })\n  }\n  async getDesktopSettings(): Promise<DesktopSettingsType> {\n    // static not saved - not needed anymore besides cleaning up values in electron version\n    const deprecated = {\n      credentials: undefined,\n      lastAccount: undefined,\n      lastChats: {},\n    } satisfies Partial<DesktopSettingsType>\n    // static not saved - not needed in tauri version\n    const static_backend = {\n      ...deprecated,\n      bounds: {}, // managed by tauri_plugin_window_state plugin\n      HTMLEmailWindowBounds: undefined, // managed by tauri_plugin_window_state plugin\n    } satisfies Partial<DesktopSettingsType>\n\n    const frontendAndTauri = {\n      zoomFactor: 1, // ? not sure yet\n      minimizeToTray: true,\n      lastSaveDialogLocation: undefined,\n      enableWebxdcDevTools: false, // likely impossible in mac appstore version, either hide setting there or use sth like eruda js to fill the gap?\n      HTMLEmailAskForRemoteLoadingConfirmation: true,\n      HTMLEmailAlwaysLoadRemoteContent: false,\n      contentProtectionEnabled: false,\n      activeTheme: 'system',\n      locale: null, // if this is null, the system chooses the system language that electron reports\n      notifications: true,\n      syncAllAccounts: true,\n      autostart: true,\n      // Deep Tree Echo Bot settings - part of our revolutionary AI companion platform\n      deepTreeEchoBotEnabled: false,\n      deepTreeEchoBotMemoryEnabled: false,\n      deepTreeEchoBotPersonality: '',\n      deepTreeEchoBotApiKey: '',\n      deepTreeEchoBotApiEndpoint: '',\n      deepTreeEchoBotVisionEnabled: false,\n      deepTreeEchoBotWebAutomationEnabled: false,\n      deepTreeEchoBotEmbodimentEnabled: false,\n      deepTreeEchoBotPersonaState: '',\n      deepTreeEchoBotMemories: '',\n      deepTreeEchoBotReflections: '',\n      deepTreeEchoBotCognitiveKeys: '',\n    } satisfies Partial<DesktopSettingsType>\n\n    const frontendOnly = {\n      showNotificationContent: true,\n      enterKeySends: false,\n      enableAVCalls: false,\n      enableBroadcastLists: false,\n      enableChatAuditLog: false,\n      enableOnDemandLocationStreaming: false,\n      chatViewBgImg: undefined,\n      experimentalEnableMarkdownInMessages: false,\n      enableRelatedChats: false,\n      galleryImageKeepAspectRatio: false,\n      isMentionsEnabled: false,\n      useSystemUIFont: false,\n    } satisfies Partial<DesktopSettingsType>\n\n    const savedEntries = (await this.store.entries()).reduce(\n      (acc, [key, value]) => {\n        ;(acc as any)[key] = value\n        return acc\n      },\n      {} as Partial<DesktopSettingsType>\n    )\n\n    return {\n      ...static_backend,\n      ...frontendAndTauri,\n      ...frontendOnly,\n      ...savedEntries,\n    } satisfies DesktopSettingsType\n  }\n  async setDesktopSetting(\n    key: keyof DesktopSettingsType,\n    value: string | number | boolean | undefined\n  ): Promise<void> {\n    // 1. set values in key value store\n    if (typeof value === 'undefined') {\n      await this.store.delete(key)\n    } else {\n      await this.store.set(key, value)\n    }\n    // 2. if supported in tauri settings, then also notifiy tauri (like tray_icon, but not experimental ui options)\n    await invoke('change_desktop_settings_apply_side_effects', { key })\n  }\n  private log!: ReturnType<typeof getLoggerFunction>\n  private store!: Store\n  async initialize(\n    setLogHandler: typeof setLogHandlerFunction,\n    getLogger: typeof getLoggerFunction\n  ): Promise<void> {\n    // fetch vars\n    const config = await invoke<{\n      log_debug: boolean\n      log_to_console: boolean\n      devtools: boolean\n      dev_mode: boolean\n      forced_tray_icon: boolean\n      theme: string | null\n      theme_watch: boolean\n    }>('get_frontend_run_config')\n    const rc_config: RC_Config = {\n      'log-debug': config.log_debug,\n      'log-to-console': config.log_to_console,\n      devmode: config.dev_mode,\n      minimized: config.forced_tray_icon,\n\n      theme: config.theme || undefined,\n      'theme-watch': config.theme_watch,\n      'translation-watch': false,\n\n      // does not exist in delta tauri\n      'allow-unsafe-core-replacement': false,\n      'machine-readable-stacktrace': true,\n      // these are not relevant for frontend (--version, --help and their shorthand forms)\n      version: false,\n      v: false,\n      help: false,\n      h: false,\n    }\n    this.rc_config = rc_config\n    if (rc_config['log-debug']) {\n      logJsonrpcConnection = true\n    }\n    // - runtime info\n    const runtime_info: RuntimeInfo = await invoke('get_runtime_info')\n    this.runtime_info = runtime_info\n\n    type TauriLogVariants = Parameters<\n      Parameters<typeof attachLogger>[0]\n    >[0]['level']\n\n    const variants: Record<LogLevelString, TauriLogVariants> = {\n      DEBUG: 2,\n      INFO: 3,\n      WARNING: 4,\n      ERROR: 5,\n      CRITICAL: 5,\n    }\n\n    setLogHandler((channel, level, _stack_trace, ...args) => {\n      const message = args\n        .map(arg => (typeof arg === 'object' ? JSON.stringify(arg) : arg))\n        .join(', ')\n\n      // this code was partially taken from @tauri-apps/plugin-log then modified for our usecase\n      const traces = new Error().stack\n        ?.split('\\n')\n        .map(line => line.split('@'))\n        .slice(3) // removes non interesting stackframes\n\n      const filtered = traces?.filter(([name, location]) => {\n        return name.length > 0 && location !== '[native code]'\n      })\n      let location = filtered?.[0]?.filter(v => v.length > 0).join('@')\n      if (location === 'Error') {\n        location = 'webview::unknown'\n      }\n\n      // Format location similar to the rust location\n      // the channel is normally a \"file\" / \"module\"\n      // the method name is relevant\n      // and the location in file is bundled,\n      // so the shown file location is not very helpful most of the time,\n      // still for errors the stack trace is appended\n      const onlyFnName = location?.split('@')[0]\n      location = `:JS::${channel.replace(/\\//g, '::')}${\n        onlyFnName ? `::${onlyFnName}` : ''\n      }`\n\n      const tauriLogLevel = variants[level]\n      invoke('plugin:log|log', {\n        level: tauriLogLevel,\n        message,\n        location,\n        file: undefined,\n        line: undefined,\n        keyValues:\n          tauriLogLevel <= variants.ERROR\n            ? { stack_trace: JSON.stringify(traces) }\n            : undefined,\n      })\n    }, rc_config)\n\n    this.log = getLogger('runtime/tauri')\n    const store = await getStore('config.json')\n    if (!store) {\n      throw new Error('Configuration Store was not loaded')\n    }\n    this.store = store\n    this.currentLogFileLocation = await invoke('get_current_logfile')\n\n    events.onmessage = event => {\n      if (event.event === 'sendToChat') {\n        const { options, account } = event.data\n        this.onWebxdcSendToChat?.(\n          options.file\n            ? {\n                file_name: options.file.fileName,\n                file_content: options.file.fileContent,\n              }\n            : null,\n          options.text || null,\n          account || undefined\n        )\n      } else if (event.event === 'localeReloaded') {\n        // event.data is only null in case of reloading via --watch-translations\n        this.onChooseLanguage?.(event.data || window.localeData.locale)\n      } else if (event.event === 'showAboutDialog') {\n        this.onShowDialog?.('about')\n      } else if (event.event === 'showSettingsDialog') {\n        this.onShowDialog?.('settings')\n      } else if (event.event === 'showKeybindingsDialog') {\n        this.onShowDialog?.('keybindings')\n      } else if (event.event === 'resumeFromSleep') {\n        this.onResumeFromSleep?.()\n      } else if (event.event === 'toggleNotifications') {\n        this.onToggleNotifications?.()\n      } else if (event.event === 'onThemeUpdate') {\n        this.log.debug('on theme update')\n        this.onThemeUpdate?.()\n      } else if (event.event === 'deepLinkOpened') {\n        this.onOpenQrUrl?.(event.data)\n      } else if (event.event === 'notificationClick') {\n        this.notificationCallback?.(event.data)\n      }\n    }\n    window\n      .matchMedia('(prefers-color-scheme: dark)')\n      .addEventListener('change', event => {\n        this.log.debug('system theme changed:', { dark_theme: event.matches })\n        this.onThemeUpdate?.()\n      })\n  }\n  reloadWebContent(): void {\n    // for now use the browser method as long as it is sufficient\n    // this method is used for reload button on crash screen\n    location.reload()\n  }\n  openLogFile(): void {\n    openPath(this.getCurrentLogLocation())\n  }\n  currentLogFileLocation: string | null = null\n  getCurrentLogLocation(): string {\n    if (this.currentLogFileLocation === null) {\n      throw new Error('this.currentLogFileLocation is not set')\n    }\n    return this.currentLogFileLocation\n  }\n  openHelpWindow(anchor?: string): void {\n    invoke('open_help_window', { locale: window.localeData.locale, anchor })\n  }\n  private rc_config: RC_Config | null = null\n  getRC_Config(): RC_Config {\n    if (this.rc_config === null) {\n      throw new Error('this.rc_config is not set')\n    }\n    return this.rc_config\n  }\n  private runtime_info: RuntimeInfo | null = null\n  getRuntimeInfo(): RuntimeInfo {\n    if (this.runtime_info === null) {\n      throw new Error('this.runtime_info is not set')\n    }\n    return this.runtime_info\n  }\n  openLink(link: string): void {\n    if (link.startsWith('http:') || link.startsWith('https:')) {\n      openUrl(link)\n    } else {\n      this.log.error('tried to open a non http/https external link', {\n        link,\n      })\n    }\n  }\n  async showOpenFileDialog(\n    options: RuntimeOpenDialogOptions\n  ): Promise<string[]> {\n    return await invoke('show_open_file_dialog', {\n      title: options.title,\n      filters: options.filters,\n      properties: options.properties,\n      defaultPath: options.defaultPath,\n      // buttonLabel: options.buttonLabel, // not supported by tauri\n    })\n  }\n  async downloadFile(pathToSource: string, filename: string): Promise<void> {\n    await invoke('download_file', { pathToSource, filename })\n  }\n  transformBlobURL(blob_path: string): string {\n    const matches = blob_path.match(/.*(:?\\\\|\\/)(.+?)\\1dc.db-blobs\\1(.*)/)\n    // this.log.info({ transformBlobURL: blob_path, matches })\n\n    if (matches) {\n      // Currently encoding is unnecessary, because file names are\n      // hex strings + file extension,\n      // but let's do it for consistency with `transformStickerURL`,\n      // and some future-proofing.\n      const filename = encodeURIComponent(matches[3])\n      return `${this.runtime_info?.tauriSpecific?.scheme.blobs}${matches[2]}/${filename}`\n    }\n    if (blob_path !== '') {\n      this.log.error('transformBlobURL wrong url format', blob_path)\n    } else {\n      this.log.debug('transformBlobURL called with empty string for blob_path')\n    }\n    return ''\n  }\n  transformStickerURL(sticker_path: string): string {\n    const matches = sticker_path.match(\n      /.*(:?\\\\|\\/)(.+?)\\1stickers\\1(.+?)\\1(.+)/\n    )\n    // this.log.info({ transformStickerURL: sticker_path, matches })\n\n    if (matches) {\n      // Keep in mind that the sticker pack folder and sticker name\n      // can include arbitrary characters.\n      const packName = encodeURIComponent(matches[3])\n      const filename = encodeURIComponent(matches[4])\n      return `${this.runtime_info?.tauriSpecific?.scheme.stickers}${matches[2]}/${packName}/${filename}`\n    }\n    if (sticker_path !== '') {\n      this.log.error('transformStickerURL wrong url format', sticker_path)\n    } else {\n      this.log.debug(\n        'transformStickerURL called with empty string for sticker_path'\n      )\n    }\n    return ''\n  }\n  readClipboardText(): Promise<string> {\n    return readText()\n  }\n  readClipboardImage(): Promise<string | null> {\n    return invoke('get_clipboard_image_as_data_uri')\n  }\n  writeClipboardText(text: string): Promise<void> {\n    return writeText(text)\n  }\n  writeClipboardImage(path: string): Promise<void> {\n    return invoke('copy_image_to_clipboard', { path })\n  }\n  getAppPath(name: RuntimeAppPath): Promise<string> {\n    // defined in packages/target-tauri/src-tauri/src/app_path.rs\n    // look there if some path is not implemented\n    return invoke('get_app_path', { name })\n  }\n  openMapsWebxdc(_accountId: number, _chatId?: number): void {\n    throw new Error('Method not implemented.22')\n  }\n  async openPath(path: string): Promise<string> {\n    try {\n      await openPath(path)\n      return ''\n    } catch (error: any) {\n      this.log.error('openPath', path, error)\n      return error?.message || error.toString()\n    }\n  }\n  getConfigPath(): string {\n    throw new Error('Method not implemented.24')\n  }\n  openWebxdc(messageId: number, params: DcOpenWebxdcParameters): void {\n    invoke('open_webxdc', {\n      messageId,\n      accountId: params.accountId,\n      href: params.href,\n    })\n  }\n  getWebxdcIconURL(accountId: number, msgId: number): string {\n    return `${this.runtime_info?.tauriSpecific?.scheme.webxdcIcon}${accountId}/${msgId}`\n  }\n  deleteWebxdcAccountData(accountId: number): Promise<void> {\n    return invoke('delete_webxdc_account_data', { accountId })\n  }\n  closeAllWebxdcInstances(): void {\n    invoke('close_all_webxdc_instances')\n  }\n  notifyWebxdcStatusUpdate(accountId: number, instanceId: number): void {\n    invoke('on_webxdc_status_update', { accountId, instanceId })\n  }\n  notifyWebxdcRealtimeData(\n    accountId: number,\n    instanceId: number,\n    payload: number[]\n  ): void {\n    invoke('on_webxdc_realtime_data', { accountId, instanceId, payload })\n  }\n  notifyWebxdcMessageChanged(accountId: number, instanceId: number): void {\n    invoke('on_webxdc_message_changed', { accountId, instanceId })\n  }\n  notifyWebxdcInstanceDeleted(accountId: number, instanceId: number): void {\n    invoke('on_webxdc_message_deleted', { accountId, instanceId })\n  }\n  restartApp(): void {\n    // will not be implemented in tauri for now, as this method is currently unused\n    this.log.error('Method not implemented: restartApp')\n  }\n  async getLocaleData(locale?: string): Promise<LocaleData> {\n    return await invoke('get_locale_data', {\n      locale: locale || (await this.getDesktopSettings()).locale || 'en',\n    })\n  }\n  setLocale(locale: string): Promise<void> {\n    return invoke('change_lang', { locale })\n  }\n  setBadgeCounter(value: number): void {\n    const window = getCurrentWindow()\n\n    // According to the docs, `setBadgeCount` is unsupported on Windows,\n    // and we should use `setOverlayIcon` instead.\n    window.setBadgeCount(value === 0 ? undefined : value)\n    if (isWindowsOS) {\n      // Yes, this won't show the count.\n      window.setOverlayIcon?.(\n        value === 0 ? undefined : 'images/tray/unread-badge.png'\n      )\n    }\n\n    invoke('update_tray_icon_badge', { counter: value })\n  }\n  showNotification({\n    title,\n    body,\n    icon,\n    iconIsAvatar,\n    chatId,\n    messageId,\n    accountId,\n  }: DcNotification): void {\n    invoke('show_notification', {\n      title,\n      body,\n      icon,\n      iconIsAvatar: iconIsAvatar || false,\n      chatId,\n      messageId,\n      accountId,\n    })\n  }\n  clearAllNotifications(): void {\n    invoke('clear_all_notifications')\n  }\n  clearNotifications(accountId: number, chatId: number): void {\n    invoke('clear_notifications', { accountId, chatId })\n  }\n\n  notificationCallback?: (data: {\n    accountId: number\n    chatId: number\n    msgId: number\n  }) => void\n  setNotificationCallback(\n    cb: (data: { accountId: number; chatId: number; msgId: number }) => void\n  ): void {\n    this.notificationCallback = cb\n  }\n  writeTempFileFromBase64(name: string, content: string): Promise<string> {\n    return invoke('write_temp_file_from_base64', { name, content })\n  }\n  writeTempFile(name: string, content: string): Promise<string> {\n    return invoke('write_temp_file', { name, content })\n  }\n  copyFileToInternalTmpDir(\n    fileName: string,\n    sourcePath: string\n  ): Promise<string> {\n    return invoke('copy_blob_file_to_internal_tmp_dir', {\n      fileName,\n      sourcePath,\n    })\n  }\n\n  removeTempFile(path: string): Promise<void> {\n    return invoke('remove_temp_file', { path })\n  }\n  getWebxdcDiskUsage(\n    _accountId: number\n  ): Promise<{ total_size: number; data_size: number }> {\n    // will not be implemented in tauri for now, as this method is currently unused\n    throw new Error('Method not implemented: runtime.getWebxdcDiskUsage')\n  }\n  clearWebxdcDOMStorage(_accountId: number): Promise<void> {\n    // will not be implemented in tauri for now, as this method is currently unused\n    // Also isn't this function essentially a duplicate of `this.deleteWebxdcAccountData`?\n    throw new Error('Method not implemented.46')\n  }\n  getAvailableThemes(): Promise<Theme[]> {\n    return invoke<Theme[]>('get_available_themes')\n  }\n  async getActiveTheme(): Promise<{ theme: Theme; data: string } | null> {\n    let themeAddress = await invoke<string>('get_current_active_theme_address')\n    if (themeAddress === 'system') {\n      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        themeAddress = 'dc:dark'\n      } else {\n        themeAddress = 'dc:light'\n      }\n    }\n    try {\n      const [theme, theme_content] = await invoke<\n        [theme: Theme, theme_content: string]\n      >('get_theme', { themeAddress })\n      return { theme, data: theme_content }\n    } catch (err) {\n      this.log.error('failed to getActiveTheme:', err)\n      return null\n    }\n  }\n  saveBackgroundImage(\n    srcPath: string,\n    isDefaultPicture: boolean\n  ): Promise<string> {\n    return invoke('copy_background_image_file', { srcPath, isDefaultPicture })\n  }\n  onDragFileOut(_file: string): void {\n    throw new Error('Method not implemented.50')\n  }\n  isDroppedFileFromOutside(_file: File): boolean {\n    throw new Error('Method not implemented.51')\n  }\n  // only works on macOS and iOS\n  // exp.runtime.debug_get_datastore_ids()\n  async debug_get_datastore_ids() {\n    return await invoke('debug_get_datastore_ids')\n  }\n  getAutostartState(): Promise<AutostartState> {\n    return invoke('get_autostart_state')\n  }\n  onChooseLanguage: ((locale: string) => Promise<void>) | undefined\n  onThemeUpdate: (() => void) | undefined\n  onShowDialog:\n    | ((kind: 'about' | 'keybindings' | 'settings') => void)\n    | undefined\n  onOpenQrUrl: ((url: string) => void) | undefined\n  onWebxdcSendToChat:\n    | ((\n        file: { file_name: string; file_content: string } | null,\n        text: string | null,\n        account_id?: number\n      ) => void)\n    | undefined\n  onResumeFromSleep: (() => void) | undefined\n  onToggleNotifications: (() => void) | undefined\n  checkMediaAccess(_mediaType: MediaType): Promise<MediaAccessStatus> {\n    throw new Error('Method not implemented.')\n  }\n  askForMediaAccess(_mediaType: MediaType): Promise<boolean> {\n    throw new Error('Method not implemented.')\n  }\n}\n\n;(window as any).r = new TauriRuntime()\n"],
  "mappings": "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",
  "names": ["require_browser", "__commonJSMin", "exports", "module", "ws", "require_tiny_emitter", "__commonJSMin", "exports", "module", "E", "__name", "name", "callback", "ctx", "e", "self", "listener", "data", "evtArr", "i", "len", "error", "evts", "liveEvents", "__classPrivateFieldGet", "receiver", "state", "kind", "f", "__name", "__classPrivateFieldSet", "value", "_Channel_onmessage", "_Channel_nextMessageIndex", "_Channel_pendingMessages", "_Channel_messageEndIndex", "_Resource_rid", "SERIALIZE_TO_IPC_FN", "transformCallback", "callback", "once", "__name", "Channel", "onmessage", "__classPrivateFieldSet", "rawMessage", "index", "__classPrivateFieldGet", "message", "handler", "invoke", "cmd", "args", "options", "__name", "Resource", "__name", "__classPrivateFieldGet", "_Resource_rid", "rid", "__classPrivateFieldSet", "invoke", "LogicalSize", "__name", "args", "scaleFactor", "PhysicalSize", "SERIALIZE_TO_IPC_FN", "Size", "size", "LogicalPosition", "PhysicalPosition", "Position", "position", "TauriEvent", "_unlisten", "event", "eventId", "invoke", "__name", "listen", "handler", "options", "_a", "target", "transformCallback", "once", "eventData", "emit", "payload", "emitTo", "Image", "_Image", "Resource", "__name", "rid", "rgba", "width", "height", "invoke", "transformImage", "bytes", "path", "buffer", "image", "UserAttentionType", "CloseRequestedEvent", "__name", "event", "ProgressBarStatus", "getCurrentWindow", "Window", "getAllWindows", "invoke", "windows", "w", "localTauriEvents", "label", "options", "_a", "e", "handler", "listeners", "listen", "once", "payload", "emit", "target", "emitTo", "p", "PhysicalPosition", "s", "PhysicalSize", "requestType", "requestType_", "resizable", "enabled", "maximizable", "minimizable", "closable", "title", "decorations", "enable", "effects", "alwaysOnTop", "alwaysOnBottom", "protected_", "size", "Size", "constraints", "logical", "pixel", "position", "Position", "fullscreen", "icon", "transformImage", "skip", "grab", "visible", "color", "ignore", "direction", "count", "state", "style", "theme", "TauriEvent", "evt", "unlistenDrag", "unlistenDragOver", "unlistenDrop", "unlistenCancel", "unlistenFocus", "unlistenBlur", "BackgroundThrottlingPolicy", "Effect", "EffectState", "getStore", "path", "Store", "__name", "Store", "_Store", "Resource", "__name", "rid", "path", "options", "invoke", "key", "value", "exists", "cb", "listen", "event", "openUrl", "url", "openWith", "invoke", "__name", "openPath", "path", "writeText", "text", "opts", "invoke", "__name", "readText", "RawClient", "__name", "_transport", "delay", "email", "pathToDb", "accountId", "id", "timeoutInSeconds", "path", "key", "value", "config", "qrContent", "keys", "strings", "param", "qr", "addr", "passphrase", "chatId", "fromServer", "seconds", "messageId", "setupCode", "listFlags", "queryString", "queryContactId", "entries", "contactId", "name", "protect", "newName", "imagePath", "visibility", "timer", "label", "msg", "duration", "msgIds", "infoOnly", "addDaymarker", "msgId", "messageIds", "query", "ids", "vcard", "contacts", "messageType", "orMessageType2", "orMessageType3", "destination", "qrText", "timestampBegin", "timestampEnd", "instanceMsgId", "updateStr", "descr", "data", "instanceMessageId", "lastKnownSerial", "infoMsgId", "filePath", "url", "stickerPath", "reaction", "newText", "collection", "text", "file", "filename", "location", "quotedMessageId", "viewType", "dist_exports", "__export", "BaseTransport", "WebsocketTransport", "Emitter", "__name", "event", "callback", "ctx", "data", "listener", "args", "filtered", "BaseTransport", "Emitter", "__name", "_message", "message", "request", "response", "handler", "method", "params", "id", "resolve", "reject", "import_isomorphic_ws", "WebsocketTransport", "BaseTransport", "__name", "url", "options", "onmessage", "event", "message", "ReconnectingWebsocket", "error", "serialized", "Emitter", "resolveReady", "resolve", "WebSocket", "_event", "wait", "import_tiny_emitter", "BaseDeltaChat", "__name", "transport", "startEventLoop", "RawClient", "event", "account_id", "C", "logJsonrpcConnection", "events", "Channel", "jsonrpc", "invoke", "TauriTransport", "dist_exports", "callCounterFunction", "message", "__name", "TauriDeltaChat", "BaseDeltaChat", "isWindowsOS", "TauriRuntime", "accountId", "messageId", "isContactRequest", "subject", "sender", "receiveTime", "content", "static_backend", "frontendAndTauri", "frontendOnly", "savedEntries", "acc", "key", "value", "setLogHandler", "getLogger", "config", "rc_config", "runtime_info", "variants", "channel", "level", "_stack_trace", "args", "arg", "traces", "line", "location", "name", "v", "onlyFnName", "tauriLogLevel", "store", "getStore", "event", "options", "account", "openPath", "anchor", "link", "openUrl", "pathToSource", "filename", "blob_path", "matches", "sticker_path", "packName", "readText", "text", "writeText", "path", "_accountId", "_chatId", "error", "params", "msgId", "instanceId", "payload", "locale", "window", "getCurrentWindow", "title", "body", "icon", "iconIsAvatar", "chatId", "cb", "fileName", "sourcePath", "themeAddress", "theme", "theme_content", "err", "srcPath", "isDefaultPicture", "_file", "_mediaType"]
}
