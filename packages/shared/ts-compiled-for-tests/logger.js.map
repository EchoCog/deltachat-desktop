{
  "version": 3,
  "sources": ["../logger.ts"],
  "sourcesContent": ["import errorStackParser from 'error-stack-parser'\nimport StackFrame from 'stackframe'\nimport { RC_Config } from './shared-types.js'\n\nconst startTime = Date.now()\n\nexport const colorize = (light: number, code: number) => (str: string) =>\n  '\\x1B[' + light + ';' + code + 'm' + str + '\\x1b[0m'\nexport const blue = colorize(1, 34)\nexport const red = colorize(1, 31)\nexport const yellow = colorize(1, 33)\nexport const grey = colorize(0, 37)\nexport const green = colorize(1, 37)\nexport const cyan = colorize(1, 36)\n\nconst emojiFontCss =\n  'font-family: Roboto, \"Apple Color Emoji\", NotoEmoji, \"Helvetica Neue\", Arial, Helvetica, NotoMono, sans-serif !important;'\n\nexport const enum LogLevelString {\n  DEBUG = 'DEBUG',\n  WARNING = 'WARNING',\n  INFO = 'INFO',\n  ERROR = 'ERROR',\n  CRITICAL = 'CRITICAL',\n}\n\nconst LoggerVariants = [\n  {\n    log: console.debug,\n    level: LogLevelString.DEBUG,\n    emoji: '\uD83D\uDD78\uFE0F',\n    symbol: '[D]',\n  },\n  {\n    log: console.info,\n    level: LogLevelString.INFO,\n    emoji: '\u2139\uFE0F',\n    symbol: blue('[i]'),\n  },\n  {\n    log: console.warn,\n    level: LogLevelString.WARNING,\n    emoji: '\u26A0\uFE0F',\n    symbol: yellow('[w]'),\n  },\n  {\n    log: console.error,\n    level: LogLevelString.ERROR,\n    emoji: '\uD83D\uDEA8',\n    symbol: red('[E]'),\n  },\n  {\n    log: console.error,\n    level: LogLevelString.CRITICAL,\n    emoji: '\uD83D\uDEA8\uD83D\uDEA8',\n    symbol: red('[C]'),\n  },\n]\n\nexport function printProcessLogLevelInfo() {\n  /* ignore-console-log */\n  console.info(\n    `%cLogging Levels:\\n${LoggerVariants.map(v => `${v.emoji} ${v.level}`).join(\n      '\\n'\n    )}`,\n    emojiFontCss\n  )\n  /* ignore-console-log */\n  console.info(\n    `# Tips and Tricks for using the search filter in the browser console:\n\n\u2022 Use space to separate search terms\n\u2022 Exclude search terms using -\n\u2022 If the search term contains spaces you should escape it with \"\"\n\nExamples:\n\n\uD83D\uDD78\uFE0F          only show debug messages\n-\uD83D\uDD78\uFE0F         don't show debug messages\n\u2139\uFE0F          only show info messages\n-\u2139\uFE0F         don't show info messages\n\uD83D\uDC7B          only show events from background accounts (not selected accounts)\n-\uD83D\uDC7B         don't show events from background accounts (not selected accounts)\n\uD83D\uDCE1          only show events\n-\uD83D\uDCE1         don't show any events\n[JSONRPC]   only show jsonrpc messages\n-[JSONRPC]  don't show jsonrpc messages\n\nStart deltachat with --devmode (or --log-debug and --log-to-console) argument to show full log output.\nIf the log seems quiet, make sure the 'All levels' drop down has 'Verbose' checked.\n  `\n  )\n}\n\nexport type LogHandlerFunction = (\n  channel: string,\n  level: LogLevelString,\n  stacktrace: ReturnType<typeof getStackTrace>,\n  ...args: any[]\n) => void\n\nlet handler: LogHandlerFunction\nlet rc: RC_Config = {} as any\n\nexport function setLogHandler(\n  LogHandler: LogHandlerFunction,\n  rcObject: RC_Config\n) {\n  handler = LogHandler\n  rc = rcObject\n}\n\nfunction log(\n  { channel, isMainProcess }: Logger,\n  level: number,\n  stacktrace: ReturnType<typeof getStackTrace>,\n  args: any[]\n) {\n  const variant = LoggerVariants[level]\n  if (!handler) {\n    /* ignore-console-log */\n    console.log('Failed to log message - Handler not initialized yet')\n    /* ignore-console-log */\n    console.log(`Log Message: ${channel} ${level} ${args.join(' ')}`)\n    throw Error('Failed to log message - Handler not initialized yet')\n  }\n  handler(channel, variant.level, stacktrace, ...args)\n  if (rc['log-to-console']) {\n    if (isMainProcess) {\n      const beginning = `${Math.round((Date.now() - startTime) / 100) / 10}s ${\n        LoggerVariants[level].symbol\n      }${grey(channel)}:`\n      if (!stacktrace) {\n        variant.log(beginning, ...args)\n      } else {\n        variant.log(\n          beginning,\n          ...args,\n          red(\n            Array.isArray(stacktrace)\n              ? stacktrace.map(s => `\\n${s.toString()}`).join()\n              : stacktrace\n          )\n        )\n      }\n    } else {\n      const prefix = `%c${variant.emoji}%c${channel}`\n      const prefixStyle = [emojiFontCss, 'color:blueviolet;']\n\n      if (stacktrace) {\n        variant.log(prefix, ...prefixStyle, stacktrace, ...args)\n      } else {\n        variant.log(prefix, ...prefixStyle, ...args)\n      }\n    }\n  }\n}\n\nfunction getStackTrace(): StackFrame[] | string {\n  const rawStack: StackFrame[] = errorStackParser.parse(\n    new Error('Get Stacktrace')\n  )\n  const stack = rawStack.slice(2, rawStack.length)\n  return rc['machine-readable-stacktrace']\n    ? stack\n    : stack.map(s => `\\n${s.toString()}`).join()\n}\n\nexport class Logger {\n  //@ts-ignore\n  isMainProcess = typeof window === 'undefined'\n  constructor(public readonly channel: string) {\n    if (channel === 'core/event') {\n      // disable js stacktrace for core events\n      // as it is useless information (always pointing to the event emitter)\n      this.getStackTrace = () => ''\n    }\n  }\n\n  private getStackTrace(): StackFrame[] | string {\n    const rawStack: StackFrame[] = errorStackParser.parse(\n      new Error('Get Stacktrace')\n    )\n    const stack = rawStack.slice(2, rawStack.length)\n    return rc['machine-readable-stacktrace']\n      ? stack\n      : stack.map(s => `\\n${s.toString()}`).join()\n  }\n\n  debug(...args: any[]) {\n    if (!rc['log-debug']) return\n    log(this, 0, '', args)\n  }\n\n  info(...args: any[]) {\n    log(this, 1, '', args)\n  }\n\n  warn(...args: any[]) {\n    log(this, 2, this.getStackTrace(), args)\n  }\n\n  error(...args: any[]) {\n    log(this, 3, this.getStackTrace(), args)\n  }\n\n  /** use this when you know that the stacktrace is not relevant */\n  errorWithoutStackTrace(...args: any[]) {\n    log(this, 3, [], args)\n  }\n\n  critical(...args: any[]) {\n    log(this, 4, this.getStackTrace(), args)\n  }\n}\n\nexport function getLogger(channel: string) {\n  return new Logger(channel)\n}\n\n// Fix for error not being able to be converted into json\n// From https://stackoverflow.com/a/18391400\nif (!('toJSON' in Error.prototype))\n  Object.defineProperty(Error.prototype, 'toJSON', {\n    value: function () {\n      const alt = {}\n      Object.getOwnPropertyNames(this).forEach(function (key) {\n        //@ts-ignore\n        alt[key] = this[key]\n      }, this)\n      return alt\n    },\n    configurable: true,\n    writable: true,\n  })\n"],
  "mappings": "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",
  "names": ["LogLevelString"]
}
