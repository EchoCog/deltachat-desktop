{
  "version": 3,
  "sources": ["../util.ts"],
  "sourcesContent": ["export function truncateText(text: string, max_len: number) {\n  if (text.length > max_len) {\n    return text.slice(0, max_len) + '\u2026'\n  } else {\n    return text\n  }\n}\n\n/**\n * @returns Whether the `url` is an invite link (for contact or a group).\n * - https://github.com/deltachat/invite\n * - https://github.com/deltachat/interface/blob/main/uri-schemes.md#invite-links-httpsideltachat-\n */\nexport function isInviteLink(url: string) {\n  return url.startsWith('https://i.delta.chat/') && url.includes('#')\n}\n\nexport function throttle<R, A extends any[]>(\n  fn: (...args: A) => R,\n  wait: number\n) {\n  let inThrottle: boolean,\n    timeout: ReturnType<typeof setTimeout>,\n    lastTime: number\n  const ret = (...args: A) => {\n    if (!inThrottle) {\n      fn(...args)\n      lastTime = performance.now()\n      inThrottle = true\n    } else {\n      clearTimeout(timeout)\n      timeout = setTimeout(\n        () => {\n          fn(...args)\n          lastTime = performance.now()\n        },\n        Math.max(wait - (performance.now() - lastTime), 0)\n      )\n    }\n  }\n  ret.cancel = () => {\n    clearTimeout(timeout)\n  }\n  return ret\n}\n"],
  "mappings": ";AAAO,gBAAS,aAAa,MAAc,SAAiB;AAC1D,MAAI,KAAK,SAAS,SAAS;AACzB,WAAO,KAAK,MAAM,GAAG,OAAO,IAAI;AAAA,EAClC,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAOO,gBAAS,aAAa,KAAa;AACxC,SAAO,IAAI,WAAW,uBAAuB,KAAK,IAAI,SAAS,GAAG;AACpE;AAEO,gBAAS,SACd,IACA,MACA;AACA,MAAI,YACF,SACA;AACF,QAAM,MAAM,IAAI,SAAY;AAC1B,QAAI,CAAC,YAAY;AACf,SAAG,GAAG,IAAI;AACV,iBAAW,YAAY,IAAI;AAC3B,mBAAa;AAAA,IACf,OAAO;AACL,mBAAa,OAAO;AACpB,gBAAU;AAAA,QACR,MAAM;AACJ,aAAG,GAAG,IAAI;AACV,qBAAW,YAAY,IAAI;AAAA,QAC7B;AAAA,QACA,KAAK,IAAI,QAAQ,YAAY,IAAI,IAAI,WAAW,CAAC;AAAA,MACnD;AAAA,IACF;AAAA,EACF;AACA,MAAI,SAAS,MAAM;AACjB,iBAAa,OAAO;AAAA,EACtB;AACA,SAAO;AACT;",
  "names": []
}
