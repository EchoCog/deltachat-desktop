.message-list-and-composer {
  width: 70%;
  display: flex;
  flex-direction: column;
  height: 100%;
  background-image: var(--chatViewBgImgPath);
  background-size: cover;
  background-color: var(--chatViewBg);
  overflow: hidden;

  .jump-down-button {
    $heightUnreadCounter: 20px;
    $heightJumpToBottomButton: 40px;
    $width: 40px;
    $height: $heightUnreadCounter + $heightJumpToBottomButton - 5px;
    $marginBottom: 10px;
    $marginRight: 10px;

    position: relative;
    left: calc(100% - #{$width} - #{$marginRight});
    bottom: calc(-100% + #{$height} + #{$marginBottom});
    height: $height;
    width: $width;
    z-index: $z-index-new-local-scope; // needed for .jump-down-button>.counter

    .counter {
      position: relative;
      z-index: map-get($z-index, jump-down-button-scope-counter);
      width: 25px;
      height: 25px;
      margin: 0 auto;
      margin-bottom: 0px;
      border-radius: 100%;
      background-color: var(--colorPrimary);
      color: #fff;
      line-height: 25px;
      font-size: 13px;
      text-align: center;
    }

    .counter-3digits {
      font-size: 11px !important;
    }

    .button {
      position: relative;

      height: $heightJumpToBottomButton;
      margin: 0 auto;
      margin-top: -10px;
      width: $width;

      line-height: $heightJumpToBottomButton;
      background-color: var(--jumpDownButtonBackgroundColor);
      border-radius: 100%;
      box-shadow: 0px 3px 5px #66666630;

      cursor: pointer;
      .icon {
        height: $heightJumpToBottomButton;
        width: $width;
        background-color: var(--jumpDownButtonIconColor);
        &.down {
          mask: url(../images/ic_scroll_down.png) no-repeat center;
          -webkit-mask: url(../images/ic_scroll_down.png) no-repeat center;
          mask-size: 65%;
          -webkit-mask-size: 65%;
        }
        &.back {
          mask: url(../images/ic_scroll_back.svg) no-repeat center;
          -webkit-mask: url(../images/ic_scroll_back.svg) no-repeat center;
          mask-size: 65%;
          -webkit-mask-size: 65%;
        }
      }
    }
  }
}

.message-list-and-composer__message-list {
  position: relative;
  flex-grow: 1;

  #message-list {
    position: absolute;
    bottom: 0;
    // There is also `will-change: scroll-position` dynamically set on this
    // element.
    overflow: scroll;
    max-height: 100%;
    width: 100%;
    padding: 0 0.5em;

    // The following code block is to prevent
    // https://github.com/deltachat/deltachat-desktop/issues/3753
    // which is 'Adding a reaction makes the chat "scroll up"
    // (then you have to scroll to see new messages)'.
    // Signal messenger implements the same measure:
    // https://github.com/signalapp/Signal-Desktop/blob/29c404266863491a3b26a73b24602d36d7a3ac46/stylesheets/_modules.scss#L5573-L5587
    // which they have looked up here:
    // https://css-tricks.com/books/greatest-css-tricks/pin-scrolling-to-bottom/
    // Spec:
    // https://drafts.csswg.org/css-scroll-anchoring
    //
    // TODO there is a concern: whether this makes the chat list jumpy
    // when it is scrolled up, making the scroll anchor
    // (which is at the bottom of chat list) go way off screen.
    // This doesn't appear to be the case.
    // Also whether we're gonna jump to bottom if the user is reading old
    // messages as is waiting for the newer ones to load
    // while scrolled to bottom. This would be unexpected.
    // I suppose this is why Signal has `--have-newest`.
    // But I also haven't managed to see this happen.
    // But, for example, if you scroll up a bit, and then someone
    // adds a reaction to a message that is rendered, but is above the messages
    // that are currently in view, the view will shift down.
    //
    // Perhaps a more reasonable approch would be to set the last message
    // _in view_ as the anchor, and only explicitly scroll to latest message
    // when it is freshly received,
    // but this will (probably?) require quite some JS.
    // Or simply only alternate scroll anchoring behavior when
    // we're scrolled to bottom.
    // Ah, if only there was a way to "flip" overflow anchor selection
    // algorithm to just select bottom-most visible element
    // and not the top-most.
    // Maybe we could though? E.g. with `order` CSS property?
    //
    // Anyways, it's not often that already sent messages change in Delta Chat,
    // because there is no "delete for everyone" and no "Edit".
    & > ul {
      // But the scrollable element is not `<ul>` but `#message-list` -
      // its parent?? This appears to still work.
      & > *:not(.overflow-anchor) {
        overflow-anchor: none;
      }
      &::after {
        content: '';
        height: 1px;
        display: block;
        overflow-anchor: auto;
      }
      & > :last-child {
        margin-bottom: 0;
      }
    }

    &::-webkit-scrollbar-track {
      background: transparent;
    }
  }

  ul {
    list-style: none;
    min-width: 200px;
    margin: 10px 0px;

    li {
      margin-bottom: 10px;
      min-width: 200px;

      &::after {
        visibility: hidden;
        display: block;
        font-size: 0;
        content: ' ';
        clear: both;
        height: 0;
      }
      &.highlight {
        -webkit-animation: highlight-fade 3s 1;
        -moz-animation: highlight-fade 3s 1;
      }

      @-webkit-keyframes highlight-fade {
        0% {
          background-color: var(--messageHightlightColor);
        }
        100% {
          background-color: transparent;
        }
      }
      @-moz-keyframes highlight-fade {
        0% {
          background-color: var(--messageHightlightColor);
        }
        100% {
          background-color: transparent;
        }
      }
    }
  }
}
